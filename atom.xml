<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I am Oliver</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ochukai.me/"/>
  <updated>2017-01-24T03:34:19.077Z</updated>
  <id>http://blog.ochukai.me/</id>
  
  <author>
    <name>Oliver Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test post assets folder</title>
    <link href="http://blog.ochukai.me/test-post-assets-folder/"/>
    <id>http://blog.ochukai.me/test-post-assets-folder/</id>
    <published>2017-01-24T03:34:19.000Z</published>
    <updated>2017-01-24T03:34:19.077Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>稍微总结一下 dva 😜</title>
    <link href="http://blog.ochukai.me/dva-in-action/"/>
    <id>http://blog.ochukai.me/dva-in-action/</id>
    <published>2017-01-23T01:28:20.000Z</published>
    <updated>2017-01-24T06:18:01.627Z</updated>
    
    <content type="html"><![CDATA[<p>使用 dva 已经四个月了吧，陆陆续续做了两三个项目，之前在非常恶心的傻逼公司 Kyligence，算是我的 dva 的启蒙地，那一天傍晚，不小心看到了 ant-tool，然后又看到了 antd，于是感觉我的前端有了一次不小的改变~ 😇</p><h2 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h2><p><img src="../images/dva-flow.png" alt=""></p><p>上面是一张 dva 的图，<code>component，state，dispatch，connect</code> 都是与 redux 一样的概念，不过，dva 把 <strong>action -&gt; reducer</strong> 拆分成了，<strong>action -&gt; model(reducer, effect,subscription)</strong>，这一部分改变的还是很多的，让 dispatch 的写法方便了一万倍。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>一个简单的 model 是这样的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span>
<span class="line">  <span class="attr">namespace</span>: <span class="string">'example'</span>, <span class="comment">// 这里是命名空间  </span></span>
<span class="line">  state: &#123;&#125;,</span>
<span class="line">  <span class="attr">subscriptions</span>: &#123;&#125;,</span>
<span class="line">  </span>
<span class="line">  <span class="attr">effects</span>: &#123;</span>
<span class="line">    * query(&#123; payload &#125;, &#123; select, call, put &#125;) &#123;</span>
<span class="line">      <span class="comment">//</span></span>
<span class="line">    &#125;</span>
<span class="line">  &#125;,</span>
<span class="line"></span>
<span class="line">  <span class="attr">reducers</span>: &#123;</span>
<span class="line">    querySuccess(state, &#123; payload &#125;) &#123;</span>
<span class="line">      <span class="comment">//</span></span>
<span class="line">    &#125;</span>
<span class="line">  &#125;,</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>可以简单的理解为 comboReducer 使用这个值作为 key，而且 namespace 最重要的地方是用在 dispatch（put）的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 假如 example 的 model 定义了 query 这个 effect 或者 reducer。</span></span>
<span class="line">dispatch(&#123; <span class="attr">type</span>: <span class="string">'example/query'</span> &#125;)</span>
<span class="line"></span>
<span class="line"><span class="comment">// 当前 model 中存在名为 querySuccess 的 reducer</span></span>
<span class="line"><span class="comment">// 然后在 effect 中这样访问 reducer</span></span>
<span class="line"><span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'querySuccess'</span> &#125;) </span>
<span class="line"></span>
<span class="line"><span class="comment">// 在组件中当然可以直接 dispatch(&#123; type: 'example/someReducer' &#125;)</span></span>
</pre></td></tr></table></figure><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>就是一个对象</p><h3 id="subscriptions"><a href="#subscriptions" class="headerlink" title="subscriptions"></a>subscriptions</h3><p>顾名思义可以订阅一些事件，待续😆</p><h3 id="effects"><a href="#effects" class="headerlink" title="effects"></a>effects</h3><p>异步操作，这里使用了 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="external">redux-sagas</a>，先举个例子吧，其实就是异步的action， 但是是使用 sagas 实现的，很好（niu）看（bi）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span>
<span class="line">* update(&#123; payload &#125;, &#123; call, put &#125;) &#123;</span>
<span class="line">  <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'showModalLoading'</span> &#125;);</span>
<span class="line"></span>
<span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">yield</span> call(saveTenants, payload);</span>
<span class="line">  <span class="keyword">if</span> (data.status === <span class="string">'success'</span>) &#123;</span>
<span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'hideModal'</span> &#125;);</span>
<span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'query'</span> &#125;); <span class="comment">// 刷新一下列表</span></span>
<span class="line">  &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'hideModalLoading'</span> &#125;);</span>
<span class="line">  &#125;</span>
<span class="line">&#125;,</span>
<span class="line"><span class="comment">// ...</span></span>
</pre></td></tr></table></figure><p>（感觉丝毫不需要我用文字描述，顺着读完就知道是什么意思了，还是特么异步的）</p><blockquote><p>select, put, call 这些概念是 sagas 里面的</p></blockquote><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>修改 state 的地方</p><h2 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h2><p>dva 会对 dispatch 做一些处理，比如他要把 <strong>example/query</strong> 分成 example 下面的 query （effect/reducer）。</p><p>所以肯定要注册这个 model，才能让 dva 知道 example 的存在，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span>
<span class="line"><span class="keyword">const</span> app = dva();</span>
<span class="line"></span>
<span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/example'</span>));</span>
</pre></td></tr></table></figure><p>其实 dva 出了 model 这个方法，还有其他的几个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Init</span></span>
<span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'dva'</span>;</span>
<span class="line"><span class="keyword">const</span> app = dva();</span>
<span class="line"></span>
<span class="line"><span class="comment">// 2. Plugins</span></span>
<span class="line">app.use(&#123;</span>
<span class="line"><span class="comment">/**</span>
<span class="line">* called when an effect or subscription emit an error.</span>
<span class="line">*</span>
<span class="line">* @param  &#123;string&#125; err       Exception</span>
<span class="line">* @param  &#123;function&#125; action  the effect or subscription</span>
<span class="line">*/</span></span>
<span class="line"><span class="comment">// onError : (err, action) =&gt; &#123;&#125;</span></span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line"><span class="comment">// 3. Model</span></span>
<span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./models/example'</span>));</span>
<span class="line"></span>
<span class="line"><span class="comment">// 4. Router</span></span>
<span class="line">app.router(<span class="built_in">require</span>(<span class="string">'./router'</span>));</span>
<span class="line"></span>
<span class="line"><span class="comment">// 5. Start</span></span>
<span class="line">app.start(<span class="string">'#root'</span>);</span>
</pre></td></tr></table></figure><h2 id="dev-cli"><a href="#dev-cli" class="headerlink" title="dev-cli"></a><a href="https://github.com/dvajs/dva-cli" target="_blank" rel="external">dev-cli</a></h2><p>比较好用的东西，解决了新建 router，component，model 还要添加 dva 的配置的问题，生成 router， component 的同时会直接在 dva 配置中更新。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">$ dva g route product-list</span>
<span class="line">$ dva g model products</span>
<span class="line">$ dva g component Editor</span>
<span class="line">$ dva g component Users/UserModal</span>
<span class="line">$ dva g component Header --no-css</span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 dva 已经四个月了吧，陆陆续续做了两三个项目，之前在非常恶心的傻逼公司 Kyligence，算是我的 dva 的启蒙地，那一天傍晚，不小心看到了 ant-tool，然后又看到了 antd，于是感觉我的前端有了一次不小的改变~ 😇&lt;/p&gt;&lt;h2 id=&quot;几个概念&quot;&gt;
    
    </summary>
    
      <category term="React" scheme="http://blog.ochukai.me/categories/react/"/>
    
      <category term="JavaScript" scheme="http://blog.ochukai.me/categories/react/javascript/"/>
    
    
      <category term="dva" scheme="http://blog.ochukai.me/tags/dva/"/>
    
      <category term="react" scheme="http://blog.ochukai.me/tags/react/"/>
    
      <category term="js" scheme="http://blog.ochukai.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>删除 .svn 文件夹</title>
    <link href="http://blog.ochukai.me/remove-svn-folder/"/>
    <id>http://blog.ochukai.me/remove-svn-folder/</id>
    <published>2017-01-22T02:09:47.000Z</published>
    <updated>2017-01-22T02:30:05.297Z</updated>
    
    <content type="html"><![CDATA[<p>新建 remove-svn.bat, 放到项目根目录执行就好了。（本来以为 svn 会提供这样的功能，结果还要自己写，😒）</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span>
<span class="line">@<span class="keyword">for</span> /r . <span class="variable">%%a</span> <span class="keyword">in</span> (.) <span class="keyword">do</span> @<span class="keyword">if</span> <span class="keyword">exist</span> "<span class="variable">%%a</span>\.svn" <span class="built_in">rd</span> /s /q "<span class="variable">%%a</span>\.svn"</span>
<span class="line">@<span class="built_in">pause</span></span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新建 remove-svn.bat, 放到项目根目录执行就好了。（本来以为 svn 会提供这样的功能，结果还要自己写，😒）&lt;/p&gt;&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
    
    </summary>
    
      <category term="SVN" scheme="http://blog.ochukai.me/categories/svn/"/>
    
    
      <category term="svn" scheme="http://blog.ochukai.me/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>Textarea 的高度自动增长</title>
    <link href="http://blog.ochukai.me/textarea-height-auto-increase/"/>
    <id>http://blog.ochukai.me/textarea-height-auto-increase/</id>
    <published>2017-01-20T03:48:10.000Z</published>
    <updated>2017-01-20T06:41:03.831Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，textarea 的高度是定死的，rows 指定了之后，高度就不变了，内容多了之后会出现滚动条，这样的设定在大部分的场景下面是够用的， 但是有时就会很丑陋（废话😊）。</p><p>我们都知道 HTML 的元素都有一个 scrollHeight 这个属性，就是当该元素出现滚动条的时候，内容的高度。</p><p>那就方便了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">$(<span class="string">".weui-textarea"</span>).on(<span class="string">'input propertychange keyup'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">  $(<span class="keyword">this</span>).height(<span class="keyword">this</span>.scrollHeight);</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure><p>这样就实现了高度自动增加的 Textarea，但当我试着删掉几行，想让它自动降低高度的时候不禁菊花一紧，他不动~</p><p>这就尴尬,,ԾㅂԾ,,了，于是我就找了另外一种方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
</pre></td><td class="code"><pre><span class="line">$(<span class="string">'.weui-textarea'</span>).on(<span class="string">'input keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">  <span class="comment">// 尝试滚动一段距离，如果没有滚动条，scrollTop 还是 0</span></span>
<span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.scrollTop == <span class="number">0</span>) &#123;</span>
<span class="line">    <span class="keyword">this</span>.scrollTop = <span class="number">1</span>;</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  <span class="keyword">while</span> (<span class="keyword">this</span>.scrollTop == <span class="number">0</span>) &#123;</span>
<span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rows &gt; minRows) &#123;</span>
<span class="line">      <span class="keyword">this</span>.rows--;</span>
<span class="line">    &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">      <span class="keyword">break</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">this</span>.scrollTop = <span class="number">1</span>;</span>
<span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rows &lt; maxRows) &#123;</span>
<span class="line">      <span class="keyword">this</span>.style.overflowY = <span class="string">"hidden"</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.scrollTop &gt; <span class="number">0</span>) &#123;</span>
<span class="line">      <span class="keyword">this</span>.rows++;</span>
<span class="line">      <span class="keyword">break</span>;</span>
<span class="line">    &#125;</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  <span class="keyword">while</span> (<span class="keyword">this</span>.scrollTop &gt; <span class="number">0</span>) &#123;</span>
<span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rows &lt; maxRows) &#123;</span>
<span class="line">      <span class="keyword">this</span>.rows++;</span>
<span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.scrollTop == <span class="number">0</span>) &#123;</span>
<span class="line">        <span class="keyword">this</span>.scrollTop = <span class="number">1</span>;</span>
<span class="line">      &#125;</span>
<span class="line">    &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">      <span class="keyword">this</span>.style.overflowY = <span class="string">"auto"</span>;</span>
<span class="line">      <span class="keyword">break</span>;</span>
<span class="line">    &#125;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure><p>这是一个例子~ （换行试试~😏）</p><p><textarea class="weui-textarea" placeholder="这是一个例子~" rows="3" style="resize:none;width:100%;border:1px solid pink;border-radius:4px;padding:5px;font-size:14px"></textarea></p><script>$(function(){var o=3,s=10;$(".weui-textarea").on("input keyup",function(){for(0==this.scrollTop&&(this.scrollTop=1);0==this.scrollTop&&this.rows>o;)if(this.rows--,this.scrollTop=1,this.rows<s&&(this.style.overflowY="hidden"),this.scrollTop>0){this.rows++;break}for(;this.scrollTop>0;){if(!(this.rows<s)){this.style.overflowY="auto";break}this.rows++,0==this.scrollTop&&(this.scrollTop=1)}})})</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，textarea 的高度是定死的，rows 指定了之后，高度就不变了，内容多了之后会出现滚动条，这样的设定在大部分的场景下面是够用的， 但是有时就会很丑陋（废话😊）。&lt;/p&gt;&lt;p&gt;我们都知道 HTML 的元素都有一个 scrollHeight 这个属性，就是当
    
    </summary>
    
      <category term="HTML" scheme="http://blog.ochukai.me/categories/html/"/>
    
    
      <category term="textarea" scheme="http://blog.ochukai.me/tags/textarea/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 绑定 this</title>
    <link href="http://blog.ochukai.me/js-bind-this/"/>
    <id>http://blog.ochukai.me/js-bind-this/</id>
    <published>2016-12-30T02:28:20.000Z</published>
    <updated>2016-12-30T03:55:16.592Z</updated>
    
    <content type="html"><![CDATA[<p>其实这篇文章主要是介绍这个东西 <a href="https://github.com/tc39/proposal-bind-operator" target="_blank" rel="external">Proposal Bind Operator</a> 或者 <a href="http://wiki.ecmascript.org/doku.php?id=strawman:bind_operator" target="_blank" rel="external">bind_operator</a>。</p><p>也是在一个很偶然的机会看到了，git 上面的一个项目用到了这个用法，为什么自己发现不了这些东西呢？</p><h2 id="传统的-this-绑定"><a href="#传统的-this-绑定" class="headerlink" title="传统的 this 绑定"></a>传统的 this 绑定</h2><h3 id="在函数外面暂存一个变量"><a href="#在函数外面暂存一个变量" class="headerlink" title="在函数外面暂存一个变量"></a>在函数外面暂存一个变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 别名</span></span>
<span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span>
<span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">  <span class="keyword">this</span>.doSomething();</span>
<span class="line">&#125;, <span class="number">1000</span>);</span>
</pre></td></tr></table></figure><h3 id="使用-bind-函数-amp-箭头函数"><a href="#使用-bind-函数-amp-箭头函数" class="headerlink" title="使用 bind 函数 &amp; 箭头函数"></a>使用 bind 函数 &amp; 箭头函数</h3><p>在使用 <code>class *** extends React.Component {}</code> 的写法声明 React 组件的时候，组件的方法都不会被自动绑定 this 了，下面的两种方法比较常见：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// bind</span></span>
<span class="line">setTimeout(</span>
<span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line">    <span class="keyword">this</span>.doSomething();</span>
<span class="line">  &#125;.bind(<span class="keyword">this</span>), </span>
<span class="line">  <span class="number">1000</span></span>
<span class="line">);</span>
</pre></td></tr></table></figure><p>使用 <code>bind</code> 方法显得稍微有点长，不太好看，不过很好用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// var _this = this;</span></span>
<span class="line"></span>
<span class="line"><span class="comment">// bind</span></span>
<span class="line">setTimeout(</span>
<span class="line">  <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span>
<span class="line">    <span class="comment">// _this.doSomething();</span></span>
<span class="line">    <span class="keyword">this</span>.doSomething();</span>
<span class="line">  &#125;, </span>
<span class="line">  <span class="number">1000</span></span>
<span class="line">);</span>
</pre></td></tr></table></figure><p>箭头函数在经过<code>babel</code>编译后， 差不多就是注释的部分了， 还是用的暂存的办法保存了 <code>this</code>，但是写法就简单了太多。</p><h3><a href="#" class="headerlink" title="::"></a>::</h3><p>看到这种语法之后，感觉其他的都弱爆了。</p><p>在 React 里面，可以这么写</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123; title: '******************', onConfirm: this.handleSave.bind(this) &#125;,</span></span>
<span class="line">&lt;Popconfirm title=<span class="string">"确定要保存吗？"</span> onConfirm=&#123;::<span class="keyword">this</span>.handleSave&#125;&gt;</span>
<span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"ghost"</span> &gt;</span>保存<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span>
<span class="line">&lt;<span class="regexp">/Popconfirm&gt;</span></span>
</pre></td></tr></table></figure><p>可以看到，注释部分表示的编译后的代码，就是用 <code>bind</code> 实现的。</p><p>双冒号前面的对象就是 <code>bind</code> 的参数， 如果没有就是当前的 <code>this</code>, 毕竟这种做法就是用来做绑定的。</p><p>但是有一个问题，就是像这样的需求不好实现，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&lt;Button</span>
<span class="line">  type=<span class="string">"ghost"</span></span>
<span class="line">  icon=<span class="string">"edit"</span></span>
<span class="line">  onClick=&#123;<span class="keyword">this</span>.handleEdit.bind(<span class="keyword">this</span>, item)&#125;</span>
<span class="line">/&gt;</span>
</pre></td></tr></table></figure><p>然后就是黑人问号脸，我试了几种形式 (当然不能用 bind 方法，否则这 :: 没有意义了)</p><ul><li>[this, item]::this.handleEdit</li><li>(this, item)::this.handleEdit // hhh</li><li>this::this.handleEdit(item) // hhh</li></ul><p>感觉唯一靠谱的就是第一种写法了， 编译之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line">_react2.default.createElement(</span>
<span class="line">  _button2.default,</span>
<span class="line">  &#123; </span>
<span class="line">    <span class="attr">type</span>: <span class="string">'ghost'</span>, </span>
<span class="line">    <span class="attr">icon</span>: <span class="string">'edit'</span>, </span>
<span class="line">    <span class="attr">onClick</span>: (_context = [<span class="keyword">this</span>, item], <span class="keyword">this</span>.handleEdit).bind(_context) </span>
<span class="line">  &#125;,</span>
<span class="line">  <span class="string">''</span></span>
<span class="line">)</span>
</pre></td></tr></table></figure><p>这样 bind 之后的方法内的 this 是一个数组，要想获取到真正的 this, 在 handleEdit 中还需要做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEdit</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">  <span class="comment">// this: [this, item]</span></span>
<span class="line">  <span class="comment">// 感觉好尴尬~</span></span>
<span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>[<span class="number">0</span>]);</span>
<span class="line">  <span class="comment">// const [ _this, item ] = this;</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><blockquote><p>所以呢 在需要绑定 this 并且要添加额外参数的时候，就不要用 <strong>::</strong> 了。老老实实用 <strong>bind</strong> 就好了。</p></blockquote><h2 id="箭头函数声明在-class-里面"><a href="#箭头函数声明在-class-里面" class="headerlink" title="箭头函数声明在 class 里面"></a>箭头函数声明在 class 里面</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">  handleButtonClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span>
<span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;);</span>
<span class="line">  &#125;;</span>
<span class="line"></span>
<span class="line">  render() &#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleButtonClick&#125;</span>&gt;</span>;</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">// var Example = React.createClass(&#123;</span>
<span class="line">//</span>
<span class="line">//   handleButtonClick: function(e) &#123;</span>
<span class="line">//     this.setState(&#123; loading: true &#125;);</span>
<span class="line">//   &#125;,</span>
<span class="line">//   ...</span>
<span class="line">// &#125;);</span></span>
</pre></td></tr></table></figure><p>这样应该是最简单的方式了，因为是自动绑定 this 的（与注释中的代码效果是一样的）。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这篇文章主要是介绍这个东西 &lt;a href=&quot;https://github.com/tc39/proposal-bind-operator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proposal Bind Operator&lt;/a&gt; 或者 &lt;a 
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.ochukai.me/categories/javascript/"/>
    
    
      <category term="js" scheme="http://blog.ochukai.me/tags/js/"/>
    
      <category term="this" scheme="http://blog.ochukai.me/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>修改 WebStorm 里面丑陋的 Markdown 样式</title>
    <link href="http://blog.ochukai.me/correct-ugly-markdown-css-in-webstorm/"/>
    <id>http://blog.ochukai.me/correct-ugly-markdown-css-in-webstorm/</id>
    <published>2016-12-23T07:27:27.000Z</published>
    <updated>2016-12-23T07:37:41.376Z</updated>
    
    <content type="html"><![CDATA[<p>一直觉得在 webstrom 里面看 markdown 是一种折磨，尤其是有 table 的情况下，很不爽！！！</p><p>今天突然发现有一个设置项可以自定义 markdown 的样式，</p><p><img src="../images/webstorm-md-css-1.png" alt="设置"></p><p>就是右边方框里面的选项，取消 webstorm 默认的， 然后添加自己的 css，下面的css 是我找来的，还可以看：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
<span class="line">120</span>
<span class="line">121</span>
<span class="line">122</span>
<span class="line">123</span>
<span class="line">124</span>
<span class="line">125</span>
<span class="line">126</span>
<span class="line">127</span>
<span class="line">128</span>
<span class="line">129</span>
<span class="line">130</span>
<span class="line">131</span>
<span class="line">132</span>
<span class="line">133</span>
<span class="line">134</span>
<span class="line">135</span>
<span class="line">136</span>
<span class="line">137</span>
<span class="line">138</span>
<span class="line">139</span>
<span class="line">140</span>
<span class="line">141</span>
<span class="line">142</span>
<span class="line">143</span>
<span class="line">144</span>
<span class="line">145</span>
<span class="line">146</span>
<span class="line">147</span>
<span class="line">148</span>
<span class="line">149</span>
<span class="line">150</span>
<span class="line">151</span>
<span class="line">152</span>
<span class="line">153</span>
<span class="line">154</span>
<span class="line">155</span>
<span class="line">156</span>
<span class="line">157</span>
<span class="line">158</span>
<span class="line">159</span>
<span class="line">160</span>
<span class="line">161</span>
<span class="line">162</span>
<span class="line">163</span>
<span class="line">164</span>
<span class="line">165</span>
<span class="line">166</span>
<span class="line">167</span>
<span class="line">168</span>
<span class="line">169</span>
<span class="line">170</span>
<span class="line">171</span>
<span class="line">172</span>
<span class="line">173</span>
<span class="line">174</span>
<span class="line">175</span>
<span class="line">176</span>
<span class="line">177</span>
<span class="line">178</span>
<span class="line">179</span>
<span class="line">180</span>
<span class="line">181</span>
<span class="line">182</span>
<span class="line">183</span>
<span class="line">184</span>
<span class="line">185</span>
<span class="line">186</span>
<span class="line">187</span>
<span class="line">188</span>
<span class="line">189</span>
<span class="line">190</span>
<span class="line">191</span>
<span class="line">192</span>
<span class="line">193</span>
<span class="line">194</span>
<span class="line">195</span>
<span class="line">196</span>
<span class="line">197</span>
<span class="line">198</span>
<span class="line">199</span>
<span class="line">200</span>
<span class="line">201</span>
<span class="line">202</span>
<span class="line">203</span>
<span class="line">204</span>
<span class="line">205</span>
<span class="line">206</span>
<span class="line">207</span>
<span class="line">208</span>
<span class="line">209</span>
<span class="line">210</span>
<span class="line">211</span>
<span class="line">212</span>
<span class="line">213</span>
<span class="line">214</span>
<span class="line">215</span>
<span class="line">216</span>
<span class="line">217</span>
<span class="line">218</span>
<span class="line">219</span>
<span class="line">220</span>
<span class="line">221</span>
<span class="line">222</span>
<span class="line">223</span>
<span class="line">224</span>
<span class="line">225</span>
<span class="line">226</span>
<span class="line">227</span>
<span class="line">228</span>
<span class="line">229</span>
<span class="line">230</span>
<span class="line">231</span>
<span class="line">232</span>
<span class="line">233</span>
<span class="line">234</span>
<span class="line">235</span>
<span class="line">236</span>
<span class="line">237</span>
<span class="line">238</span>
<span class="line">239</span>
<span class="line">240</span>
<span class="line">241</span>
<span class="line">242</span>
<span class="line">243</span>
<span class="line">244</span>
<span class="line">245</span>
<span class="line">246</span>
<span class="line">247</span>
<span class="line">248</span>
<span class="line">249</span>
<span class="line">250</span>
<span class="line">251</span>
<span class="line">252</span>
<span class="line">253</span>
<span class="line">254</span>
<span class="line">255</span>
<span class="line">256</span>
<span class="line">257</span>
<span class="line">258</span>
<span class="line">259</span>
<span class="line">260</span>
<span class="line">261</span>
<span class="line">262</span>
<span class="line">263</span>
<span class="line">264</span>
<span class="line">265</span>
<span class="line">266</span>
<span class="line">267</span>
<span class="line">268</span>
<span class="line">269</span>
<span class="line">270</span>
<span class="line">271</span>
<span class="line">272</span>
<span class="line">273</span>
<span class="line">274</span>
<span class="line">275</span>
<span class="line">276</span>
<span class="line">277</span>
<span class="line">278</span>
<span class="line">279</span>
</pre></td><td class="code"><pre><span class="line">body&#123;</span>
<span class="line">    background-color: #fff;</span>
<span class="line">    margin: 0 auto;</span>
<span class="line">    font-family: Georgia, Palatino, serif;</span>
<span class="line">    color: #333333;</span>
<span class="line">    line-height: 120%;</span>
<span class="line">    max-width: 960px;</span>
<span class="line">    padding: 30px;</span>
<span class="line">    font-size: 12px;</span>
<span class="line">&#125;</span>
<span class="line">h1, h2, h3, h4 &#123;</span>
<span class="line">    color: #111111;</span>
<span class="line">    font-weight: 400;</span>
<span class="line">&#125;</span>
<span class="line">h1, h2, h3, h4, h5, p &#123;</span>
<span class="line">    margin-bottom: 18px;</span>
<span class="line">    padding: 0;</span>
<span class="line">&#125;</span>
<span class="line">h1 &#123;</span>
<span class="line">    font-size: 36px;</span>
<span class="line">&#125;</span>
<span class="line">h2 &#123;</span>
<span class="line">    font-size: 24px;</span>
<span class="line">    margin: 18px 0 6px;</span>
<span class="line">&#125;</span>
<span class="line">h3 &#123;</span>
<span class="line">    font-size: 20px;</span>
<span class="line">&#125;</span>
<span class="line">h4 &#123;</span>
<span class="line">    font-size: 16px;</span>
<span class="line">&#125;</span>
<span class="line">h5 &#123;</span>
<span class="line">    font-size: 14px;</span>
<span class="line">&#125;</span>
<span class="line">h6 &#123;</span>
<span class="line">    font-size: 12px;</span>
<span class="line">&#125;</span>
<span class="line">a &#123;</span>
<span class="line">    color: #0099ff;</span>
<span class="line">    margin: 0;</span>
<span class="line">    padding: 0;</span>
<span class="line">    vertical-align: baseline;</span>
<span class="line">&#125;</span>
<span class="line">a:hover &#123;</span>
<span class="line">    text-decoration: none;</span>
<span class="line">    color: #ff6600;</span>
<span class="line">&#125;</span>
<span class="line">a:visited &#123;</span>
<span class="line">    color: purple;</span>
<span class="line">&#125;</span>
<span class="line">ul, ol &#123;</span>
<span class="line">    padding: 0;</span>
<span class="line">    margin-left: 18px;</span>
<span class="line">    margin-bottom: 18px;</span>
<span class="line">&#125;</span>
<span class="line">li &#123;</span>
<span class="line">    line-height: 18px;</span>
<span class="line">&#125;</span>
<span class="line">li ul, li ul &#123;</span>
<span class="line">    margin-left: 18px;</span>
<span class="line">&#125;</span>
<span class="line">p, ul, ol &#123;</span>
<span class="line">    font-size: 12px;</span>
<span class="line">    line-height: 1.5;</span>
<span class="line">    max-width: 540px;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">blockquote &#123;</span>
<span class="line">   padding: 12px 12px 12px 15px;</span>
<span class="line">   margin-bottom: 16px;</span>
<span class="line">   font-family:georgia,serif;</span>
<span class="line">   font-style: italic;</span>
<span class="line">   border-left: 2px solid #d9d9d9;</span>
<span class="line">&#125;</span>
<span class="line">blockquote p &#123;</span>
<span class="line">   font-size: 12px;</span>
<span class="line">   font-weight: 300;</span>
<span class="line">   line-height: 1.2;</span>
<span class="line">   margin-bottom: 0;</span>
<span class="line">   font-style: italic;</span>
<span class="line">&#125;</span>
<span class="line">code, pre &#123;</span>
<span class="line">   font-family: Monaco, Andale Mono, Courier New, monospace;</span>
<span class="line">&#125;</span>
<span class="line">code &#123;</span>
<span class="line">   background-color: #fee9cc;</span>
<span class="line">   color: #000000;</span>
<span class="line">   padding: 1px 3px;</span>
<span class="line">   font-size: 12px;</span>
<span class="line">   border-radius: 3px;</span>
<span class="line">&#125;</span>
<span class="line">pre &#123;</span>
<span class="line">   display: block;</span>
<span class="line">   padding: 14px;</span>
<span class="line">   margin: 0 0 18px;</span>
<span class="line">   line-height: 16px;</span>
<span class="line">   font-size: 11px;</span>
<span class="line">   border: 1px solid #d9d9d9;</span>
<span class="line">   white-space: pre-wrap;</span>
<span class="line">   word-wrap: break-word;</span>
<span class="line">&#125;</span>
<span class="line">pre code &#123;</span>
<span class="line">   background-color: #ffffff;</span>
<span class="line">   color:#666666;</span>
<span class="line">   font-size: 11px;</span>
<span class="line">   padding: 0;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">aside &#123;</span>
<span class="line">    display: block;</span>
<span class="line">    float: right;</span>
<span class="line">    width: 390px;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">hr &#123;</span>
<span class="line">    width: 540px;</span>
<span class="line">    text-align: left;</span>
<span class="line">    margin: 0 auto 0 0;</span>
<span class="line">    color: #999999;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">/* Code below this line is copyright Twitter Inc. */</span>
<span class="line"></span>
<span class="line">button,</span>
<span class="line">input,</span>
<span class="line">select,</span>
<span class="line">textarea &#123;</span>
<span class="line">  font-size: 100%;</span>
<span class="line">  margin: 0;</span>
<span class="line">  vertical-align: baseline;</span>
<span class="line">  *vertical-align: middle;</span>
<span class="line">&#125;</span>
<span class="line">button, input &#123;</span>
<span class="line">  line-height: normal;</span>
<span class="line">  *overflow: visible;</span>
<span class="line">&#125;</span>
<span class="line">button::-moz-focus-inner, input::-moz-focus-inner &#123;</span>
<span class="line">  border: 0;</span>
<span class="line">  padding: 0;</span>
<span class="line">&#125;</span>
<span class="line">button,</span>
<span class="line">input[type="button"],</span>
<span class="line">input[type="reset"],</span>
<span class="line">input[type="submit"] &#123;</span>
<span class="line">  cursor: pointer;</span>
<span class="line">  -webkit-appearance: button;</span>
<span class="line">&#125;</span>
<span class="line">input[type=checkbox], input[type=radio] &#123;</span>
<span class="line">  cursor: pointer;</span>
<span class="line">&#125;</span>
<span class="line">/* override default chrome &amp; firefox settings */</span>
<span class="line">input:not([type="image"]), textarea &#123;</span>
<span class="line">  -webkit-box-sizing: content-box;</span>
<span class="line">  -moz-box-sizing: content-box;</span>
<span class="line">  box-sizing: content-box;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">input[type="search"] &#123;</span>
<span class="line">  -webkit-appearance: textfield;</span>
<span class="line">  -webkit-box-sizing: content-box;</span>
<span class="line">  -moz-box-sizing: content-box;</span>
<span class="line">  box-sizing: content-box;</span>
<span class="line">&#125;</span>
<span class="line">input[type="search"]::-webkit-search-decoration &#123;</span>
<span class="line">  -webkit-appearance: none;</span>
<span class="line">&#125;</span>
<span class="line">label,</span>
<span class="line">input,</span>
<span class="line">select,</span>
<span class="line">textarea &#123;</span>
<span class="line">  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;</span>
<span class="line">  font-size: 13px;</span>
<span class="line">  font-weight: normal;</span>
<span class="line">  line-height: normal;</span>
<span class="line">  margin-bottom: 18px;</span>
<span class="line">&#125;</span>
<span class="line">input[type=checkbox], input[type=radio] &#123;</span>
<span class="line">  cursor: pointer;</span>
<span class="line">  margin-bottom: 0;</span>
<span class="line">&#125;</span>
<span class="line">input[type=text],</span>
<span class="line">input[type=password],</span>
<span class="line">textarea,</span>
<span class="line">select &#123;</span>
<span class="line">  display: inline-block;</span>
<span class="line">  width: 210px;</span>
<span class="line">  padding: 4px;</span>
<span class="line">  font-size: 13px;</span>
<span class="line">  font-weight: normal;</span>
<span class="line">  line-height: 18px;</span>
<span class="line">  height: 18px;</span>
<span class="line">  color: #808080;</span>
<span class="line">  border: 1px solid #ccc;</span>
<span class="line">  -webkit-border-radius: 3px;</span>
<span class="line">  -moz-border-radius: 3px;</span>
<span class="line">  border-radius: 3px;</span>
<span class="line">&#125;</span>
<span class="line">select, input[type=file] &#123;</span>
<span class="line">  height: 27px;</span>
<span class="line">  line-height: 27px;</span>
<span class="line">&#125;</span>
<span class="line">textarea &#123;</span>
<span class="line">  height: auto;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">/* grey out placeholders */</span>
<span class="line">:-moz-placeholder &#123;</span>
<span class="line">  color: #bfbfbf;</span>
<span class="line">&#125;</span>
<span class="line">::-webkit-input-placeholder &#123;</span>
<span class="line">  color: #bfbfbf;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">input[type=text],</span>
<span class="line">input[type=password],</span>
<span class="line">select,</span>
<span class="line">textarea &#123;</span>
<span class="line">  -webkit-transition: border linear 0.2s, box-shadow linear 0.2s;</span>
<span class="line">  -moz-transition: border linear 0.2s, box-shadow linear 0.2s;</span>
<span class="line">  transition: border linear 0.2s, box-shadow linear 0.2s;</span>
<span class="line">  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);</span>
<span class="line">  -moz-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);</span>
<span class="line">  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);</span>
<span class="line">&#125;</span>
<span class="line">input[type=text]:focus, input[type=password]:focus, textarea:focus &#123;</span>
<span class="line">  outline: none;</span>
<span class="line">  border-color: rgba(82, 168, 236, 0.8);</span>
<span class="line">  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);</span>
<span class="line">  -moz-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);</span>
<span class="line">  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, 236, 0.6);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">/* buttons */</span>
<span class="line">button &#123;</span>
<span class="line">  display: inline-block;</span>
<span class="line">  padding: 4px 14px;</span>
<span class="line">  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;</span>
<span class="line">  font-size: 13px;</span>
<span class="line">  line-height: 18px;</span>
<span class="line">  -webkit-border-radius: 4px;</span>
<span class="line">  -moz-border-radius: 4px;</span>
<span class="line">  border-radius: 4px;</span>
<span class="line">  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span>
<span class="line">  -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span>
<span class="line">  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span>
<span class="line">  background-color: #0064cd;</span>
<span class="line">  background-repeat: repeat-x;</span>
<span class="line">  background-image: -khtml-gradient(linear, left top, left bottom, from(#049cdb), to(#0064cd));</span>
<span class="line">  background-image: -moz-linear-gradient(top, #049cdb, #0064cd);</span>
<span class="line">  background-image: -ms-linear-gradient(top, #049cdb, #0064cd);</span>
<span class="line">  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #049cdb), color-stop(100%, #0064cd));</span>
<span class="line">  background-image: -webkit-linear-gradient(top, #049cdb, #0064cd);</span>
<span class="line">  background-image: -o-linear-gradient(top, #049cdb, #0064cd);</span>
<span class="line">  background-image: linear-gradient(top, #049cdb, #0064cd);</span>
<span class="line">  color: #fff;</span>
<span class="line">  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);</span>
<span class="line">  border: 1px solid #004b9a;</span>
<span class="line">  border-bottom-color: #003f81;</span>
<span class="line">  -webkit-transition: 0.1s linear all;</span>
<span class="line">  -moz-transition: 0.1s linear all;</span>
<span class="line">  transition: 0.1s linear all;</span>
<span class="line">  border-color: #0064cd #0064cd #003f81;</span>
<span class="line">  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);</span>
<span class="line">&#125;</span>
<span class="line">button:hover &#123;</span>
<span class="line">  color: #fff;</span>
<span class="line">  background-position: 0 -15px;</span>
<span class="line">  text-decoration: none;</span>
<span class="line">&#125;</span>
<span class="line">button:active &#123;</span>
<span class="line">  -webkit-box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);</span>
<span class="line">  -moz-box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);</span>
<span class="line">  box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);</span>
<span class="line">&#125;</span>
<span class="line">button::-moz-focus-inner &#123;</span>
<span class="line">  padding: 0;</span>
<span class="line">  border: 0;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直觉得在 webstrom 里面看 markdown 是一种折磨，尤其是有 table 的情况下，很不爽！！！&lt;/p&gt;&lt;p&gt;今天突然发现有一个设置项可以自定义 markdown 的样式，&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/webstorm-md-css-
    
    </summary>
    
      <category term="WebStorm" scheme="http://blog.ochukai.me/categories/webstorm/"/>
    
    
      <category term="markdown" scheme="http://blog.ochukai.me/tags/markdown/"/>
    
      <category term="webstrom" scheme="http://blog.ochukai.me/tags/webstrom/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 Decorator</title>
    <link href="http://blog.ochukai.me/decorator-in-js/"/>
    <id>http://blog.ochukai.me/decorator-in-js/</id>
    <published>2016-12-21T01:33:38.000Z</published>
    <updated>2017-01-24T06:24:27.531Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在看一个拖拽库的时候，遇到了这么一段代码，感觉很有意思：<br></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line">@sortable</span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHOCItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">  render() &#123;</span>
<span class="line">    <span class="keyword">return</span> (</span>
<span class="line">      &lt;div &#123; ...this.props &#125;&gt;</span>
<span class="line">        &#123; this.props.children &#125;</span>
<span class="line">      &lt;/div&gt;</span>
<span class="line">    );</span>
<span class="line">  &#125;</span>
<span class="line">  </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p></p><p>查了一下之后发现这是 es7 的新语法，叫 <a href="https://github.com/wycats/javascript-decorators" target="_blank" rel="external">Decorator</a>。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>如果要定义一个 Decorator 的话，不难，其实每一个 decorator 就是一个 function，有三个参数，像这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> log = <span class="function">(<span class="params">target, name, descriptor</span>) =&gt;</span> &#123;</span>
<span class="line">  <span class="built_in">console</span>.log(target, name, descriptor);</span>
<span class="line"></span>
<span class="line">  <span class="keyword">const</span> method = descriptor.value;</span>
<span class="line">  descriptor.value = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span>
<span class="line">    logger.info(<span class="string">`before function execute: <span class="subst">$&#123;name&#125;</span>(<span class="subst">$&#123;args&#125;</span>) = ?`</span>);</span>
<span class="line">    <span class="keyword">return</span> method.apply(target, args);</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>三个参数还是比较好理解的</p><p>然后要用这个 decorator 的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">  @log</span>
<span class="line">  add(a, b) &#123;</span>
<span class="line">    <span class="keyword">return</span> a + b;</span>
<span class="line">  &#125;</span>
<span class="line">   </span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="keyword">let</span> my = <span class="keyword">new</span> Example();</span>
<span class="line">my.add(<span class="number">2</span>, <span class="number">3</span>);</span>
</pre></td></tr></table></figure><p>这好像跟 Java 的 Annotation 形式差不多。 但是功能却跟 Python 的 Decorator 一样。</p><p>下面是运行时的输出</p><p><img src="../images/decorator-1.png" alt="正常"></p><p>所以呢，decorator 的三个参数分别是</p><ol><li>target 目标方法所在的类</li><li>name 方法名</li><li>descriptor 该方法的一些描述， 其中 <code>value</code> 就是方法本身，这一点在上一个例子中已经看到了。</li></ol><h2 id="用在-class-上面"><a href="#用在-class-上面" class="headerlink" title="用在 class 上面"></a>用在 class 上面</h2><p>因为我最开始见到 decorator 是看到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">@sortable</span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoHOCItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;<span class="comment">/*...*/</span>&#125;</span>
</pre></td></tr></table></figure><p>这时， decorator 是用在 class 上面的，当 decorator 用在 class 上面的时候只有第一个参数有值，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">@log</span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span>
<span class="line">  add(a, b) &#123; <span class="keyword">return</span> a + b; &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>只会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"># 也就是 name, descriptor 都是 undefined</span>
<span class="line">2016-12-21 10:28:26.617 function Example() &#123;</span>
<span class="line">        _classCallCheck(this, Example);</span>
<span class="line">    &#125; undefined undefined</span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天在看一个拖拽库的时候，遇到了这么一段代码，感觉很有意思：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span 
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.ochukai.me/categories/javascript/"/>
    
    
      <category term="decorator" scheme="http://blog.ochukai.me/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>使用命令行更新 Win10 的密钥</title>
    <link href="http://blog.ochukai.me/use-terminal-to-update-win10-key/"/>
    <id>http://blog.ochukai.me/use-terminal-to-update-win10-key/</id>
    <published>2016-12-16T05:02:13.000Z</published>
    <updated>2016-12-16T06:58:09.484Z</updated>
    
    <content type="html"><![CDATA[<p>今天在公司装了 win10，但是点击更换密钥的时候老是卡死，然后就搜了一下发现可以用命令行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"># 设置密钥</span>
<span class="line">slmgr /ipk DDCGG-9N3QJ-2B23T-C***V-XD72F</span>
<span class="line"></span>
<span class="line"># 检查是否已激活</span>
<span class="line">slmgr.vbs -ato</span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在公司装了 win10，但是点击更换密钥的时候老是卡死，然后就搜了一下发现可以用命令行设置&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="Window" scheme="http://blog.ochukai.me/categories/window/"/>
    
    
      <category term="win10" scheme="http://blog.ochukai.me/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>webpack-dev-server 在 webstorm 中失效的问题</title>
    <link href="http://blog.ochukai.me/webpack-dev-server-vs-webstorm/"/>
    <id>http://blog.ochukai.me/webpack-dev-server-vs-webstorm/</id>
    <published>2016-12-08T11:32:09.000Z</published>
    <updated>2017-01-24T06:24:24.860Z</updated>
    
    <content type="html"><![CDATA[<p>最近换了公司 ！！！</p><p>重新用上了高大上的 win7 系统，还是熟悉的画面，然后又装上了 WebStorm，准备开始我的性福人生。</p><p>但天有不测风云，在使用一个基于 webpack 构建的项目中，每次修改代码之后，webpack-dev-server 总是不能够自动重新编译，很烦！！！</p><p>这可急坏了宝宝！！！</p><p>但是我非常冷静的分析了一下原因，可能是因为webstorm有自动保存的机制， 是不是很机智，一下子就命中了要害（但其实这中间的过程可复杂了）</p><p><img src="../images/webstorm-save-file.png" alt="正常"></p><p>如上图， 在 <code>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings</code> 里面，取消勾选上面红框的两项。</p><p>每次修改之后，<code>ctrl + s</code> 就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近换了公司 ！！！&lt;/p&gt;&lt;p&gt;重新用上了高大上的 win7 系统，还是熟悉的画面，然后又装上了 WebStorm，准备开始我的性福人生。&lt;/p&gt;&lt;p&gt;但天有不测风云，在使用一个基于 webpack 构建的项目中，每次修改代码之后，webpack-dev-server 总
    
    </summary>
    
      <category term="WebStorm" scheme="http://blog.ochukai.me/categories/webstorm/"/>
    
    
      <category term="webpack-dev-server" scheme="http://blog.ochukai.me/tags/webpack-dev-server/"/>
    
      <category term="webpack" scheme="http://blog.ochukai.me/tags/webpack/"/>
    
      <category term="webstorm" scheme="http://blog.ochukai.me/tags/webstorm/"/>
    
  </entry>
  
  <entry>
    <title>在 window 里面杀死某个进程</title>
    <link href="http://blog.ochukai.me/kill-process-in-window/"/>
    <id>http://blog.ochukai.me/kill-process-in-window/</id>
    <published>2016-11-22T01:49:57.000Z</published>
    <updated>2016-12-08T11:50:20.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看被谁占用"><a href="#查看被谁占用" class="headerlink" title="查看被谁占用"></a>查看被谁占用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 8989</span>
<span class="line">  </span>
<span class="line"># C:\Users\Administrator&gt;netstat -ano | findstr 8989</span>
<span class="line">#   TCP    0.0.0.0:8989           0.0.0.0:0              LISTENING       6360</span>
<span class="line">#   TCP    [::]:8989              [::]:0                 LISTENING       6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53638            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53640            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53641            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53645            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53646            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53652            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53653            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:8989             [::1]:53654            ESTABLISHED     6360</span>
<span class="line">#   TCP    [::1]:53638            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53640            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53641            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53645            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53646            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53652            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53653            [::1]:8989             ESTABLISHED     5440</span>
<span class="line">#   TCP    [::1]:53654            [::1]:8989             ESTABLISHED     5440</span>
</pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">tasklist | findstr 8989//查看pid为3036的是什么程序在用</span>
</pre></td></tr></table></figure><h2 id="杀死某进程"><a href="#杀死某进程" class="headerlink" title="杀死某进程"></a>杀死某进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"># /T 包括子进程</span>
<span class="line"># /F 强制</span>
<span class="line">  </span>
<span class="line">taskkill /T /F /PID 8989</span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看被谁占用&quot;&gt;&lt;a href=&quot;#查看被谁占用&quot; class=&quot;headerlink&quot; title=&quot;查看被谁占用&quot;&gt;&lt;/a&gt;查看被谁占用&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="Window" scheme="http://blog.ochukai.me/categories/window/"/>
    
    
      <category term="端口占用" scheme="http://blog.ochukai.me/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中的 splice 方法</title>
    <link href="http://blog.ochukai.me/splice-in-javascript/"/>
    <id>http://blog.ochukai.me/splice-in-javascript/</id>
    <published>2016-11-22T01:40:09.766Z</published>
    <updated>2017-01-04T01:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。(会改变原始数组)</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">arrayObject.splice(index, how-many, item1, item2, ...itemX)</span>
</pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td>how-many</td><td>必需。要删除的项目数量。<code>如果设置为 0，则不会删除项目</code>。</td></tr><tr><td>item1, …, itemX</td><td>可选。向数组添加的新项目。</td></tr></tbody></table><h2 id="用法举例"><a href="#用法举例" class="headerlink" title="用法举例"></a>用法举例</h2><p>在数组最开始插入一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];   <span class="comment">// arrr: [1, 2, 3, 4]</span></span>
<span class="line">arrr.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">// arrr: [0, 1, 2, 3, 4]</span></span>
</pre></td></tr></table></figure><p>删除第三个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// arrr: [0, 1, 2, 3, 4]</span></span>
<span class="line">arrr.splice(<span class="number">3</span>, <span class="number">1</span>) <span class="comment">// return [3] 删除的元素会做为返回返回值</span></span>
<span class="line">                  <span class="comment">// arrr: [0, 1, 2, 4]</span></span>
</pre></td></tr></table></figure><p>删除后面两个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// arrr: [0, 1, 2, 4]</span></span>
<span class="line">arrr.splice(<span class="number">2</span>, <span class="number">2</span>) <span class="comment">// return [2， 4]</span></span>
<span class="line">                  <span class="comment">// arrr: [0, 1]</span></span>
</pre></td></tr></table></figure><p>替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 把第二个元素变成 5</span></span>
<span class="line"><span class="comment">// arrr: [0, 1, 2, 4]</span></span>
<span class="line">arrr.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>); <span class="comment">// [0, 1, 5, 4]</span></span>
</pre></td></tr></table></figure><p>交换位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapArrayItemPosition</span>(<span class="params">arr, one, another</span>) </span>&#123;</span>
<span class="line">  <span class="keyword">var</span> dummy = arr.splice(one, <span class="number">1</span>, arr[another])[<span class="number">0</span>];</span>
<span class="line">  arr.splice(another, <span class="number">1</span>, dummy);</span>
<span class="line">  <span class="keyword">return</span> arr;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">// arrr = [0, 1, 5, 4]</span></span>
<span class="line">swapArrayItemPosition(arrr, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [0, 5, 1, 4]</span></span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。(会改变原始数组)&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ochukai.me/categories/javascript/"/>
    
      <category term="[object Object]" scheme="http://blog.ochukai.me/categories/javascript/object-object/"/>
    
    
      <category term="js" scheme="http://blog.ochukai.me/tags/js/"/>
    
      <category term="splice" scheme="http://blog.ochukai.me/tags/splice/"/>
    
      <category term="array" scheme="http://blog.ochukai.me/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>东野圭吾(Higashino Keigo)的全集</title>
    <link href="http://blog.ochukai.me/higashino-keigo/"/>
    <id>http://blog.ochukai.me/higashino-keigo/</id>
    <published>2016-07-26T08:38:44.000Z</published>
    <updated>2017-01-24T06:11:26.390Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了几篇 东野圭吾 的小说, 都还蛮有意思的。 像 《嫌疑人X的献身》, 《流星之绊》,《毕业》啊 等等,好多都记不住名字了。</p><p>于是决定把他的全集整理一下,留着有空都看一遍~</p><hr><h2 id="加贺恭一郎系列"><a href="#加贺恭一郎系列" class="headerlink" title="加贺恭一郎系列"></a>加贺恭一郎系列</h2><ul><li>《毕业——雪月花杀人游戏》（《毕业前杀人游戏》）&lt;卒业―雪月花杀人ゲーム&gt;</li><li>《沉睡的森林》&lt;眠りの森&gt;</li><li>《谁杀了她》&lt;どちらかが彼女を杀した&gt;</li><li>《恶意》</li><li>《我杀了他》&lt;私が彼を杀した&gt;</li><li>《又一个谎言》 &lt;嘘をもうひとつだけ&gt;　刊载于推理杂志220-224期</li><li>《红手指》 &lt;赤い指&gt;（2011年冬季档日剧SP，阿部宽、黑木明纱主演）</li><li>《新参者》（2010年拍摄日剧，阿部宽、黑木明纱主演）</li><li>《麒麟之翼》&lt;麒麟の翼&gt;</li></ul><h2 id="神探伽利略-按列表顺序"><a href="#神探伽利略-按列表顺序" class="headerlink" title="神探伽利略 (按列表顺序)"></a>神探伽利略 (按列表顺序)</h2><ul><li>《侦探伽利略》&lt;探侦ガリレオ&gt;</li><li>《预知梦》&lt;予知梦&gt;</li><li>《嫌疑犯X的献身》&lt;容疑者Xの献身&gt;</li><li>《伽利略的苦恼》&lt;ガリレオの苦悩&gt;</li><li>《圣女的救济》&lt;圣女の救済&gt;</li><li>《盛夏的方程式》&lt;真夏の方程式&gt;</li><li>《虚像的小丑》&lt;虚像の道化师&gt;</li><li>《禁断的魔术》&lt;禁断の魔术&gt;</li></ul><h2 id="毒舌三部曲"><a href="#毒舌三部曲" class="headerlink" title="毒舌三部曲"></a>毒舌三部曲</h2><ul><li>怪笑小说</li><li>毒笑小说</li><li>黑笑小说</li></ul><h2 id="获奖作品"><a href="#获奖作品" class="headerlink" title="获奖作品"></a>获奖作品</h2><ul><li>1983年《人偶之家》第29届江戸川乱歩赏二次予选通过</li><li>1984年《魔球》第30届江戸川乱歩赏最终候补</li><li>1985年《放学后》夺得第31届江户川乱步奖，开始专职写作。</li><li>1988年《学生街杀人事件》第9届吉川英治文学新人赏候补・第41回日本推理作家协会赏（长编）候补</li><li>1990年《鸟人计划》第11届吉川英治文学新人赏候补</li><li>1991年《天使之耳》第44届日本推理作家协会赏（短编集）候补</li><li>1992年《镜之中》第45届日本推理作家协会赏（短编集）候补</li><li>1993年《雪地杀机》第46届日本推理作家协会赏（长编部）候补</li><li>1993年《交通警察之夜》第46届日本推理作家协会赏（短编集）候补</li><li>1996年《天空之蜂》第17届吉川英治文学新人赏候补</li><li>1997年《名侦探的守则》第18届吉川英治文学新人赏候补</li><li>1999年《秘密》第120届直木奖三十五赏候补，第20回吉川英治文学新人赏候补，第52回日本推理作家协会奖</li><li>2000年《白夜行》第122届直木奖三十五赏候补</li><li>2001年《单恋》第125届直木奖三十五赏候补</li><li>2003年《信》第129届直木奖三十五赏候补</li><li>2004年《幻夜》第131届直木三奖十五赏候补</li><li>2006年《嫌疑人X的献身》将第134届直木奖、第6届本格推理小说 大奖及当年度日本三大推理小说排行榜（“这本推理小说了不起！”、“周刊文春推理小说BEST10”、“本格推理小说 BEST10”）第1名一并收入囊中。</li><li>2008年《流星之绊》荣获第43届新风奖。</li><li>2009年《新参者》获“这本推理小说了不起！”、“周刊文春推理小说BEST10”年度第1名。</li><li>2012年《嫌疑犯X的献身》美国图书馆协会最推荐图书（推理部门）、爱伦·坡奖最优秀长编奖候补、巴瑞奖新人赏奖候补</li><li>2012年《浪矢杂货店的奇迹》第7届中央公论文艺奖</li></ul><hr><p>上面的作品今年都看完应该就不错了~ 毕竟做人都是要有目标的嘛,那么更远大的目标呢,就是下面的全部列表了。</p><hr><h2 id="作品列表"><a href="#作品列表" class="headerlink" title="作品列表"></a>作品列表</h2><h3 id="1985年"><a href="#1985年" class="headerlink" title="1985年"></a>1985年</h3><ol><li>《放学后》&lt;放课後&gt; （第31 届江户川乱步奖）</li></ol><h3 id="1986年"><a href="#1986年" class="headerlink" title="1986年"></a>1986年</h3><ol><li>《毕业——雪月花杀人游戏》（加贺恭一郎系列）（《毕业前杀人游戏》）&lt;卒业―雪月花杀人ゲーム&gt;</li><li>《白马山庄杀人事件》&lt;白马山荘杀人事件&gt;</li></ol><h3 id="1987年"><a href="#1987年" class="headerlink" title="1987年"></a>1987年</h3><ol><li>《学生街里的杀人事件》&lt;学生街の杀人&gt;（入围第41届日本推理作家协会赏）</li><li>《十一字杀人》（11文字の杀人）</li></ol><h3 id="1988年"><a href="#1988年" class="headerlink" title="1988年"></a>1988年</h3><ol><li>《魔球》</li><li>《以眨眼干杯》&lt;ウインクで乾杯&gt; 原名&lt;香子の梦―コンパニオン杀人事件&gt; / 《香子之梦——夥伴杀人事件》</li><li>《浪花少年侦探团》&lt;浪花少年探侦団&gt;</li></ol><h3 id="1989年"><a href="#1989年" class="headerlink" title="1989年"></a>1989年</h3><ol><li>《十字豪宅的小丑》&lt;十字屋敷のピエロ&gt;</li><li>《沉睡的森林》&lt;眠りの森&gt;（加贺恭一郎系列）（特别说明：并不是木村拓哉主演的那部电视剧）</li><li>《鸟人计划》&lt;鸟人计画&gt;（入围第11届吉川英治文学新人奖）</li><li>《杀人现场在云端》&lt;杀人现场は云の上&gt;</li><li>《布鲁特斯的心脏——完全犯罪杀人接力》&lt;ブルータスの心臓―完全犯罪杀人リレー&gt;</li></ol><h3 id="1990年"><a href="#1990年" class="headerlink" title="1990年"></a>1990年</h3><ol><li>《侦探俱乐部》&lt;探侦倶楽部&gt; 原名 &lt;依頼人の娘&gt;《负责人的女儿》<br>本短篇集包括：<ol><li>伪装之夜 / 伪装の夜</li><li>疯狂的电击 / 罠の中</li><li>少女委托人 / 依頼人の娘</li><li>伊豆旅馆的神秘案 / 探侦の使い方</li><li>玫瑰与匕首 / 蔷薇とナイフ</li></ol></li><li>《宿命》（2004年拍摄日剧SP，柏原崇、藤木直人主演）</li><li>《没有凶手的杀人夜》&lt;犯人のいない杀人の夜&gt;（曾刊载于推理杂志）<ol><li>小小的恶作剧故事 / 小さな故意の物语（2012年日剧《东野圭吾推理系列》第八集，三浦春马主演）</li><li>黑暗中的两个人 / 闇の中の二人</li><li>舞女 / 踊り子</li><li>无尽之夜 / エンドレス·ナイト（2012年日剧《东野圭吾推理系列》第三集，松下奈绪主演）</li><li>白色凶器 / 白い凶器（2012年日剧《东野圭吾推理系列》第七集，户田惠梨香主演）</li><li>别了，教练 / さよならコーチ（2012年日剧《东野圭吾推理系列》第一集，唐泽寿明主演）</li><li>没有凶手的杀人夜 / 犯人のいない杀人の夜（2012年日剧《东野圭吾推理系列》第二集，坂口宪二主演）</li></ol></li><li>《面具山庄杀人事件》&lt;仮面山荘杀人事件&gt;</li></ol><h3 id="1991年"><a href="#1991年" class="headerlink" title="1991年"></a>1991年</h3><ol><li>《变身》&lt;变身&gt;（2005年拍摄电影，玉木宏、苍井优主演）</li><li>《回廊亭杀人事件》&lt;回廊亭杀人事件&gt;（2012年06月24日播出日剧SP，主演：常盘贵子）</li><li>《天使之耳》&lt;交通警察の夜&gt;<ol><li>天使之耳/ 天使の耳</li><li>隔离带/ 分离帯</li><li>危险的新叶/ 危険な若叶</li><li>请通过/ 通りゃんせ</li><li>请勿弃物/ 舍てないで</li><li>镜之中/ 镜の中で</li></ol></li></ol><h3 id="1992年"><a href="#1992年" class="headerlink" title="1992年"></a>1992年</h3><ol><li>《雪地杀机》&lt;ある闭ざされた雪の山荘で&gt;</li><li>《美丽的凶器》&lt;美しき凶器&gt;</li></ol><h3 id="1993年"><a href="#1993年" class="headerlink" title="1993年"></a>1993年</h3><ol><li>《同班同学》&lt;同级生&gt;</li><li>《分身》（2012年2月12日播出日剧，主演：长泽雅美）</li><li>《和阿忍老师说再见——浪花少年侦探团·独立篇》&lt;しのぶセンセにサヨナラ―浪花少年探侦団·独立编&gt;</li></ol><h3 id="1994年"><a href="#1994年" class="headerlink" title="1994年"></a>1994年</h3><ol><li>《怪人们》 / 怪しい人びと<ol><li>沉睡的女人 / 寝ていた女</li><li>让我再听一次你的判罚 / もう一度コールしてくれ</li><li>至死方休 / 死んだら働けない</li><li>蜜月之旅 / 甘いはずなのに</li><li>新婚照之谜 / 结婚报告（2012年日剧《东野圭吾推理系列》第九集，广末凉子主演）</li><li>灯塔之上 / 灯台にて</li><li>哥斯达黎加的冷雨 / コスタリカの雨は冷たい</li></ol></li><li>《我以前死去的家》&lt;むかし仆が死んだ家&gt;</li><li>《操纵彩虹的少年》&lt;虹を操る少年&gt;</li></ol><h3 id="1995年"><a href="#1995年" class="headerlink" title="1995年"></a>1995年</h3><ol><li>《平行世界·爱情故事》&lt;パラレルワールド·ラブストーリー&gt;</li><li>《那个时候我们是傻瓜》（散文集）&lt;あの顷ぼくらはアホでした&gt;</li><li>《怪笑小说》<ol><li>郁积电车 / 郁积电车</li><li>追星阿婆 / おっかけバアさん</li><li>一彻老爸 / 一彻おやじ</li><li>逆转同学会 / 逆転同窓会</li><li>超狸理论 / 超たぬき理论</li><li>无人岛大相扑转播 / 无人岛大相扑中継</li><li>尸台社区 / しかばね台分譲住宅</li><li>献给某位老爷爷的线香 / あるジーサンに线香を</li><li>动物家庭 / 动物家族</li></ol></li><li>《天空之蜂》&lt;天空の蜂&gt;（入围第17届吉川英治文学新人奖）</li></ol><h3 id="1996年"><a href="#1996年" class="headerlink" title="1996年"></a>1996年</h3><ol><li>《名侦探的守则》&lt;名探侦の掟&gt;（2009春季日剧，松田翔太主演）</li><li>《谁杀了她》（加贺恭一郎系列）&lt;どちらかが彼女を杀した&gt;</li><li>《毒笑小说》<ol><li>绑架天国 / 诱拐天国</li><li>Angel / エンジェル</li><li>手工贵妇 / 手作りマダム</li><li>程序警察 / マニュアル警察（世界奇妙物语 2000秋季sp，玉置浩二主演，又名《准则警察》）</li><li>爷爷当家 / ホームアローンじいさん</li><li>新郎人偶 / 花婿人形</li><li>女作家 / 女流作家</li><li>杀意使用说明书 / 杀意取扱说明书（世界奇妙物语 2010秋季sp，玉木宏、冢本高史主演）</li><li>补偿 / つぐない</li><li>光荣的证言 / 栄光の证言</li><li>本格推理周边鉴定秀 / 本格推理関连グッズ鉴定ショー</li><li>绑架电话网 / 诱拐电话网</li></ol></li><li>《恶意》（加贺恭一郎系列）</li><li>《名侦探的诅咒》&lt;名探侦の呪缚&gt;</li></ol><h3 id="1998年"><a href="#1998年" class="headerlink" title="1998年"></a>1998年</h3><ol><li>《侦探伽利略》（神探伽利略系列第1部）&lt;探侦ガリレオ&gt;</li><li>《秘密》（第52届日本推理作家协会奖、第120 届直木奖入围）</li></ol><h3 id="1999年"><a href="#1999年" class="headerlink" title="1999年"></a>1999年</h3><ol><li>《我杀了他》（加贺恭一郎系列）&lt;私が彼を杀した&gt;</li><li>《白夜行》（第122 届直木奖入围）</li></ol><h3 id="2000年"><a href="#2000年" class="headerlink" title="2000年"></a>2000年</h3><ol><li>《又一个谎言》 （加贺恭一郎系列） &lt;嘘をもうひとつだけ&gt;　刊载于推理杂志220-224期<ol><li>又一个谎言 / 嘘をもうひとつだけ</li><li>寒冷的灼热 / 冷たい灼热</li><li>第二个希望 / 第二の希望</li><li>疯狂计算 / 狂った计算</li><li>朋友的忠告 / 友の助言</li></ol></li><li>《预知梦》（神探伽利略系列第2部）&lt;予知梦&gt;（2007年拍摄日剧《神探伽利略》6-10集，福山雅治、柴崎幸主演）</li></ol><h3 id="2001年"><a href="#2001年" class="headerlink" title="2001年"></a>2001年</h3><ol><li>《单恋》&lt;片想い&gt; （第125 届直木奖入围）</li><li>《超·杀人事件》&lt;超·杀人事件　推理作家の苦悩&gt;（「2003年世界奇妙物语春季篇」拍摄其中一个单元故事&lt;超税金对策杀人事件&gt;，西村雅彦、大冢宁宁主演）<ol><li>超税金对策杀人事件 / 超税金対策杀人事件</li><li>超理科杀人事件 / 超理系杀人事件</li><li>超猜凶手小说杀人事件 / 超犯人当て小说杀人事件（问题篇·解决篇）</li><li>超高龄化社会杀人事件 / 超高齢化社会杀人事件</li><li>超预告小说杀人事件 / 超予告小说杀人事件</li><li>超长篇小说杀人事件 / 超长编小说杀人事件</li><li>魔风馆杀人事件 / 魔风馆杀人事件（超最终回·ラスト五枚）</li><li>超读书机器杀人事件 / 超読书机械杀人事件</li></ol></li><li>《圣诞阿姨》 /サンタのおばさん（絵本：絵は杉田比吕美）</li></ol><h3 id="2002年"><a href="#2002年" class="headerlink" title="2002年"></a>2002年</h3><ol><li>《湖畔》&lt;レイクサイド&gt;（2002年拍摄电影，药师丸博子、丰川悦司、役所广司主演）</li><li>《时生》&lt;トキオ&gt;（2004年拍摄日剧，樱井翔主演，剧名为「给父亲的口信」）</li><li>《绑架游戏》&lt;ゲームの名は诱拐&gt;（2003年拍摄电影、藤木直人、仲间由纪惠主演）</li></ol><h3 id="2003年"><a href="#2003年" class="headerlink" title="2003年"></a>2003年</h3><ol><li>《信》&lt;手纸&gt;（第129 届直木奖入围）（2005年拍摄电影，山田孝之、泽尻英龙华主演）</li><li>《我是非常勤》&lt;おれは非情勤&gt; （注：本书书名和「 非常勤」（中文意为兼任）同音，是创作者特别设定的双关语趣味）</li><li>《杀人之门》&lt;杀人の门&gt;</li></ol><h3 id="2004年"><a href="#2004年" class="headerlink" title="2004年"></a>2004年</h3><ol><li>《幻夜》（第131 届直木奖入围）（2010年秋季档日剧，深田恭子、冢本高史主演）</li><li>《挑战？》（散文集）&lt;ちゃれんじ&gt;（散文集）</li><li>《彷徨之刃》&lt;さまよう刃&gt;（2009年改编为电影，竹野内丰主演）</li></ol><h3 id="2005年"><a href="#2005年" class="headerlink" title="2005年"></a>2005年</h3><ol><li>《黑笑小说》<ol><li>又一次助跑 / もうひとつの助走</li><li>线香花火 / 线香花火</li><li>过去的人 / 过去の人</li><li>评审会 / 选考会</li><li>巨乳妄想综合征 / 巨乳妄想症候群</li><li>无能药 / インポグラ</li><li>显微眼 / みえすぎ</li><li>钟情喷雾 / モテモテ·スプレー</li><li>灰姑娘白夜行 / シンデレラ白夜行</li><li>跟踪狂入门 / ストーカー入门</li><li>临界家族 / 临界家族</li><li>不笑的人 / 笑わない男</li><li>奇迹之照 / 奇迹の一枚</li></ol></li><li>《嫌疑犯X的献身》（神探伽利略系列第3部）&lt;容疑者Xの献身&gt;</li><li>《科学》（散文集）&lt;さいえんす&gt;</li></ol><h3 id="2006年"><a href="#2006年" class="headerlink" title="2006年"></a>2006年</h3><ol><li>《梦回都灵》（散文集）&lt;梦はトリノをかけめぐる&gt;</li><li>《红手指》（加贺恭一郎系列） &lt;赤い指&gt;（2011年冬季档日剧SP，阿部宽、黑木明纱主演）</li><li>《使命与心的极限》&lt;使命と魂のリミット&gt; （2011秋季档日剧SP，石原里美、速水重道主演）</li></ol><h3 id="2007年"><a href="#2007年" class="headerlink" title="2007年"></a>2007年</h3><ol><li>《也许是最后的寒暄》&lt;たぶん最後の御挨拶&gt;（散文集）</li><li>《黎明之街》&lt;夜明けの街で&gt;（2011年拍摄电影，深田恭子、岸谷五朗主演）</li><li>《濒死之眼》&lt;ダイイング·アイイ&gt;</li></ol><h3 id="2008年"><a href="#2008年" class="headerlink" title="2008年"></a>2008年</h3><ol><li>《流星之绊》&lt;流星の绊&gt;（2008年拍摄日剧，二宫和也、锦户亮、户田惠梨香主演）</li><li>《伽利略的苦恼》（神探伽利略系列第4部）&lt;ガリレオの苦悩&gt;</li><li>《圣女的救济》（神探伽利略系列第5部）&lt;圣女の救済&gt;</li></ol><h3 id="2009年"><a href="#2009年" class="headerlink" title="2009年"></a>2009年</h3><ol><li>《悖论13》台版译《异变13秒》&lt;パラドックス13&gt;</li><li>《新参者》（加贺恭一郎系列）（2010年拍摄日剧，阿部宽、黑木明纱主演）</li><li>《美丽的凶器》</li></ol><h3 id="2010年"><a href="#2010年" class="headerlink" title="2010年"></a>2010年</h3><ol><li>《布谷鸟的蛋是谁的》&lt;カッコウの卵は谁のもの&gt; 在《小说宝石》上连载时原题《フェイク》</li><li>《白金数据》&lt;プラチナデータ&gt;（2012年拍摄电影，二宫和也主演）</li><li>《白银杰克》&lt; 白银ジャック&gt;</li></ol><h3 id="2011年"><a href="#2011年" class="headerlink" title="2011年"></a>2011年</h3><ol><li>《你旁边是谁》&lt;あの顷の谁か&gt;<ol><li>全是字谜 / シャレードがいっぱい（2012年日剧《东野圭吾推理系列》第六集，长泽雅美主演）</li><li>Reiko和玲子 / 玲子とレイコ（2012年日剧《东野圭吾推理系列》第四集，观月阿丽莎主演）</li><li>再生魔术之女 / 再生魔术の女 （2012年日剧《东野圭吾推理系列》第十一集，铃木京香主演）</li><li>再见，“爸爸” / さよなら『お父さん』</li><li>名侦探退场 / 名探侦退场</li><li>母老虎 / 女も虎も</li><li>好困，我不想死 / りたい死にたくない</li><li>20年的约定 / 二十年目の约束（2012年日剧《东野圭吾推理系列》第十集，筱原凉子主演）</li></ol></li><li>《麒麟之翼》（加贺恭一郎系列）&lt;麒麟の翼&gt;（加贺恭一郎系列）</li><li>《牛奶箱的回答》&lt;回答は牛乳箱に&gt;（短篇 出自《小说 野性时代》 第89号）</li><li>《听心》&lt;心聴&gt;（短篇 出自《オール读物》2011年04月号）</li><li>《盛夏的方程式》（神探伽利略系列第6部）&lt;真夏の方程式&gt;</li><li>《假面舞馆》&lt;マスカレード·ホテル&gt; 暂定2012年9月9日出版</li><li>《歪笑小说》</li></ol><h3 id="2012年"><a href="#2012年" class="headerlink" title="2012年"></a>2012年</h3><ol><li>《虚像的小丑》（神探伽利略系列第7部）&lt;虚像の道化师 ガリレオ 7&gt;</li><li>《杂货店的奇迹》</li><li>《那个时候的谁》</li><li>《禁断的魔术》（神探伽利略系列第8部）&lt;禁断の魔术 ガリレオ8&gt;</li></ol><h3 id="2013年"><a href="#2013年" class="headerlink" title="2013年"></a>2013年</h3><ol><li>《梦幻花》（むげんばな）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了几篇 东野圭吾 的小说, 都还蛮有意思的。 像 《嫌疑人X的献身》, 《流星之绊》,《毕业》啊 等等,好多都记不住名字了。&lt;/p&gt;&lt;p&gt;于是决定把他的全集整理一下,留着有空都看一遍~&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;加贺恭一郎系列&quot;&gt;&lt;a href=&quot;#加贺恭一郎系列
    
    </summary>
    
      <category term="文学" scheme="http://blog.ochukai.me/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="文学" scheme="http://blog.ochukai.me/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="日本文学" scheme="http://blog.ochukai.me/tags/%E6%97%A5%E6%9C%AC%E6%96%87%E5%AD%A6/"/>
    
      <category term="东野圭吾" scheme="http://blog.ochukai.me/tags/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/"/>
    
      <category term="东野圭吾作品全集" scheme="http://blog.ochukai.me/tags/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE%E4%BD%9C%E5%93%81%E5%85%A8%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Splice 和 Slice 的区别</title>
    <link href="http://blog.ochukai.me/ths-difference-between-splice-and-slice/"/>
    <id>http://blog.ochukai.me/ths-difference-between-splice-and-slice/</id>
    <published>2016-07-11T02:52:16.000Z</published>
    <updated>2016-11-22T01:40:09.766Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一遍介绍 <code>splice()</code> 方法的，这一次又遇到了 <code>slice()</code>, 这两个太像了, 首先看这两个意思吧：</p><blockquote><p>splice [splais]<br>n. 接合；结婚<br>vt. 拼接；接合；使结婚</p></blockquote><p>和</p><blockquote><p>slice [slais]<br>n. 薄片；部分；菜刀，火铲<br>vt. 切下；把…分成部分；将…切成薄片<br>vi. 切开；割破</p></blockquote><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><code>slice()</code> 方法可从已有的数组中返回选定的元素。这个函数有两个参数 <code>slice(start, end)</code> 会返回一个从 <code>start</code> 到 <code>end</code> 之前元素的新数组， 如果 <code>end</code> 是<code>负数</code>，就从数组末尾倒着数, 如果 end 没有设置，就返回从 start 到数组末尾组成的新数组咯~</p><p>总之这是一个返回新数组的函数，知识返回而已，不会改变原来的数组，而 <code>splice</code> 方法则会改变原来的数组.</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">var arr = new Array(3)</span>
<span class="line">arr[0] = &quot;George&quot;</span>
<span class="line">arr[1] = &quot;John&quot;</span>
<span class="line">arr[2] = &quot;Thomas&quot;</span>
<span class="line">arr[3] = &quot;James&quot;</span>
<span class="line">arr[4] = &quot;Adrew&quot;</span>
<span class="line">arr[5] = &quot;Martin&quot;</span>
<span class="line"></span>
<span class="line">console.log(arr.slice(4)) // [&quot;Adrew&quot;, &quot;Martin&quot;] == arr.slice(4, 6)</span>
<span class="line">console.log(arr.slice(0, -4)) // [&quot;George&quot;, &quot;John&quot;] == arr.slice(0, 2)</span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一遍介绍 &lt;code&gt;splice()&lt;/code&gt; 方法的，这一次又遇到了 &lt;code&gt;slice()&lt;/code&gt;, 这两个太像了, 首先看这两个意思吧：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;splice [splais]&lt;br&gt;n. 接合；结婚&lt;br&gt;vt. 
    
    </summary>
    
      <category term="Javascript" scheme="http://blog.ochukai.me/categories/javascript/"/>
    
    
      <category term="splice" scheme="http://blog.ochukai.me/tags/splice/"/>
    
      <category term="slice" scheme="http://blog.ochukai.me/tags/slice/"/>
    
  </entry>
  
  <entry>
    <title>上层滚动 下层不摇滚</title>
    <link href="http://blog.ochukai.me/prevent-deep-div-scroll-with-the-top-element/"/>
    <id>http://blog.ochukai.me/prevent-deep-div-scroll-with-the-top-element/</id>
    <published>2016-06-23T03:12:27.000Z</published>
    <updated>2016-11-22T01:40:09.751Z</updated>
    
    <content type="html"><![CDATA[<p>最近写手机页面颇多, 经常有弹出框, 或者下拉列表, 如果弹框或者下拉列表的内容太多,出现了滚动条, 恰好外面的内容也很多,也有滚动条的话,就会出现一种情况:</p><p><img src="../images/scroll-1.png" alt="例子"></p><p>比如上图, 当用力划一下屏幕, 下拉框滚到底了之后, <strong>body</strong> 随之也开始滚, 很讨厌。出现过好多次了, 而且测试逼我太紧~</p><h2 id="我要解决这个问题啊"><a href="#我要解决这个问题啊" class="headerlink" title="我要解决这个问题啊"></a>我要解决这个问题啊</h2><p>其实很简单, 只要弹出下拉列表的时候让下层的元素不能滚动就好了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal-open</span> &#123; </span>
<span class="line">  <span class="attribute">overflow</span>: hidden;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>js 的话就这么写:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">$div</span>) </span>&#123;</span>
<span class="line">  $(<span class="string">'body'</span>).addClass(<span class="string">'modal-open'</span>);</span>
<span class="line">  <span class="comment">// ...</span></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">$div</span>) </span>&#123;</span>
<span class="line">  $(<span class="string">'body'</span>).removeClass(<span class="string">'modal-open'</span>);</span>
<span class="line">  <span class="comment">// ...</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写手机页面颇多, 经常有弹出框, 或者下拉列表, 如果弹框或者下拉列表的内容太多,出现了滚动条, 恰好外面的内容也很多,也有滚动条的话,就会出现一种情况:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;../images/scroll-1.png&quot; alt=&quot;例子&quot;&gt;&lt;/p&gt;&lt;p&gt;比
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Zepto 插件写法</title>
    <link href="http://blog.ochukai.me/zepto-plugin/"/>
    <id>http://blog.ochukai.me/zepto-plugin/</id>
    <published>2016-06-20T06:32:33.000Z</published>
    <updated>2016-11-22T01:40:09.782Z</updated>
    
    <content type="html"><![CDATA[<p>一般是这样的… 比较水, 并没有怎么写过.</p><p>我只是把 bootstrap 的 button 组件改了一下, 删掉了 data-api 部分, 感觉这样该够用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line">+<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span>
<span class="line"><span class="meta">  'use strict'</span>;</span>
<span class="line"></span>
<span class="line">  <span class="comment">// BUTTON PUBLIC CLASS DEFINITION</span></span>
<span class="line">  <span class="comment">// ==============================</span></span>
<span class="line"></span>
<span class="line">  <span class="keyword">var</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">element, options</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">this</span>.$element  = $(element);</span>
<span class="line">    <span class="keyword">this</span>.options   = $.extend(&#123;&#125;, Button.DEFAULTS, options);</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  Button.DEFAULTS = &#123;</span>
<span class="line">    <span class="attr">loadingText</span>: <span class="string">'loading...'</span>;</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  Button.prototype.setState = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;&#125;;</span>
<span class="line"></span>
<span class="line">  Button.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="comment">// BUTTON PLUGIN DEFINITION</span></span>
<span class="line">  <span class="comment">// ========================</span></span>
<span class="line"></span>
<span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Plugin</span>(<span class="params">option</span>) </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span>    = $(<span class="keyword">this</span>),</span>
<span class="line">          lookup   = $.fn.button.lookup,</span>
<span class="line">          instance = lookup[$<span class="keyword">this</span>.data(<span class="string">'bs.button'</span>)];</span>
<span class="line"></span>
<span class="line">      <span class="keyword">if</span> (!instance) &#123;</span>
<span class="line">        lookup[++lookup.i] = (instance = <span class="keyword">new</span> Button(<span class="keyword">this</span>, options));</span>
<span class="line">        $<span class="keyword">this</span>.data(<span class="string">'bs.button'</span>, lookup.i);</span>
<span class="line">      &#125;</span>
<span class="line"></span>
<span class="line">      <span class="comment">// button method</span></span>
<span class="line">      <span class="comment">// if (option == 'toggle') &#123;</span></span>
<span class="line">      <span class="comment">//   data.toggle();</span></span>
<span class="line">      <span class="comment">// &#125; else if (option) &#123;</span></span>
<span class="line">      <span class="comment">//   data.setState(option);</span></span>
<span class="line">      <span class="comment">// &#125;</span></span>
<span class="line">    &#125;);</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  <span class="keyword">var</span> old = $.fn.button;</span>
<span class="line"></span>
<span class="line">  $.fn.button             = Plugin;</span>
<span class="line">  $.fn.button.lookup      = &#123; <span class="attr">i</span>: <span class="number">0</span> &#125;;</span>
<span class="line">  $.fn.button.Constructor = Button;</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="comment">// BUTTON NO CONFLICT</span></span>
<span class="line">  <span class="comment">// ==================</span></span>
<span class="line"></span>
<span class="line">  $.fn.button.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span>
<span class="line">    $.fn.button = old;</span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span>
<span class="line">  &#125;;</span>
<span class="line"></span>
<span class="line">&#125; (Zepto);</span>
</pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般是这样的… 比较水, 并没有怎么写过.&lt;/p&gt;&lt;p&gt;我只是把 bootstrap 的 button 组件改了一下, 删掉了 data-api 部分, 感觉这样该够用了。&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.ochukai.me/categories/javascript/"/>
    
    
      <category term="zepto" scheme="http://blog.ochukai.me/tags/zepto/"/>
    
  </entry>
  
  <entry>
    <title>使用 formData 提交表单和上传图片</title>
    <link href="http://blog.ochukai.me/formdata-in-action/"/>
    <id>http://blog.ochukai.me/formdata-in-action/</id>
    <published>2016-04-11T07:34:57.000Z</published>
    <updated>2016-11-22T01:40:09.735Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个表单，需要提交好多信息和一些图片，后台的同学说要图片随着表单一起提交。那就不能用 ajax 单张上传了~</p><p>图片的话，最多可以选8张，选中了的也可以取消掉，因为并没有传到服务器，所以删除很easy。</p><p>然后我就想到了可以用 FormData 来做，因为之前好像用过，感觉很方便。</p><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><blockquote><p>The FormData interface provides a way to easily construct a set of <code>key/value</code> pairs representing form fields and their values, which can then be easily sent using the <code>XMLHttpRequest.send()</code> method. It uses the same format a form would use if the encoding type were set to “multipart/form-data”.</p></blockquote><p>如果使用 jQuery 提交 formData 的话，大致像这样：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span>
<span class="line">  <span class="attr">url</span>        : url,</span>
<span class="line">  <span class="attr">type</span>       : <span class="string">'POST'</span>,</span>
<span class="line">  <span class="attr">data</span>       : formData,</span>
<span class="line">  <span class="comment">// 下面这两条需要特别注意</span></span>
<span class="line">  processData: <span class="literal">false</span>,</span>
<span class="line">  <span class="attr">contentType</span>: <span class="literal">false</span>,</span>
<span class="line">  success(data) &#123;</span>
<span class="line">    <span class="comment">// ...</span></span>
<span class="line">  &#125;,</span>
<span class="line">  error(xhr) &#123;</span>
<span class="line">    <span class="comment">// ...</span></span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure><p></p><p>就是把 formData 作为 data 发送到后台就好了，如果要构造一个 formData 对象的话，也很简单呢<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData();</span>
<span class="line">formData.append(<span class="string">'ticket_id'</span>, <span class="number">1</span>);</span>
</pre></td></tr></table></figure><p></p><p>如果放文件在 formData 里面的话呢，也没有太复杂的地方：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span>
<span class="line"><span class="comment">// &lt;input</span></span>
<span class="line"><span class="comment">//   ref="input-image"</span></span>
<span class="line"><span class="comment">//   accept="image/*"</span></span>
<span class="line"><span class="comment">//   onChange=&#123; this.onImageSelected &#125;</span></span>
<span class="line"><span class="comment">//   type="file"</span></span>
<span class="line"><span class="comment">// /&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="comment">// ....</span></span>
<span class="line">isImage: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span>
<span class="line">  <span class="comment">// (!src.type.match(/image.*/)</span></span>
<span class="line">  <span class="keyword">var</span> type = <span class="string">'|'</span> + file.type.slice(file.type.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>) + <span class="string">'|'</span>;</span>
<span class="line">  <span class="keyword">return</span> <span class="string">'|jpg|png|jpeg|bmp|gif|'</span>.indexOf(type) !== <span class="number">-1</span>;</span>
<span class="line">&#125;,</span>
<span class="line"></span>
<span class="line">onImageSelected(e) &#123;</span>
<span class="line">  <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</span>
<span class="line">  <span class="built_in">console</span>.log(<span class="string">'select image'</span>, file);</span>
<span class="line"></span>
<span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.isImage(file)) &#123;</span>
<span class="line">    Modal.error(&#123; <span class="attr">title</span>: <span class="string">'请选择一张图片'</span> &#125;);</span>
<span class="line">    <span class="keyword">return</span>;</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  <span class="keyword">this</span>.props.onImageSelected(file);</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="comment">// 放多个也可以~</span></span>
<span class="line">formData.append(<span class="string">'file1'</span>, file1)</span>
<span class="line">formData.append(<span class="string">'file2'</span>, file2)</span>
</pre></td></tr></table></figure><p></p><p>对了，因为我把上传文件的 input 隐藏掉了，显示出来了是一个 加号 的图标，所以如果要触发 input 的点击事件的话：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">onItemClick() &#123;</span>
<span class="line">  <span class="keyword">const</span> input = findDOMNode(<span class="keyword">this</span>.refs[<span class="string">'input-image'</span>]);</span>
<span class="line">  input.click();</span>
<span class="line">&#125;,</span>
</pre></td></tr></table></figure><p></p><h3 id="生成-formData"><a href="#生成-formData" class="headerlink" title="生成 formData"></a>生成 formData</h3><p>一个一个的 append 可能速度太慢了，而且需要每个都写一遍，其实生成的 formData 的方式还是蛮多的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span>
<span class="line"><span class="keyword">var</span> form =  <span class="built_in">document</span>.getElementById(<span class="string">"form"</span>);</span>
<span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData(form);</span>
<span class="line"></span>
<span class="line"><span class="comment">// 2</span></span>
<span class="line"><span class="keyword">var</span> form =  <span class="built_in">document</span>.getElementById(<span class="string">"form"</span>);</span>
<span class="line"><span class="keyword">var</span> formdata = form.getFormData();</span>
</pre></td></tr></table></figure><p></p><p>好了，没了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个表单，需要提交好多信息和一些图片，后台的同学说要图片随着表单一起提交。那就不能用 ajax 单张上传了~&lt;/p&gt;&lt;p&gt;图片的话，最多可以选8张，选中了的也可以取消掉，因为并没有传到服务器，所以删除很easy。&lt;/p&gt;&lt;p&gt;然后我就想到了可以用 FormData 
    
    </summary>
    
      <category term="form" scheme="http://blog.ochukai.me/categories/form/"/>
    
      <category term="JavaScript" scheme="http://blog.ochukai.me/categories/form/javascript/"/>
    
    
      <category term="formData" scheme="http://blog.ochukai.me/tags/formdata/"/>
    
      <category term="ajax" scheme="http://blog.ochukai.me/tags/ajax/"/>
    
      <category term="image upload" scheme="http://blog.ochukai.me/tags/image-upload/"/>
    
  </entry>
  
  <entry>
    <title>菜单下面的小精灵</title>
    <link href="http://blog.ochukai.me/menu-with-moved-elfish/"/>
    <id>http://blog.ochukai.me/menu-with-moved-elfish/</id>
    <published>2016-03-21T08:05:51.000Z</published>
    <updated>2016-11-22T01:40:09.751Z</updated>
    
    <content type="html"><![CDATA[<p>有些网站的导航下面会有一到杠，鼠标在各个导航之间移动的时候，这一道杠也会跟着动，很好看，就像这个</p><p></p><p data-height="268" data-theme-id="0" data-slug-hash="PNbGZQ" data-default-tab="result" data-user="ochukai" class="codepen">See the Pen <a href="http://codepen.io/ochukai/pen/PNbGZQ/" target="_blank" rel="external">ooo-nav</a> by Oliver (<a href="http://codepen.io/ochukai" target="_blank" rel="external">@ochukai</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>我把她叫做小精灵。</p><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>实现这个其实不难，当鼠标移动到某一个菜单上面时，小精灵滑入（至于方向，如果鼠标从右边进入菜单，那就从右向左滑），然后当鼠标移出时，小精灵跟着也移出菜单， 同时如果鼠标恰好移进了另一个菜单，下一个菜单的进入动画也开始播放，连续起来的话就像是小精灵跟着过来了。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>菜单的话当然是用 ul 来实现了<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>非常<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛逼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>
</pre></td></tr></table></figure><p></p><h3 id="小精灵"><a href="#小精灵" class="headerlink" title="小精灵"></a>小精灵</h3><p>这个小精灵该怎么实现呢, 开始时我打算用 <code>border</code> 来实现，试了一下之后才发现，并不理想，因为当鼠标 hover 时，border 变化，内容也会随着动，很丑。</p><p>于是我就想用 <code>after</code> 这个伪元素来实现，因为之前并没用过，感觉蛮新鲜的。</p><p>使用 <code>after</code> 最重要的地方也是前提，就是 <code>content: &#39;&#39;</code>，如果没有这一句，不管怎么修饰 <code>after</code> 的样式，都是徒劳。</p><p>写完之后的样子大概是这样<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">li</span> &#123;</span>
<span class="line">  <span class="attribute">float</span>:left;</span>
<span class="line">  <span class="attribute">display</span>: inline-block;</span>
<span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span>
<span class="line">  <span class="attribute">cursor</span>: pointer;</span>
<span class="line">  <span class="attribute">position</span>: relative;</span>
<span class="line">  <span class="attribute">overflow</span>: hidden;</span>
<span class="line"></span>
<span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span>
<span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span>
<span class="line">    <span class="attribute">height</span>: <span class="number">3px</span>;</span>
<span class="line">    <span class="attribute">position</span>: absolute;</span>
<span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p></p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>根据上面的原理，如果想实现的话，大概只需要写四个动画</p><ul><li>小精灵从右向左进入菜单</li><li>小精灵从右向左移出菜单</li><li>小精灵从左向右进入菜单</li><li>小精灵从左向右移出菜单</li></ul><p>我打算使用 <code>width</code> 的变化来模拟小精灵的滑动效果，假如是从左向右， css 就像下面这样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
</pre></td><td class="code"><pre><span class="line">@keyframes slide-in &#123;</span>
<span class="line">  from &#123; width: 0; &#125;</span>
<span class="line">  to &#123; width: 100%; &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">.slide-in-from-left:after,</span>
<span class="line">.slide-out-from-left:after &#123;</span>
<span class="line">  left: 0; // 初始位置在左边，宽度为 0，宽度逐渐变大</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">.slide-in-from-left:after,</span>
<span class="line">.slide-in-from-right:after &#123;</span>
<span class="line">  animation-name: slide-in;</span>
<span class="line">  animation-timing-function: cubic-bezier(0.65, 0.05, 0.36, 1);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>css 写完了，不过我要识别鼠标进入或离开的方向，也就是要判断鼠标是从左边进入还是从右边进入，是从左边移出还是从右边移出。</p><p>于是， 要写一些 js 来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
</pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span>
<span class="line"></span>
<span class="line">  <span class="keyword">var</span> classList = [</span>
<span class="line">        <span class="string">'slide-in-from-left'</span>,</span>
<span class="line">        <span class="string">'slide-in-from-right'</span>,</span>
<span class="line">        <span class="string">'slide-out-from-right'</span>,</span>
<span class="line">        <span class="string">'slide-out-from-left'</span></span>
<span class="line">      ].join(<span class="string">' '</span>);</span>
<span class="line"></span>
<span class="line">  $(<span class="string">'ul.nav'</span>)</span>
<span class="line">    .on(<span class="string">'mouseenter'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span>
<span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span>
<span class="line">      <span class="keyword">var</span> width = $<span class="keyword">this</span>.outerWidth();</span>
<span class="line">      <span class="keyword">var</span> xx = e.offsetX;</span>
<span class="line">      <span class="keyword">var</span> className = (xx &lt; (width / <span class="number">2</span>))</span>
<span class="line">                    ? <span class="string">'slide-in-from-left'</span></span>
<span class="line">                    : <span class="string">'slide-in-from-right'</span>;</span>
<span class="line"></span>
<span class="line">      $<span class="keyword">this</span>.removeClass(classList).addClass(className);      </span>
<span class="line">    &#125;)</span>
<span class="line">    .on(<span class="string">'mouseleave'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span>
<span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span>
<span class="line">      <span class="keyword">var</span> width = $<span class="keyword">this</span>.outerWidth();</span>
<span class="line">      <span class="keyword">var</span> xx = e.offsetX;</span>
<span class="line">      <span class="keyword">var</span> className = (xx &lt; (width / <span class="number">2</span>))</span>
<span class="line">                    ? <span class="string">'slide-out-from-left'</span></span>
<span class="line">                    : <span class="string">'slide-out-from-right'</span>;</span>
<span class="line">      $<span class="keyword">this</span>.removeClass(classList).addClass(className);</span>
<span class="line">    &#125;);</span>
<span class="line"></span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure><p>这样就写完了，再把开头的例子放上吧。</p><p></p><p data-height="268" data-theme-id="0" data-slug-hash="PNbGZQ" data-default-tab="result" data-user="ochukai" class="codepen">See the Pen <a href="http://codepen.io/ochukai/pen/PNbGZQ/" target="_blank" rel="external">ooo-nav</a> by Oliver (<a href="http://codepen.io/ochukai" target="_blank" rel="external">@ochukai</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>谢谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些网站的导航下面会有一到杠，鼠标在各个导航之间移动的时候，这一道杠也会跟着动，很好看，就像这个&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;PNbGZQ&quot; data-default-ta
    
    </summary>
    
      <category term="CSS Animation" scheme="http://blog.ochukai.me/categories/css-animation/"/>
    
      <category term="CSS" scheme="http://blog.ochukai.me/categories/css-animation/css/"/>
    
    
      <category term="nav" scheme="http://blog.ochukai.me/tags/nav/"/>
    
  </entry>
  
  <entry>
    <title>Queue Anim 列表</title>
    <link href="http://blog.ochukai.me/css-animation-queue-list/"/>
    <id>http://blog.ochukai.me/css-animation-queue-list/</id>
    <published>2016-03-03T09:45:24.000Z</published>
    <updated>2016-11-22T01:40:09.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h1><p>基本写法是一个开始状态和一个结束状态：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> demo-anim &#123;</span>
<span class="line">  <span class="selector-tag">from</span> &#123;</span>
<span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span>
<span class="line">  &#125;</span>
<span class="line">  <span class="selector-tag">to</span> &#123;</span>
<span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p></p><p></p><p data-height="268" data-theme-id="0" data-slug-hash="QNbBOy" data-default-tab="result" data-user="ochukai" class="codepen">See the Pen <a href="http://codepen.io/ochukai/pen/QNbBOy/" target="_blank" rel="external">QNbBOy</a> by Oliver (<a href="http://codepen.io/ochukai" target="_blank" rel="external">@ochukai</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><blockquote><p>其中 <code>animation-iteration-count: number or infinite;</code> 可以设置循环次数，infinite为无限次</p></blockquote><p>还可以定义的很详细：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> demo-anim &#123;</span>
<span class="line">  <span class="selector-tag">from</span> &#123;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0, 0);</span>
<span class="line">  &#125;</span>
<span class="line">  20% &#123;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20, 20);</span>
<span class="line">  &#125;</span>
<span class="line">  40% &#123;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(40, 0);</span>
<span class="line">  &#125;</span>
<span class="line">  60% &#123;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(60, 20);</span>
<span class="line">  &#125;</span>
<span class="line">  80% &#123;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(80, 0);</span>
<span class="line">  &#125;</span>
<span class="line">  <span class="selector-tag">to</span> &#123;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(100, 20);</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p></p><h1 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h1><blockquote><p>animation-fill-mode : none | forwards | backwards | both;</p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>不改变默认行为。</td></tr><tr><td>forward</td><td>当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。</td></tr><tr><td>backwards</td><td>在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</td></tr><tr><td>both</td><td>向前和向后填充模式都被应用。</td></tr></tbody></table><blockquote><p>用到的知识点就是上面两个，下面开始写。</p></blockquote><h1 id="Queue-in-List"><a href="#Queue-in-List" class="headerlink" title="Queue-in List"></a>Queue-in List</h1><p>我要写的效果是一个列表，当列表显示时，其子项逐个出现，从右向左滑入，透明度也由浅变深。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先写一个使 li 从左向右滑入的效果，然后再给需要稍晚滑入的 li 加上 <code>animation-delay</code> 就好了。</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义 li 样式 */</span></span>
<span class="line"><span class="selector-tag">li</span> &#123;</span>
<span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span>
<span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span>
<span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span>
<span class="line">  <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span>
<span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>; <span class="comment">/* 默认是隐藏的 */</span></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/* 定义动画 */</span></span>
<span class="line">@<span class="keyword">keyframes</span> queue-in &#123;</span>
<span class="line">  <span class="selector-tag">from</span> &#123;</span>
<span class="line">    <span class="comment">/* 开始时 在左边 */</span></span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(40px);</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">  <span class="selector-tag">to</span> &#123;</span>
<span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span>
<span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/* 调用动画 */</span></span>
<span class="line"><span class="selector-class">.list-queue-in</span> &gt; <span class="selector-tag">li</span> &#123;</span>
<span class="line">  <span class="attribute">animation-name</span>: queue-in;</span>
<span class="line">  <span class="attribute">animation-duration</span>: .<span class="number">3s</span>;</span>
<span class="line">  <span class="comment">/* 这一行就表示动画结束时元素的状态就是动画的最后一帧 */</span></span>
<span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span>
<span class="line">  <span class="attribute">animation-timing-function</span>: ease-in;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>这是 进入状态时的 html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-queue-in"</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-ad-0"</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-ad-1"</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-ad-2"</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-ad-3"</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-ad-4"</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>
</pre></td></tr></table></figure><blockquote><p>这样的话，li 已经可以从右向左滑入了，但是，是在一起滑入的，我需要他们分开~</p></blockquote><h2 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h2><p><code>list-ad-0</code> 这个东西就是提前定义好的 <code>animation-delay</code>，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-ad-0</span> &#123;</span>
<span class="line">  <span class="attribute">-webkit-animation-delay</span>: <span class="number">0s</span>;</span>
<span class="line">          <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="selector-class">.list-ad-1</span> &#123;</span>
<span class="line">  <span class="attribute">-webkit-animation-delay</span>: <span class="number">0.1s</span>;</span>
<span class="line">          <span class="attribute">animation-delay</span>: <span class="number">0.1s</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>然后，他们就可以一个接一个的滑了~</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>所有的代码都在这里，就是这样的效果：</p><p></p><p data-height="268" data-theme-id="0" data-slug-hash="zqYgxb" data-default-tab="result" data-user="ochukai" class="codepen">See the Pen <a href="http://codepen.io/ochukai/pen/zqYgxb/" target="_blank" rel="external">zqYgxb</a> by Oliver (<a href="http://codepen.io/ochukai" target="_blank" rel="external">@ochukai</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keyframes&quot;&gt;&lt;a href=&quot;#keyframes&quot; class=&quot;headerlink&quot; title=&quot;@keyframes&quot;&gt;&lt;/a&gt;@keyframes&lt;/h1&gt;&lt;p&gt;基本写法是一个开始状态和一个结束状态：&lt;br&gt;&lt;/p&gt;&lt;figure class
    
    </summary>
    
      <category term="CSS" scheme="http://blog.ochukai.me/categories/css/"/>
    
    
      <category term="css" scheme="http://blog.ochukai.me/tags/css/"/>
    
      <category term="animation" scheme="http://blog.ochukai.me/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>戦艦の女の子 の 航母 - 诶塞克斯</title>
    <link href="http://blog.ochukai.me/esekesu-senkanno-onnanoko/"/>
    <id>http://blog.ochukai.me/esekesu-senkanno-onnanoko/</id>
    <published>2016-03-03T05:49:03.000Z</published>
    <updated>2017-01-24T06:24:27.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="战舰少女"><a href="#战舰少女" class="headerlink" title="战舰少女"></a>战舰少女</h2><p>首先让我们认识一下这个游戏的名字：</p><blockquote><p>戦艦の女の子 【せんかんのおんなのこ】【senkannoonnanoko】</p></blockquote><h2 id="航空母舰"><a href="#航空母舰" class="headerlink" title="航空母舰"></a>航空母舰</h2><p>还有航空母舰这个单词</p><blockquote><p>航空母艦日【こうくうぼかん】【koukuubokann】</p><p>航空母舰。（航空機を搭載し、これを発着させるための飛行甲板および格納庫・修理設備などを備えた軍艦。今日、水上兵力の中核。略称、空母。）</p></blockquote><h2 id="埃塞克斯"><a href="#埃塞克斯" class="headerlink" title="埃塞克斯"></a>埃塞克斯</h2><p>下面进入正题，就是我很喜欢但是还咩有得到的 - 埃塞克斯</p><p><img src="../images/aise-normal.png" alt="正常"><br><img src="../images/aise-broken.png" alt="正常"></p><h2 id="建造公式"><a href="#建造公式" class="headerlink" title="建造公式"></a>建造公式</h2><ol><li>标准航母公式：400,600,600,400（基本上赌航母都用这个）</li><li>低费航母公式：300,30,400,300（当资源不足时可用）</li><li>常用玄学公式：400 600 650 430（目前出货率极高的公式）</li><li>500 130 600 400（据说出货率更高~）</li></ol><h2 id="建造时间"><a href="#建造时间" class="headerlink" title="建造时间"></a>建造时间</h2><p>4 个小时</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;战舰少女&quot;&gt;&lt;a href=&quot;#战舰少女&quot; class=&quot;headerlink&quot; title=&quot;战舰少女&quot;&gt;&lt;/a&gt;战舰少女&lt;/h2&gt;&lt;p&gt;首先让我们认识一下这个游戏的名字：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;戦艦の女の子 【せんかんのおんなのこ】【senkan
    
    </summary>
    
      <category term="戦艦の女の子" scheme="http://blog.ochukai.me/categories/%E6%88%A6%E8%89%A6%E3%81%AE%E5%A5%B3%E3%81%AE%E5%AD%90/"/>
    
    
      <category term="埃塞克斯" scheme="http://blog.ochukai.me/tags/%E5%9F%83%E5%A1%9E%E5%85%8B%E6%96%AF/"/>
    
      <category term="航母" scheme="http://blog.ochukai.me/tags/%E8%88%AA%E6%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Scss 里面的 for 循环</title>
    <link href="http://blog.ochukai.me/for-in-scss/"/>
    <id>http://blog.ochukai.me/for-in-scss/</id>
    <published>2016-03-03T05:40:35.000Z</published>
    <updated>2016-11-22T01:40:09.735Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一个动画效果，使 ul 下面的 li 逐个进入，就像下图<br><img src="../images/li-queue-in.png" alt=""></p><p>做这个效果用到了 css 的 animation 中 <code>animation-delay</code>，给 li 设置入场动画后，再给 li 设置 <code>animation-delay</code>，像这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="selector-class">.li-animation-delay-1</span> &#123;</span>
<span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.1s</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>并且每一个 li 的 animation-delay 都比前一个 li 的长 .1s，也就达到了后面的 li 的入场动画后播放的效果。</p><p>因为 li 的数量也不确定，所以我打算批量生成一些 <code>li-animation-delay-*</code>, 查了一下 scss 正好有 for 的用法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> <span class="variable">$index</span> from 0 to 10 &#123;</span>
<span class="line">  <span class="selector-class">.list-ad-</span>#&#123;<span class="variable">$index</span>&#125; &#123;</span>
<span class="line">    <span class="attribute">animation-delay</span>: <span class="variable">$index</span> * <span class="number">0.1</span>#&#123;s&#125;;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure><p>其中，<code>#{***}</code> 的作用的把字符串原封不动的输出。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">#&#123;s&#125; --&gt; s</span>
</pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写一个动画效果，使 ul 下面的 li 逐个进入，就像下图&lt;br&gt;&lt;img src=&quot;../images/li-queue-in.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;做这个效果用到了 css 的 animation 中 &lt;code&gt;animation-delay&lt;/
    
    </summary>
    
      <category term="SASS" scheme="http://blog.ochukai.me/categories/sass/"/>
    
    
      <category term="scss" scheme="http://blog.ochukai.me/tags/scss/"/>
    
      <category term="for" scheme="http://blog.ochukai.me/tags/for/"/>
    
  </entry>
  
</feed>
