<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[I am Oliver]]></title>
  <subtitle><![CDATA[I love Jone.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ochukai.github.io/"/>
  <updated>2015-11-12T17:15:49.002Z</updated>
  <id>http://ochukai.github.io/</id>
  
  <author>
    <name><![CDATA[Oliver Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Baseview in Backbone]]></title>
    <link href="http://ochukai.github.io/Baseview-in-Backbone/"/>
    <id>http://ochukai.github.io/Baseview-in-Backbone/</id>
    <published>2015-11-12T16:36:15.000Z</published>
    <updated>2015-11-12T17:15:49.002Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天研究了好久的 Backbone，一直搞不明白，怎么通过 router 的改变来切换 view。</p>
<h2 id="过程跌宕起伏">过程跌宕起伏</h2><p>事情是这样的，都知道 backbone 有 model, collection, view, router 这些基本概念，今天我要写一个简单的网页，有两个 nav 项，因为用了 backbone，自然就想到了单页应用，就是单击其中某一个的时候，显示这一个 nav 项对应的内容。</p>
<p>这就用到了 router 的事件，每当 router 改变时，重新 render 整个页面。（我是这么想的）<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> appView = <span class="keyword">this</span>;</span><br><span class="line">Backbone.history.on(<span class="string">'route'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">router, name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'current route:'</span>, name);</span><br><span class="line">    appView.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>另外，在 router 里面我定义了一个变量，用来表明哪一个 nav 项被点击。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Backbone.Router.extend(&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... other methods</span></span><br><span class="line">    </span><br><span class="line">    routes: &#123;</span><br><span class="line">        <span class="string">''</span>: <span class="string">'chat'</span>, <span class="comment">// default to #chat</span></span><br><span class="line">        <span class="string">'chat'</span>: <span class="string">'chat'</span>,</span><br><span class="line">        <span class="string">'broadcast'</span>: <span class="string">'broadcast'</span>,</span><br><span class="line">        <span class="string">'*nothingMatched'</span>: <span class="string">'pageNotFoundRoute'</span> <span class="comment">// 404</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    chat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"chat page loaded."</span>);</span><br><span class="line">        <span class="built_in">window</span>.App.currentRouter = <span class="string">'chat'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    broadcast: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'broadcast page loaded.'</span>);</span><br><span class="line">        <span class="built_in">window</span>.App.currentRouter = <span class="string">'broadcast'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    pageNotFoundRoute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'pageNotFoundRoute'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>事实证明，我的想法是有一点点正确的，因为运行顺序是这样的：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span> appView initialize.</span><br><span class="line">doctor-router.js:<span class="number">11</span> Route initialize</span><br><span class="line">doctor-router.js:<span class="number">22</span> chat page loaded.    <span class="comment"># 首先，进入 router 的处理方法</span></span><br><span class="line">app.js:<span class="number">31</span> current route: chat            <span class="comment"># 然后，响应 router 的 change 事件</span></span><br><span class="line">app.js:<span class="number">58</span> <span class="keyword">in</span> appView render.             <span class="comment"># 最后，appView 的 render 方法根据 route name </span></span><br><span class="line">                                         <span class="comment"># render对应的 view</span></span><br></pre></td></tr></table></figure></p>
<p>render 的时候，首先要 <strong>remove</strong> 当前的view，然后 render 新的view。我是这么写的：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.siderView) &#123;</span><br><span class="line">    <span class="comment">// 删掉当前的</span></span><br><span class="line">    <span class="keyword">this</span>.siderView.remove(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (App.currentRouter === <span class="string">'chat'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> ChatSiderView();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (App.currentRouter === <span class="string">'broadcast'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> DoctorProfileView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 新的 view</span></span><br><span class="line"><span class="keyword">this</span>.siderView.render();</span><br></pre></td></tr></table></figure></p>
<p>运行之后我发现，这样点击下一个 nav 的时候， view 变成了空白的。后来审查元素，发现 el 那个节点整个被删掉了，因为他们两个共同放在同一个 el 下面。</p>
<p>因为是新手，而且这是第一次用 backbone，所以还不知道 $el 就是 juqery 对象，所以我就开始了漫无目的的搜索。</p>
<p>其实办法肯定是有的，就是让他俩不共用同一个 el 节点，每次 render 完了之后，添加到要显示的地方，remove 的时候也只会删掉他自己，况且还可以用 hide，隐藏自己。但是我不想这么些，不够优雅。</p>
<h2 id="有了一线希望">有了一线希望</h2><p>终于，我看到网上有人写了这么一句：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$el.empty();</span><br></pre></td></tr></table></figure></p>
<p>然后我顺藤摸瓜看起了 backbone 的源代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Creating a Backbone.View creates its initial element outside of the DOM,</span></span><br><span class="line"><span class="comment">// if an existing element is not provided...</span></span><br><span class="line"><span class="keyword">var</span> View = Backbone.View = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cid = _.uniqueId(<span class="string">'view'</span>);</span><br><span class="line">    _.extend(<span class="keyword">this</span>, _.pick(options, viewOptions));</span><br><span class="line">    <span class="keyword">this</span>._ensureElement();</span><br><span class="line">    <span class="keyword">this</span>.initialize.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure that the View has a DOM element to render into.</span></span><br><span class="line"><span class="comment">// If `this.el` is a string, pass it through `$()`, take the first</span></span><br><span class="line"><span class="comment">// matching element, and re-assign it to `el`. Otherwise, create</span></span><br><span class="line"><span class="comment">// an element from the `id`, `className` and `tagName` properties.</span></span><br><span class="line">_ensureElement: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.el) &#123;</span><br><span class="line">      <span class="comment">// omit this because we pass 'el' as options to the View.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// _.result(this, 'el') will return the el attr we defined in view</span></span><br><span class="line">        <span class="keyword">this</span>.setElement(_.result(<span class="keyword">this</span>, <span class="string">'el'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the view's element (`this.el` property) and re-delegate the</span></span><br><span class="line"><span class="comment">// view's events on the new element.</span></span><br><span class="line">setElement: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.undelegateEvents();</span><br><span class="line">    <span class="keyword">this</span>._setElement(element);</span><br><span class="line">    <span class="keyword">this</span>.delegateEvents();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates the `this.el` and `this.$el` references for this view using the</span></span><br><span class="line"><span class="comment">// given `el`. `el` can be a CSS selector or an HTML string, a jQuery</span></span><br><span class="line"><span class="comment">// context or an element. Subclasses can override this to utilize an</span></span><br><span class="line"><span class="comment">// alternative DOM manipulation API and are only required to set the</span></span><br><span class="line"><span class="comment">// `this.el` property.</span></span><br><span class="line">_setElement: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = el <span class="keyword">instanceof</span> Backbone.$</span><br><span class="line">              ? el</span><br><span class="line">              : Backbone.$(el);</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="keyword">this</span>.$el[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这一段就是说，如果我们传入了 el 那么 backbone 会自动设置 $el（通过命名就能看出这是一个 jquery 对象咯）, 并且绑定我们在 events 定义的事件到这上面。</p>
<p>然后还有 backbone 的 remove view 的方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Remove this view by taking the element out of the DOM, and removing any</span></span><br><span class="line"><span class="comment">// applicable Backbone.Events listeners.</span></span><br><span class="line">remove: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._removeElement();</span><br><span class="line">    <span class="keyword">this</span>.stopListening();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove this view's element from the document and all event listeners</span></span><br><span class="line"><span class="comment">// attached to it. Exposed for subclasses using an alternative DOM</span></span><br><span class="line"><span class="comment">// manipulation API.</span></span><br><span class="line">_removeElement: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接触事件监听，删掉元素。</p>
<h2 id="最终的_hide_方法">最终的 hide 方法</h2><p>于是，我模仿着写了一个 hide 方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.undelegateEvents();</span><br><span class="line">    <span class="keyword">this</span>.$el.empty();</span><br><span class="line">    <span class="keyword">this</span>.stopListening();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好像很简单，哈哈， 顺便把 appView 里面也改掉：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.siderView) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView.hide();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!App.currentRouter || App.currentRouter === <span class="string">'chat'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> ChatSiderView();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (App.currentRouter === <span class="string">'broadcast'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> DoctorProfileView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.siderView.render();</span><br></pre></td></tr></table></figure></p>
<p>运行之后，切换 view 正常了。耶！</p>
<p>然后我想让我的view 都具有 hide 这个方法，恰好 backbone 很好的面向对象，于是：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*global define*/</span></span><br><span class="line">define([</span><br><span class="line">    <span class="string">'jquery'</span>,</span><br><span class="line">    <span class="string">'underscore'</span>,</span><br><span class="line">    <span class="string">'backbone'</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span> (<span class="params">$, _, Backbone</span>) </span>&#123;</span><br><span class="line"><span class="pi">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> BaseView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">        hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.undelegateEvents();</span><br><span class="line">            <span class="keyword">this</span>.$el.empty();</span><br><span class="line">            <span class="keyword">this</span>.stopListening();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> BaseView;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">var</span> ChatSiderView = BaseView.extend(&#123;</span><br><span class="line"></span><br><span class="line">    el: <span class="string">'.left_aside'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>感觉非常顺畅。</p>
<h2 id="后记">后记</h2><p>频繁的删除dom元素，速度肯定是慢的，恰好我的网页很简单，所以看不出明显的缺点，网上也是推荐使用 <code>display：none</code> 和 <code>display：block</code> 来切换 view， 等我以后再研究吧。</p>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>今天研究了好久的 Backbone，一直搞不明白，怎么通过 router 的改变来切换 view。</p>
<h2 id="过程跌宕起伏">过程跌宕起伏</h2><p>事情是这样的，都知道 backbone 有 model, colle]]>
    </summary>
    
      <category term="backbone" scheme="http://ochukai.github.io/tags/backbone/"/>
    
      <category term="base" scheme="http://ochukai.github.io/tags/base/"/>
    
      <category term="view" scheme="http://ochukai.github.io/tags/view/"/>
    
      <category term="Backbone" scheme="http://ochukai.github.io/categories/Backbone/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Throttle in Javascript]]></title>
    <link href="http://ochukai.github.io/Throttle-in-Javascript/"/>
    <id>http://ochukai.github.io/Throttle-in-Javascript/</id>
    <published>2015-11-12T03:43:06.000Z</published>
    <updated>2015-11-12T03:51:27.412Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">http://www.alloyteam.com/2012/11/javascript-throttle/</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">fn, delay, mustRunDelay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> start;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">            args    = <span class="built_in">arguments</span>,</span><br><span class="line">            cur     = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">        clearTimeout(timer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">            start = cur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur - start &gt;= mustRunDelay) &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">            start = cur;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call throttle like this:</span></span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(myFunc, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// that's all</span></span><br></pre></td></tr></table></figure>
<h3 id="Another_implementation">Another implementation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 频率控制 返回函数连续调用时，fn 执行频率限定为每多少时间执行一次</span><br><span class="line"> * @param fn &#123;function&#125;  需要调用的函数</span><br><span class="line"> * @param delay  &#123;number&#125;    延迟时间，单位毫秒</span><br><span class="line"> * @param immediate  &#123;bool&#125; 给 immediate参数传递false 绑定的函数先执行，而不是delay后后执行。</span><br><span class="line"> * @return &#123;function&#125;实际调用函数</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">fn, delay, immediate, debounce</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> curr = +<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="comment">//当前事件</span></span><br><span class="line">        lastCall = <span class="number">0</span>,</span><br><span class="line">        lastExec = <span class="number">0</span>,</span><br><span class="line">        timer = <span class="literal">null</span>,</span><br><span class="line">        diff, <span class="comment">//时间差</span></span><br><span class="line">        context,<span class="comment">//上下文</span></span><br><span class="line">        args,</span><br><span class="line">        exec = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            lastExec = curr;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        curr    = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        context = <span class="keyword">this</span>,</span><br><span class="line">        args    = <span class="built_in">arguments</span>,</span><br><span class="line">        diff    = curr - (debounce ? lastCall : lastExec) - delay;</span><br><span class="line"></span><br><span class="line">        clearTimeout(timer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debounce) &#123;</span><br><span class="line">            <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">                timer = setTimeout(exec, delay);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                exec();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (diff &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                exec();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">                timer = setTimeout(exec, -diff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        lastCall = curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 delay，fn 才会执行</span><br><span class="line"> * @param fn &#123;function&#125;  要调用的函数</span><br><span class="line"> * @param delay   &#123;number&#125;    空闲时间</span><br><span class="line"> * @param immediate  &#123;bool&#125; 给 immediate参数传递false 绑定的函数先执行，而不是delay后后执行。</span><br><span class="line"> * @return &#123;function&#125;实际调用函数</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span> (<span class="params">fn, delay, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> throttle(fn, delay, immediate, <span class="literal">true</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">http://www.alloyteam.com/2012]]>
    </summary>
    
      <category term="js" scheme="http://ochukai.github.io/tags/js/"/>
    
      <category term="javascript" scheme="http://ochukai.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wrong clearfix Make me crazy!]]></title>
    <link href="http://ochukai.github.io/Wrong-clearfix-Make-me-crazy/"/>
    <id>http://ochukai.github.io/Wrong-clearfix-Make-me-crazy/</id>
    <published>2015-11-11T09:45:59.000Z</published>
    <updated>2015-11-11T09:47:49.733Z</updated>
    <content type="html"><![CDATA[<p>Clearfix 就是这么简单！<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.clearfix</span><span class="pseudo">:after</span>,</span><br><span class="line"><span class="class">.clearfix</span><span class="pseudo">:before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">" "</span></span><br><span class="line"></span></span></span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.clearfix</span><span class="pseudo">:after</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span><br><span class="line"></span></span></span>&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Clearfix 就是这么简单！<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.clearfix</span]]>
    </summary>
    
      <category term="css" scheme="http://ochukai.github.io/tags/css/"/>
    
      <category term="html" scheme="http://ochukai.github.io/tags/html/"/>
    
      <category term="css" scheme="http://ochukai.github.io/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git bash 记住密码]]></title>
    <link href="http://ochukai.github.io/remember-password-in-git-bash/"/>
    <id>http://ochukai.github.io/remember-password-in-git-bash/</id>
    <published>2015-08-18T14:19:52.000Z</published>
    <updated>2015-11-07T15:22:59.607Z</updated>
    <content type="html"><![CDATA[<p><pre class="lang:sh decode:true"># 因为 window 不允许之间新建 . 开头的文件，所以使用 mv 的方式<br>mv git-credentials .git-credentials</pre><br>然后编辑 <strong>.git-credentials</strong></p>
<p><pre class="lang:default decode:true"># github 是这样的格式<br><a href="https://{username}:{password}@github.com" target="_blank" rel="external">https://{username}:{password}@github.com</a> </pre></p>
<h1 id="git-oschina-net_是这样的">git.oschina.net 是这样的</h1><p><a href="https://{username}:{password}@git.oschina.net" target="_blank" rel="external">https://{username}:{password}@git.oschina.net</a><br><br>最后一步是</p>
<p><pre class="lang:sh decode:true">git config –global credential.helper store</pre><br>ok~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><pre class="lang:sh decode:true"># 因为 window 不允许之间新建 . 开头的文件，所以使用 mv 的方式<br>mv git-credentials .git-credentials</pre><br>然后编辑 <strong>.gi]]>
    </summary>
    
      <category term="git" scheme="http://ochukai.github.io/tags/git/"/>
    
      <category term="git bash" scheme="http://ochukai.github.io/tags/git-bash/"/>
    
      <category term="记住密码" scheme="http://ochukai.github.io/tags/%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81/"/>
    
      <category term="生活杂记" scheme="http://ochukai.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wamp mysql 中文显示为？]]></title>
    <link href="http://ochukai.github.io/wamp-mysql-chinese-question-mark/"/>
    <id>http://ochukai.github.io/wamp-mysql-chinese-question-mark/</id>
    <published>2015-08-09T05:25:28.000Z</published>
    <updated>2015-11-07T15:22:59.603Z</updated>
    <content type="html"><![CDATA[<p>发现中文显示为“？”，然后我看了一下 mysql.ini，添加了两行</p>
<p><pre class="lang:mysql decode:true">[mysqld]<br>port=3306</pre></p>
<p>#下面的两行是添加的<br>character_set_client=utf8<br>character_set_server=utf8<br>后来再看 mysql 中的信息发现这样了，不过中文问题已经解决了。</p>
<p><pre class="lang:mysql decode:true">mysql&gt; show variables like ‘character%’;<br>+————————–+—————————————————-<br>+<br>| Variable_name            | Value<br>|<br>+————————–+—————————————————-<br>+<br>| character_set_client     | gbk<br>|<br>| character_set_connection | gbk<br>|<br>| character_set_database   | utf8<br>|<br>| character_set_filesystem | binary<br>|<br>| character_set_results    | gbk<br>|<br>| character_set_server     | utf8<br>|<br>| character_set_system     | utf8<br>|<br>| character_sets_dir       | E:\Soft\wamp\bin\mysql\mysql5.6.12\share\charsets\<br>|<br>+————————–+—————————————————-</pre><br>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>发现中文显示为“？”，然后我看了一下 mysql.ini，添加了两行</p>
<p><pre class="lang:mysql decode:true">[mysqld]<br>port=3306</pre></p>
<p>#下面的两行是添加的<br>character_]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="中文乱码" scheme="http://ochukai.github.io/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改 wamp 中 mysql 默认空密码]]></title>
    <link href="http://ochukai.github.io/modify-wamp-mysql-password/"/>
    <id>http://ochukai.github.io/modify-wamp-mysql-password/</id>
    <published>2015-07-31T15:32:13.000Z</published>
    <updated>2015-11-07T15:22:59.603Z</updated>
    <content type="html"><![CDATA[<p><pre class="lang:mysql decode:true ">use mysql</pre></p>
<p>update user set password=PASSWORD(‘hooray’) where user=’root’;</p>
<p>flush privileges;<br>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><pre class="lang:mysql decode:true ">use mysql</pre></p>
<p>update user set password=PASSWORD(‘hooray’) where user=’root’;</p>
<p>flush p]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="paswword" scheme="http://ochukai.github.io/tags/paswword/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在网络暴力中捍卫自己]]></title>
    <link href="http://ochukai.github.io/protect-yourself/"/>
    <id>http://ochukai.github.io/protect-yourself/</id>
    <published>2015-07-10T13:52:53.000Z</published>
    <updated>2015-11-07T15:38:46.000Z</updated>
    <content type="html"><![CDATA[<p># </p>
<p>我想先问大家一个问题，有谁一年365，天天被未曾谋面的陌生人骂?举手的这个人就站在你们面前。不过别担心，我今天不是来诉苦的，我是穿着马甲来跟大家分享如何被骂大的。</p>
<p>网络对于我们来说再日常不过，但是当你身处网络世界的围攻中，就不再那么轻松。2013年的以前，我作梦也想不到自己会变成网络世界里的“黑姑娘”。因为参演了一部电视剧，演技没有达到观众的预期，故事的结局不尽人意，而被推到了风口浪尖，让我从一个还在摸爬滚打的小演员，一夜之间变成了被大家声讨的“热门人物”。</p>
<p>震惊之余，让自己尽快从虚拟的世界中挣脱出来是我唯一的出路。我选择在网络声中被倒下，就在网络声中爬起来。有不少人认为，公众人物就应该具有强大的承受能力和耐力，打不还手，骂不还口。偶尔被坑蒙拐骗了，还要尽量先捂着不敢报警。</p>
<p>当我被骂得小有名气的时候，我就暗自思量。反正也挨骂，不如用最积极的方式迎接骂声。2013年3月3日，我在微博上发出了一条名为“爱的骂骂”的微博，既然大家那么需要宣泄，点击鼠标可以不用负责，那我也动动手指头，干点什么吧！</p>
<p>我在微博里面制定了骂的规则——骂，没问题，但请集中精力地骂。只要在我这条微博下面留言的，不管是鼓励我的、骂我的，还是随便说说的，我都认捐五毛。24个小时，有十万多条留言，捐款金额是50693.5元，作为北京一家残疾孤儿康复机构的手术费。</p>
<p>在这里，我要对每一位留言的人表示感谢。因为我们一起在虚拟的世界中救助了4个在现实生活中顽强生活着的残疾孤儿。其中有一个孩子，在手术后的那一年，终于有机会可以站起来了。那时候她还不满三岁。当我看到她第一次站起来，我很感动，也很骄傲，这个“黑姑娘”干了一件痛快的事。</p>
<p>是的，我说出了金额。我知道，一定会有人说“捐那么少，还好意思报数”。我相信现在大部分人都不愿意公布捐款金额，因为捐款已经不再是一件随心的行动，而是成为大家根据金额的多少来衡量爱心的大小。我相信在座的各位也一定有过朋友之间随份子该给多少才合适的烦恼。我之所以说出来，不仅仅是因为我不觉得随性的行为需要躲闪，更因为“爱的骂骂”是每一个留言人的镜子。当时骂过我的人，也许，在两年后的今天听到我说的这番话，会想起曾经不太善意的留言却给了这些孩子们机会获得新生。这同样值得高兴。</p>
<p>其实我们每个人都有不同阶段的新生，不是吗?“爱的骂骂”发出的那一刻，我如重生般释然了。虽然，我不像很多演员那样，拥有令人赞叹的表演才华，自己也觉得不是天生吃这碗饭的，但是既然选择了演员这份职业，我相信只要通过自己的努力和善待他人，就可以让自己的家人和自己过上幸福美满的生活。</p>
<p>然而这一切，在2013年的夏天被一句开创演艺界(网络)暴力先河的“滚出娱乐圈”所动摇。我是第一个(被)放在主语位置的人。袁姗姗这个名字好像从此就和“一无是处”划上了等号。那个时候，不管说什么、做什么、演什么都不对。更有媒体总结了“袁姗姗不被观众所喜欢的五大理由”，第一条理由是“没有理由”。这是得有多深厚的感情基础，才能达到的境界。</p>
<p>2013年确实挺让人操心的，从春天到夏天都没有平静过。一开始，我也有些懊恼，不知道到底发生了什么。我既然没有不劳而获，也没有做过伤天害理的事。为什么让我“滚”?!没多久，我想明白了一个道理，谁都可以说我不好，但是自己必须接纳那个心安理得的自己。既然我的演艺生涯要倒数开始，那我之后的每一点进步都是充满喜悦的。从零分到六十分比从满分到六十分，哪个更让人开心呢?</p>
<p>也是从那个时候，我重拾扔下了多年的小提琴，还有健身。运动让我心情愉悦。不工作的时候，练琴和健身会让我的每一天都过得很充实，根本没有过多的时间停留在网上，更顾不上网友的围观。我建议那些沉迷于网络的年轻人，每天可以挤出一点时间锻炼身体。当有朝一日被他人欺负的时候，至少可以像我一样，身轻如燕，自由翻滚。</p>
<p>不尽人意的2013年确实过得有些艰辛，但是我也时刻提醒着自己，别忘了尽可能给予所能达到的人以温暖。这是对鼓励过你的人最好的感激方式。但同时，我们也不要忽略身边朋友向你发出的求助信号。也许你的关心会改变他的决定。</p>
<p>我在来之前了解到几个数据。在美国，有40%的年轻人遭遇过网络欺凌侵害，甚至有些受害者因此而患上精神疾病，身心受损。联合国儿童基金会在2014年的9月发布了一则消息报道，在法国，6到18岁之间的青少年有12.5%的人都有过在网上被攻击的经历。在中国，因为网络暴力而结束生命的人，离我们的生活越来越近。</p>
<p>前不久，在台湾，有一位艺人因为网络暴力而自杀。听到这个消息的时候，我非常惋惜。我不知道她内心到底挣扎了多久。但当我看到这则新闻的时候，我有过一念之间的不安。如果在这之前，我可以跟她说几句话，她是不是好过一些?</p>
<p>互联网的时代，让人与人之间的沟通方式越来越便捷，沟通成本却越来越大。足不出户在网上匿名可以干很多事，每天都要面对接踵而来的海量信息，有谁还愿意费力去核实消息的真实性，也不会有太多人会为自己发出或转发的信息而深思熟虑。那还有多少人会为他人的生命叹息呢?</p>
<p>语言不应该成为致命的利器。网络的诞生也不应该是为了制造困扰，而是为了让生活变得更加美好。作为过去也许将来还会遭遇网络暴力的过来人，我不希望再有人因为网络暴力而受到伤害。请善用语言，让人言可敬。</p>
<p>特别感谢在那段特殊时间陪伴我的家人和朋友，感谢他们承受住了一个当时还没有来得及减肥、各方面份量都很重的我。经历了这些，并不是想说明自己有多强大，但确实因为这些切身经历让我有了足够的时间去思考。我曾经问过自己一个问题——如果我当时真的不堪重负放弃了演员这个职业，是否网络暴力就会消失？答案当然不会。既然还是要面对，就应该积极面对。</p>
<p>前不久，我参与了一部公益电影的拍摄。电影传递了一个非常积极的理念：每个人都有自由选择的机会和权利，无论你生下来是幸运的还是不幸的。我非常赞同，所以我选择做一个积极快乐的自己，不再受控于网络暴力中，不再只能看到消极的一面。</p>
<p>都说做公益是在帮助他人，在我身上，成全了一个更加快乐的自己。不知道大家有没有看过这部电影。电影的名字叫《有一天》。我想在这里特别推荐一下。虽然我只参演了电影的一部分，但也给我带来了很多启发和感动。这部电影关注了九类特殊儿童群体。我参与拍摄的故事和聋哑儿童有关。跟我一起搭档演出的也是一名聋哑儿童。拍摄之前，我还有些顾虑，我不知道该怎么去跟他交流，我担心会因为自己不小心的举动伤害到他。但是见面之后，我才发现成年人的世界真的是因为想太多了变得复杂。只要我们保持一颗平常的心，用平等的方式去交流，就不会存在特别的障碍。重要的是你怎么看，而不是他怎么想。</p>
<p>拍摄的那几天，我平静而快乐。每当完成一个镜头，这个小少年都会跟我竖起大拇指示意。他这个小小的举动也提醒了我和我们，有人选择赞美有人则不。</p>
<p>感谢“爱的骂骂”，感谢《有一天》，感谢喝倒彩时刻提醒我的人，感谢一直鼓励我的家人和朋友，感谢倔强中的那个自己。我希望能有更多的人可以像我一样，主动地从逆境中走出来。这个世界还有很多需要我们关心的事去做，需要我们关心的人去爱。保持自己的真实，倔强地活下去。</p>
<p>感谢大家的聆听，感谢网络世界将我带到你们面前。</p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p># </p>
<p>我想先问大家一个问题，有谁一年365，天天被未曾谋面的陌生人骂?举手的这个人就站在你们面前。不过别担心，我今天不是来诉苦的，我是穿着马甲来跟大家分享如何被骂大的。</p>
<p>网络对于我们来说再日常不过，但是当你身处网络世界的围攻中，就不再那么轻松。2]]>
    </summary>
    
      <category term="tedx" scheme="http://ochukai.github.io/tags/tedx/"/>
    
      <category term="在网络暴力中捍卫自己" scheme="http://ochukai.github.io/tags/%E5%9C%A8%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B%E4%B8%AD%E6%8D%8D%E5%8D%AB%E8%87%AA%E5%B7%B1/"/>
    
      <category term="演讲稿" scheme="http://ochukai.github.io/tags/%E6%BC%94%E8%AE%B2%E7%A8%BF/"/>
    
      <category term="袁姗姗" scheme="http://ochukai.github.io/tags/%E8%A2%81%E5%A7%97%E5%A7%97/"/>
    
      <category term="生活杂记" scheme="http://ochukai.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[京儿项目总结与展望]]></title>
    <link href="http://ochukai.github.io/jinge-summary-and-expect/"/>
    <id>http://ochukai.github.io/jinge-summary-and-expect/</id>
    <published>2015-03-10T13:22:40.000Z</published>
    <updated>2015-11-07T15:22:59.595Z</updated>
    <content type="html"><![CDATA[<p>去年，也就是 2014 年的 12-14 日，我写下了第一篇关于 jinger 的博客。时间已经过去 86 天，近乎 3 个月的时间了，我却仅仅做了这么一点点东西，自己想起来都觉会咬牙切齿，没错，咬牙切齿是我最近常有的状态，再加上眉头紧锁，捶胸顿足等。</p>
<p>虽然做得少，但也不是没做出东西，现在总结一下，希望能填补一下心灵的空缺，同时也可以激励一下自己。从去年五月份出院后整个人都不好了，再加上需要养病，慢慢养成了懈怠的习惯，每次做不好事情都会有理由，“因为我有病。”</p>
<hr>
<p>上次写了一半，最近经常会把事情做一半然后不了了之了，这种习惯很不好!!!</p>
<p>事情做到一半经常会断了思路（这里一半是数词，做事情的任何时候思路都会中断），无法高效的继续，我个人很讨厌这种感觉。这时容易分心做一些别的事情，比如正在写代码，突然不会写了，会上网查资料，网页上面又有各种各样的信息，稍微手贱就可能走上不归路，而在浏览的过程中随时也都有可能就网页上的信息联想起自己曾经想要尝试但是一直憋在心里的事情，看到 ghost 发布了新版本，咦~ 我的还是旧版的呢，于是我就想要更新一下，什么~npm也要更新，去官网看看更新了什么内容了吧， アレ‐　这里有一个 package 排行榜，看看有没有我需要的吧<del>~</del>~ 于是我彻底走远了！！！</p>
<p>这是一种什么心理呢？ 猎奇，喜新厌旧，注意力不集中，肾虚？ 好可怕~~ 当我们做一件事情做不下去了的时候，新的事情肯定会更容易被我们接受，更容易开始。我在写博客写不下去的时候可能随时都会打开一个新 tab 进入淘宝，然后开始一次愉快的购物旅程，然后这一篇就会等到周末再发布了！</p>
<p>我们务必时时注意自己当前的想法及行为（推荐一本书《当下的力量》），我要做什么，我正在做什么，距离目标还有多远 ? 我们要活在当下，过去的事情已经不存在，将来的事情还没有发生。不知道为什么我突然想起这句话，但<strong>对当下保持觉知是高效工作的一个好办法!!! </strong>突然想到前几天在知乎上面看到的一个问题，题主表示很迷茫，没有方向，很羡慕别人，然后有一个回答：你羡慕别人什么，你与他相比还有多少差距？ 这个回答深深的刺激了我，戳穿了盲目的恐惧，也量化了恐惧。看到了差距，量化了差距，就相当于有了目标，整个人都有劲了。</p>
<h2 id="京儿的总结">京儿的总结</h2><h4 id="我要做什么">我要做什么</h4><p>京儿项目是我第好几个 node 项目，但与之前de项目不同的地方在于这个是给别人做的，也什么时间要求，很宽松，这也导致我效率很低。这个项目是用来展示产品和宣传公司的，这跟大部分的企业类网站类似，除此之外我还想加入商城的功能。</p>
<h4 id="我正在做什么">我正在做什么</h4><p>京儿项目至今，我写了后台管理，各种增删改查，登陆注销。</p>
<ul>
<li>后台：node + express + mysql</li>
<li>前台：angular + angular-bootstrap<br>真的算是很简陋的项目了，但是我却做的并不是那么得心应手，时间不足，下班回家累的跟狗似的，几乎不想继续写代码了。编码的过程中加入了一些我新接触的概念，比如基于 token 的登陆验证模式，angular-resource 的运用， angular-directive等，都是边学边用，很慢~~哦， angular是我新学的啦，但是却有一种老相识的感觉。</li>
</ul>
<h4 id="距离目标还有多远_?">距离目标还有多远 ?</h4><p>还差一个前台！！！</p>
<p>现在后台主页每次都会加载几十个 js，我没有加上 cdn，代码没有加 ut，没有自动打包。</p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>去年，也就是 2014 年的 12-14 日，我写下了第一篇关于 jinger 的博客。时间已经过去 86 天，近乎 3 个月的时间了，我却仅仅做了这么一点点东西，自己想起来都觉会咬牙切齿，没错，咬牙切齿是我最近常有的状态，再加上眉头紧锁，捶胸顿足等。</p>
<p>虽然做]]>
    </summary>
    
      <category term="angular" scheme="http://ochukai.github.io/tags/angular/"/>
    
      <category term="expressjs" scheme="http://ochukai.github.io/tags/expressjs/"/>
    
      <category term="jinger" scheme="http://ochukai.github.io/tags/jinger/"/>
    
      <category term="node" scheme="http://ochukai.github.io/tags/node/"/>
    
      <category term="angularjs" scheme="http://ochukai.github.io/categories/angularjs/"/>
    
      <category term="生活杂记" scheme="http://ochukai.github.io/categories/angularjs/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS: Service 与 Factory 的对比]]></title>
    <link href="http://ochukai.github.io/angularjs-service-vs-factory/"/>
    <id>http://ochukai.github.io/angularjs-service-vs-factory/</id>
    <published>2015-01-06T15:01:48.000Z</published>
    <updated>2015-11-07T15:22:59.596Z</updated>
    <content type="html"><![CDATA[<p>在很多 AngularJS 的教程和文档里面，作者都会使用 <strong>service</strong> 或者 <strong>factory</strong>，但他们从来都不会解释为什么使用 <strong>service</strong> 或者 <strong>facotry</strong>，虽然 <strong>value</strong> 和 <strong>constant</strong> 用的不多但也有这种现象（Few mention that <strong><code>value</code> </strong>and <strong><code>constant</code></strong> are also options.）。</p>
<p>让我们来看一下为什么，当然我们需要先了解一下 <strong>provider.</strong></p>
<h2 id="provider">provider</h2><p>这是定义 provider 方法的源代码：</p>
<pre class="lang:js decode:true ">function provider(name, provider_) {
    if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
        throw Error('Provider ' + name + ' must define $get factory method.');
    }
    return providerCache[name + providerSuffix] = provider_;
}</pre>
其中，**name** 是一个字符串， **provider_** 可以是一下三种之一：

*   函数（function）

如果传入一个函数作为一个参数，这个函数会被注入（the function is called with [dependency injection](http://docs.angularjs.org/guide/di)）然后返回一个具有 $get 方法的对象。

*   数组（array）

数组会被解释成为行内注解（[Inline Annotation](http://docs.angularjs.org/guide/di)），它也必须返回一个具有 $get 方法的对象。

*   对象（object）

这个对象必须具有 $get 方法。

所以不管第二个参数传入的是什么，你都会得到一个具有 $get 方法的对象。这里有一个例子：
<pre class="lang:js decode:true">// Create a module
var hippo = angular.module('hippo', []);

// Register an object provider
hippo.provider('awesome', {
    $get: function() {
        return 'awesome data';
    }
});

// Get the injector (this happens behind the scenes in angular apps)
var injector = angular.injector(['hippo', 'ng']);

// Call a function with dependency injection
injector.invoke(function(awesome) {
    console.log('awesome == ' + awesome);
});</pre>
一旦你明白了 **provider** 是什么，你就知道 **`factory`**，**`service`**，**`value`** 和 **`constant `**`只不过是生成 **provider** 的简单方法。`

## factory

这是 factory 的源代码：
<pre class="lang:js decode:true">function factory(name, factoryFn) {
    return provider(name, { $get: factoryFn });
}
</pre>
所以可以把 awesome 写成这样：
<pre class="lang:js decode:true">hippo.factory('awesome', function() {
    return 'awesome data';
});</pre>

<h2 id="service">service</h2><p>这是 service 的源代码：</p>
<pre class="lang:js decode:true">function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
        return $injector.instantiate(constructor);
    }]);
}</pre>
所以，service 允许我们使用创建类的方式写对象，像这样：
<pre class="lang:js decode:true ">function Gandalf() {
    this.color = 'grey';
}

Gandalf.prototype.comeBack = function() {
    this.color = 'white';
}

var gandalf = angular.module('gandalf', []);
gandalf.service('gandalfService', Gandalf);

var injector = angular.injector(['gandalf', 'ng']);
injector.invoke(function(gandalfService) {
    console.log(gandalfService.color);
    gandalfService.comeBack()
    console.log(gandalfService.color);
});</pre>
上面的代码会实例化 **Gandalf**，但是要记住：所有使用这个 **gandalfService** 的地方得到的都是同一个对象，也就是说 **service 是单例**的。

## value

这是 value  的源代码：
<pre class="lang:js decode:true ">function value(name, value) {
    return factory(name, valueFn(value));
}</pre>
使用 value 的方式，会使你把 awesome 写的更短。
<pre class="lang:js decode:true">hippo.value('awesome', 'awesome data');</pre>

<h2 id="contant">contant</h2><p>这是 contant 的源代码：</p>
<p><pre class="lang:js decode:true">function constant(name, value) {<br>    providerCache[name] = value;<br>    instanceCache[name] = value;<br>}</pre><br><strong>contant </strong>与 <strong>value</strong> 不同的地方是它可以在 <strong>config</strong> 方法中被使用，像这样：</p>
<p><pre class="lang:js decode:true ">var joe = angular.module(‘joe’, []);</pre></p>
<p>joe.constant(‘bobTheConstant’, ‘a value’);</p>
<p>joe.value(‘samTheValue’, ‘a different value’);</p>
<p>joe.config(function(bobTheConstant) {<br>    console.log(bobTheConstant);<br>});</p>
<p>joe.config(function(samTheValue) {<br>    console.log(samTheValue);<br>});</p>
<p>// This will fail with “Error: Unknown provider: samTheValue from joe”<br>var injector = angular.injector([‘joe’, ‘ng’]);</p>
<blockquote>
<p>Read Module Loading &amp; Dependencies in <a href="http://docs.angularjs.org/guide/module" target="_blank" rel="external">the Modules doc</a> for more information on usage.</p>
</blockquote>
<h2 id="总结">总结</h2><blockquote>
<p>If you want your function to be called like a normal function, use <code>factory</code> . If you want your function to be instantiated with the <code>new</code> operator, use <code>service</code> . If you don’t know the difference, use <code>factory</code> .<br>如果你想让你写的函数访问起来像正常的函数，使用 <strong>factory</strong>方法，如果你想让你写的函数被 <strong>使用 new 实例化后</strong>（当然不是自己 new，被 angular 注入后的对象已经是实例化之后的了，可以直接使用）使用，那么你用 <strong>service </strong>方法。如果你不知道有什么区别，那就是用 <strong>factory</strong> 方法。</p>
</blockquote>
<p>下面是官方文档中的介绍：</p>
<blockquote>
<p>This is the (great) documentation for each function in the AngularJS source:</p>
<ul>
<li><code>factory</code></li>
</ul>
<p>A short hand for configuring services if only <code>$get</code> method is required.</p>
<ul>
<li><code>service</code></li>
</ul>
<p>A short hand for registering service of given class.</p>
<ul>
<li><code>value</code></li>
</ul>
<p>A short hand for configuring services if the <code>$get</code> method is a constant.</p>
<ul>
<li><code>constant</code></li>
</ul>
<p>A constant value, but unlike {@link AUTO.$provide#value value} it can be injected into configuration function (other modules) and it is not interceptable by {@link AUTO.$provide#decorator decorator}.<br><strong>第一次翻译别人的作品。</strong><br>原文链接：<a href="http://iffycan.blogspot.com/2013/05/angular-service-or-factory.html" target="_blank" rel="external">http://iffycan.blogspot.com/2013/05/angular-service-or-factory.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在很多 AngularJS 的教程和文档里面，作者都会使用 <strong>service</strong> 或者 <strong>factory</strong>，但他们从来都不会解释为什么使用 <strong>service</strong> 或者 <strong>fa]]>
    </summary>
    
      <category term="angular" scheme="http://ochukai.github.io/tags/angular/"/>
    
      <category term="翻译" scheme="http://ochukai.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="angularjs" scheme="http://ochukai.github.io/categories/angularjs/"/>
    
      <category term="翻译" scheme="http://ochukai.github.io/categories/angularjs/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Project with Nodejs and Expressjs - san]]></title>
    <link href="http://ochukai.github.io/new-project-with-nodejs-and-expressjs-san/"/>
    <id>http://ochukai.github.io/new-project-with-nodejs-and-expressjs-san/</id>
    <published>2015-01-03T05:03:26.000Z</published>
    <updated>2015-11-07T15:22:59.593Z</updated>
    <content type="html"><![CDATA[<p>窗外阳光明媚，冬风和煦，路上行人点点，车流不息，我站在屋内，手中拿着旺旺（或旺仔）雪饼，嘴里嚼着，很脆。阳光洒在我的脸上，身上，很温暖。我肆意的享受着只有不开窗户才能体会到的冬天的温暖。</p>
<p>我忽而想起了前天晚上，也就是元旦跨年夜，发生在外滩的踩踏事件，今天官方发布了死亡名单，都是一些年轻人葬身于此，大概只有年轻人才会在跨年夜去外滩凑热闹，看灯光表演吧。我在那一天可是早早的就被同事叫过去吃饭了，并且打保皇到凌晨4点。看到名单的时候其实我是很有感触的，好多人都比我小一两岁，也有跟我同岁的，他们已经死了，死在我曾经去过并且同样抱怨过人多的地方，真的我都不知道该用什么词语去描绘我的心情。他们死了，我还活着，他们还没有来的及体会这世间的险恶与美好。</p>
<p>上一篇记录了我使用 angular 和 bootstrap 等框架搭建了一个后台，然后使用 bower 解决了前端依赖太多以及依赖版本控制的问题，一切都进行的非常顺利。</p>
<p>最近这一周可谓轻松，因为元旦放假了三天，只上班三天，不过下一周就要工作6天了。现在我就记录一下休息的前两天我做了什么。</p>
<hr>
<ul>
<li>把项目放到了 github  上：<a href="https://github.com/xiaoyee/jinger" target="_blank" rel="external">Jinger</a></li>
<li>完成了后台管理员的登陆和注册</li>
<li>完成了我的第一个 angular 的 directive， 可以根据当前登录用户显示其对应的菜单</li>
</ul>
<hr>
<h2 id="登陆和注册">登陆和注册</h2><p>登陆和注册是网站最最基本的两个功能，还可以加上忘记密码。</p>
<p>传统思维的登陆可以总结为： 输入用户名/密码 - 提交 - 服务器接收验证 - <strong>服务器保存到 session</strong> - 前台提示登陆成功，这是大部分网站使用的方式，没有什么不好，但是现在有了好多种客户端，包括手机，平板上的 app 等，他们是不支持 session/cookie 的，所以现在好多服务器端采用 token 的方式保存登陆用户。</p>
<p>基于 token 的登陆方式，这里有一篇文章我认为翻译的很好，而且我就是通过这一篇文章才理解这一种方式的：<a href="http://zhuanlan.zhihu.com/FrontendMagazine/19920223" target="_blank" rel="external">使用 AngularJS &amp; NodeJS 实现基于 token 的认证应用</a>。</p>
<blockquote>
<ol>
<li>用户在登录表单中输入 <strong>用户名</strong> 和 <strong>密码</strong> ，然后点击 <strong>登录</strong> ；</li>
<li>请求发送之后，通过在后端查询数据库验证用户的合法性。如果请求有效，使用在数据库得到的信息创建一个 token，然后在响应头信息中返回这个的信息，目的是把这个 token 存储到浏览器的本地存储中；</li>
<li>在每次发送访问应用中受限制的后端服务器的请求时提供 token 信息；</li>
<li>如果从请求头信息中拿到的 token 有效，允许用户访问受限制的后端服务器，并且返回 JSON 或者 XML。<br>虽然我的的网站暂时没有需要做成app的打算但是我很喜欢这种方式，所以我把登陆和注册按照这种方式写了。</li>
</ol>
</blockquote>
<h3 id="数据库设计">数据库设计</h3><p>users 表的建表语句如下，增加了 token 这一列，这也是可以用来唯一确定这一个 user 的列。</p>
<pre class="lang:mysql decode:true">CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `token` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_user_token` (`token`),
  UNIQUE KEY `index_user_username` (`username`)
)</pre>
之前不了解这一种登录方式的时候以为 token 是可以变得，我以为每一次在没有保存 token 的地方登陆都要新生成一个的 token，而生成 token 的时候需要的 salt 也是随机的，把每次生成的 token 都保存起来，设计成一对多的表，每次登陆前检查一下是否在保存了 token ，这样也可以起到记住密码的作用，不过随着登录次数和登陆场所的增多，token 也就会变得更多，会很混乱。

一个 user 对应多个 token 的方式我有点 hold 不住，暂时采用一对一的方式。

### 数据库访问过程

<pre class="lang:js decode:true  ">User.prototype.login = function (username, password) {

    var columns = ['id', 'username', 'password', 'token'],
        sql     = 'select ?? from ?? where username = ?';

    return db.query(sql, [columns, this.tableName, username])
        .then(function (rows) {
            if (rows &amp;&amp; rows.length &gt; 0) {
                var user = rows[0];
                if (user.password == password) {
                    delete user.password;
                    return user;
                }
            }
        });

};</pre>
用户登录的时候会传递用户名和密码到服务端，其实这里的方式也可以分两步

1.  验证用户名和密码
2.  根据验证成功的用户 id 取出其对应的 token
而我觉得这样需要访问两次数据库而且逻辑上变复杂了，我脑容量有限，喜欢一步到位。取出所有，密码正确的话返回当前用户信息。

### express

<pre class="lang:js decode:true ">/*
 * User login.
 */
router.post('/signin', function (req, res) {

    // retrieve username and password.
    var username = req.body.username;
    var password = req.body.password;

    mUser
        .login(username, cryptor.md5(password))
        .delay(1000)
        .then(function (result) {
            if (result) {
                result.success = true;
                res.json(result);
                return;
            }

            res.json({
                success: false
            });
        });
});</pre>
delay(1000) 是因为我喜欢看提交请求后屏幕最上方的 loading-bar 的效果，很爽。

### 登录页面

略

### angular的操作

前端使用了 angular 之后，也分出了 controller 与 service，使用 service 是为了解决不同 controller 不同 scope 具有相同逻辑操作的问题。
<pre class="lang:xhtml decode:true ">&lt;form class="form-signin" role="form" ng-submit="login()"&gt;
    &lt;input type="text" class="form-control" placeholder="用户名" required autofocus ng-model="username"&gt;
    &lt;input type="password" class="form-control" placeholder="密码" required ng-model="password"&gt;
    &lt;div class="checkbox"&gt;
        &lt;label&gt;
            &lt;input type="checkbox" value="remember-me" ng-model="rememberMe"&gt;记住密码
        &lt;/label&gt;
    &lt;/div&gt;
    &lt;button class="btn btn-lg btn-primary btn-block" type="submit"&gt;确认登陆&lt;/button&gt;
&lt;/form&gt;</pre>

<ul>
<li>ng-model 是angular 的一个自带的 directive ，angular 会在当前 scope 新建一个变量 username，当 input 的 value 改变时，username 的值会跟着改变，password 也是如此。而且 username 的值改变的话，页面上也会实时显示它的值，这应该叫做双向绑定吧。</li>
<li><p>ng-submit 也是一个 directive，当我们点击提交表单时会执行 login() 函数。<br><pre class="lang:default decode:true">$scope.login = function () {<br>var rememberMe = $scope.rememberMe,</pre></p>
<pre><code>formData = {
    username: <span class="variable">$scope</span>.username,
    password: <span class="variable">$scope</span>.password
};
</code></pre><p>LoginService</p>
<pre><code>.login(formData)
.success(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>{
    <span class="keyword">if</span> (res.success) {
        <span class="comment">// save the successful user when logged successfully.</span>
        store.<span class="keyword">set</span>(<span class="string">'token'</span>, res.token);
        <span class="comment">// redirect to /me.</span>
        $location.path(<span class="string">'/me'</span>);
    }
});
</code></pre><p>};</p>
</li>
</ul>
<p>// ——————————————————-</p>
<p>app.factory(‘LoginService’, [‘$http’,<br>    function ($http) {<br>        return {<br>            regist: function (data) {<br>                return $http.post(baseUrl + ‘/signup’, data);<br>            },<br>            login: function (data) {<br>                return $http.post(baseUrl + ‘/signin’, data);<br>            }<br>        };<br>    }]);<br>在 controller 里面把用户输入的用户名密码发送到服务器，如果服务器正常返回的话，把返回的 token 保存到浏览器的 localStorage ，其实在这个过程中 rememberMe 还没有起到作用，好像选不选择都会记住，如果不记住（不保存 token 到 localStorage）的话页面的访问都会是个问题，因为每次请求都需要带上 token 的值。要想取消保存的 token 只能在 logout 的时候删掉 localStorage 中的token。</p>
<pre class="lang:js decode:true">$httpProvider.interceptors
    .push(['$q', '$location', 'store',
        function ($q, $location, store) {
            return {
                'request': function (config) {
                    config.headers = config.headers || {};
                    var token = store.get('token');
                    if (token) {
                        config.headers.Authorization = 'Bearer ' + token;
                    }
                    return config;
                },
                'responseError': function (response) {
                    if (response.status === 401 || response.status === 403) {
                        $location.path('/login');
                    }
                    return $q.reject(response);
                }
            };
        }]);
    }]);</pre>
> 在应用的注册或者登录部分，不记名 token 响应了这个请求并且这个 token 被存储到本地存储中。当你向后端请求一个服务时，你需要把这个 token 放在头部中。你可以使用 AngularJS 的拦截器实现这个。
> 
> 
> 在上面的代码中，每次请求都会被拦截并且会把 token 的值放到头部中。
这在登陆之后向服务器端发送请求会很方便。
<pre class="lang:default decode:true">function ensureAuthorized(req, res, next) {
    var bearerToken;
    var bearerHeader = req.headers["authorization"];

    if (typeof bearerHeader !== 'undefined') {
        var bearer = bearerHeader.split(" ");
        bearerToken = bearer[1];
        req.token = bearerToken;
        next();
    } else {
        res.send(403).end();
    }
}

// ----------------------------------------------------
// in app.js
app.use('/admin', authorizer, dashboard);</pre>
服务器端每次处理请求的时候会自动按照以上规则，如果是属于 **/admin** 请求，会执行 authorizer 这个 middleware，其他请求 url 则不会。

注册的话就很简单了，只是要处理用户名是否存在的问题。

以上。

## admin-sider

angular 的 directive 是挺方便的一个东西。可以定义为 element， attribute，class， comment 四种格式，有点像 java 的自定义 tag。把一个前端组件封装成一个 directive 是一个不错的选择，至少我是这么认为的，比如我的 admin-sider。关于 directive 的知识可以参考这一篇博客 [Angular Directive](http://inching.org/2014/09/24/angular-directive/)。

admin-sider 是一个侧边菜单。根据登录用户的不同，会显示不同的菜单项。
<pre class="line-height:20 lang:js decode:true  ">var app = angular.module('myApp');
app.directive("adminSider", ['$rootScope', 'store',
    function ($rootScope, store) {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: '/tpl/sider.html',
            link: function ($scope, $elem, $attrs) {
                var menus = store.get('menus');
                if(typeof menus != 'undefined' &amp;&amp; menus != null){
                    $rootScope.menus = menus;
                    $rootScope.isRetriveMenus = true;
                }
            }
        };
    }]);</pre>
其中

*   restrict 限制了这个 directive 的形式，可以有四个值，A-attribute，E-element，C-class， M-comment
*   replace 默认为 false，是否替换元标签，false 的话会保留，然后插入到里面，比如：**&lt;hello&gt;&lt;/hello&gt;** --&gt; **&lt;hello&gt;_&lt;a href='#'&gt;&lt;/a&gt;_&lt;/hello&gt;**；如果为 true，则表示替换：**&lt;hello&gt;&lt;/hello&gt;** --&gt; _**&lt;a href='#'&gt;&lt;/a&gt;**_
*   template/templateUrl 指定模板或者模板文件。`template` 用于 templete 内容比较少的情况，更多的情况下你可能会见到 `templateUrl`。
*   link 和 compile 的属性比较复杂。**待续！**
*   关于名字 adminSider 虽然是 camelCase，但是在网页里面可以这样用：&lt;admin-sider&gt;&lt;/admin-sider&gt;，绝对不可以写成&lt;admin-sider/&gt;（这样会被解析成A）。

### directive 的生命周期

当应用启动时，Angular 开始使用 **$compile** 服务遍历 DOM 元素，试图使用注册过的指令列表来匹配每个元素、属性、注释、CSS 类，一旦匹配成功，AngularJS 调用相应指令的 compile 函数，这个 compile 函数返回一个 link 函数，被添加到稍后执行的 link 函数列表中。作用域在编译阶段还没有准备好，在编译阶段还不能使用作用域中数据。

要注意的是 compile 函数不能访问 scope，并且必须返回一个 link 函数。只能在链接函数中使用 DOM，因为在编译函数中可能移除或复制元素。如果没有设置 compile 函数，你可以正常地配置 link 函数，**有了compile，就不能有 link，link 函数由 compile 函数返回**。

一旦所有的指令编译完成便进入链接阶段。在这个阶段，作用域已准备就绪，所有收集的 link 函数将被一一执行。指令创造出来的模板会在正确的 scope 下被解析和处理，然后返回具有事件响应的真实的 DOM 节点。

指令的 link 函数主要用来为 DOM 元素添加事件监听、监视模型属性变化、以及更新 DOM。我们可以在 link 函数中访问指令的 scope。

大多数的情况下，你只需要使用 link 函数。这是因为大部分的指令只需要考虑注册事件监听、监视模型、以及更新 DOM 等，这些都可以在 link 函数中完成。凡是你使用 link 函数的地方，你都可以使用一个 pre 和 post 属性组成的对象，这两个属性分别表示前处理链接链接函数和后处理链接链接函数。默然情况下，链接函数指的是后处理链接函数.
<pre class="lang:js decode:true">link: function LinkFunction($scope, $element, $attributes) { ... }
//...
link: {
    // Pre-linking 是在所有子元素被链接之前执行，而 post-ling 是在所有子元素链接之后。
    // 只有在 post-link 函数中做 DOM 变换才是安全的。
    pre: function PreLinkFunction($scope, $element, $attributes) { ... },
    post: function PostLinkFunction($scope, $element, $attributes) { ... }
}</pre>

<h3 id="Transclusion">Transclusion</h3><p><strong>略！！！</strong></p>
<h3 id="admin-sider_的生命周期">admin-sider 的生命周期</h3><p><pre class="lang:xhtml decode:true">&lt;div id=”nav-sider” class=”nav-collapse”&gt;<br>    &lt;ul role=”navigation” class=”nav nav-pills nav-stacked”&gt;<br>        &lt;li ng-class=”{‘active’: menu.isActive}” ng-repeat=”menu in menus”&gt;<br>            &lt;a href=”#“&gt;  &lt;/a&gt;<br>        &lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/div&gt;</pre><br>adminSider 是用来显示菜单的，所以需要有一个菜单列表，而且用户登陆之前，登陆后，注销后之后的菜单列表是不一样的，所以菜单列表就不能保存在adminSider 的 scope 里面。经过我查询资料发现有一个 $rootScope 可供使用，这是一个全局的，单例的对象，每一次切换 view ，对应的 controller 的 $scope 会变化，但 $rootScope 不会，于是我想把菜单列表保存在 $rootScope 里面。</p>
<p>但是又出现了一个问题如果访问某一个页面的时候出现了卡顿，而用户不知道我是用 angular 写的网站，她点了一下刷新，那就毁了：菜单列表被清空了。这样还是不行，只能把菜单列表保存在 localStorage 了，这样就算刷新页面之后 $rootScope 里面没有了，还可以从 localStorage 里面取，而且如果需要销毁的话只需要随着 token 一起被删除就好了。</p>
<p><pre class="lang:js decode:true ">if (‘/me’ === currentUrl &amp;&amp; token) {<br>    // update menus<br>    menuService<br>        .myMenus()<br>        .success(function (res) {<br>            if (res.success) {<br>                var menus = res.menus;<br>                $rootScope.menus = menus;<br>                $rootScope.isRetriveMenus = true;<br>                // save in localStorage.<br>                store.set(‘menus’, $rootScope.menus);<br>            }<br>        });<br>}</pre><br>像上面的代码，获取到菜单列表后保存在 localStorage，每次刷新页面肯定会执行 admin-sider 的 link 函数, 如下可以直接从 localStorage 里面取。</p>
<p><pre class="lang:default decode:true ">link: function ($scope, $elem, $attrs) {<br>    var menus = store.get(‘menus’);<br>    if(typeof menus != ‘undefined’ &amp;&amp; menus != null){<br>        $rootScope.menus = menus;<br>        $rootScope.isRetriveMenus = true;<br>    }<br>}</pre><br>最重要的一点，admin-sider 中的 menus <strong>来源于 $rootScope.</strong></p>
<hr>
<p>今天写的有点长了，但是好多东西都表达不清楚。还需要多加练习，慢慢学会写 blog。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>窗外阳光明媚，冬风和煦，路上行人点点，车流不息，我站在屋内，手中拿着旺旺（或旺仔）雪饼，嘴里嚼着，很脆。阳光洒在我的脸上，身上，很温暖。我肆意的享受着只有不开窗户才能体会到的冬天的温暖。</p>
<p>我忽而想起了前天晚上，也就是元旦跨年夜，发生在外滩的踩踏事件，今天官方发]]>
    </summary>
    
      <category term="angular" scheme="http://ochukai.github.io/tags/angular/"/>
    
      <category term="directive" scheme="http://ochukai.github.io/tags/directive/"/>
    
      <category term="expressjs" scheme="http://ochukai.github.io/tags/expressjs/"/>
    
      <category term="jinger" scheme="http://ochukai.github.io/tags/jinger/"/>
    
      <category term="node" scheme="http://ochukai.github.io/tags/node/"/>
    
      <category term="token" scheme="http://ochukai.github.io/tags/token/"/>
    
      <category term="angularjs" scheme="http://ochukai.github.io/categories/angularjs/"/>
    
      <category term="node" scheme="http://ochukai.github.io/categories/angularjs/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Navicat 10.1.7 的注册码]]></title>
    <link href="http://ochukai.github.io/navicat-10-1-7-key/"/>
    <id>http://ochukai.github.io/navicat-10-1-7-key/</id>
    <published>2014-12-28T13:23:42.000Z</published>
    <updated>2015-11-07T15:22:59.590Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><span class="crayon-v">NAVN</span><span class="crayon-o">-</span><span class="crayon-v">LNXG</span><span class="crayon-o">-</span><span class="crayon-v">XHHX</span><span class="crayon-o">-</span><span class="crayon-cn">5NOO</span><br>名和组织随便写。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><span class="crayon-v">NAVN</span><span class="crayon-o">-</span><span class="crayon-v">LNXG</span><span class="crayon-o">-<]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="navicat" scheme="http://ochukai.github.io/tags/navicat/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 的几个特殊 SQL 语法]]></title>
    <link href="http://ochukai.github.io/mysql-special-sql-grammer/"/>
    <id>http://ochukai.github.io/mysql-special-sql-grammer/</id>
    <published>2014-12-28T13:08:13.000Z</published>
    <updated>2015-11-07T15:22:59.631Z</updated>
    <content type="html"><![CDATA[<p>使用了 node 的 mysql 的库，不是 ORM 只是原生的 SQL，名字是 <a href="https://github.com/felixge/node-mysql" target="_blank" rel="external"><strong>felixge/node-mysql </strong></a>，这个库不错，挺好用的，比如</p>
<p><pre class="lang:default decode:true">var userId  = 1;<br>var columns = [‘username’, ‘email’];<br>var sql     = ‘SELECT ?? FROM ?? WHERE id = ?’;</pre></p>
<p>var query = connection.query(sql, [columns, ‘users’, userId], function(err, results) {<br>    // …<br>});<br>亦可以这样</p>
<p><pre class="lang:default decode:true">var post  = {<br>    id   : 1,<br>    title: ‘Hello MySQL’<br>};</pre></p>
<p>var query = connection.query(‘INSERT INTO posts SET ?’, post, function(err, result) {<br>  // Neat!<br>});<br>console.log(query.sql); // INSERT INTO posts SET <code>id</code> = 1, <code>title</code> = ‘Hello MySQL’<br>上面都是 Readme.md 中的示例代码，但是看到</p>
<p><pre class="lang:default decode:true">INSERT INTO posts SET <code>id</code> = 1, <code>title</code> = ‘Hello MySQL’</pre><br>我发现这种用法我并没有见过，于是去官网看了下(<a href="http://dev.mysql.com/doc/refman/5.1/en/insert.html)，确实有这种用法我就放心了。" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.1/en/insert.html)，确实有这种用法我就放心了。</a></p>
<h2 id="INSERT_INTO_tablename_SET_*">INSERT INTO tablename SET <em>*</em></h2><p><pre class="lang:mysql decode:true">INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]<br>    [INTO] tbl_name<br>    SET col_name={expr | DEFAULT}, …<br>    [ ON DUPLICATE KEY UPDATE<br>      col_name=expr<br>        [, col_name=expr] … ]</pre><br>这样的写法有什么好处呢？</p>
<ul>
<li>传统方法将列名和列值分开了，在使用时，列名必须和列值的数量一致，而且分开后不容易对比</li>
<li>这种方法允许列名和列值成对出现和使用，不会出现顺序和数量不对应的情况</li>
<li>速度快<br>&nbsp;</li>
</ul>
<h2 id="REPLACE_INTO_tablename_SET_*">REPLACE INTO tablename SET <em>*</em></h2><p><pre class="lang:mysql decode:true ">REPLACE [LOW_PRIORITY | DELAYED]<br>    [INTO] tbl_name<br>    SET col_name={expr | DEFAULT}, …</pre><br>在看上面的 INSERT INTO 的时候看到了一句话：</p>
<blockquote>
<p>You can use <a href="http://dev.mysql.com/doc/refman/5.1/en/replace.html" title="13.2.7 REPLACE Syntax" target="_blank" rel="external"><code>REPLACE</code></a> instead of <a href="http://dev.mysql.com/doc/refman/5.1/en/insert.html" title="13.2.5 INSERT Syntax" target="_blank" rel="external"><code>INSERT</code></a> to overwrite old rows.<br>所以点进去一探究竟，REPLACE 与 INSERT 很相似。<br>只有一点例外，假如表中的一个旧记录与一个用于PRIMARY KEY或一个UNIQUE索引的新记录具有相同的值，则在新记录被插入之前，旧记录被删除。</p>
<p>注意，除非表有一个PRIMARY KEY或UNIQUE索引，否则，使用一个REPLACE语句没有意义。该 语句会与INSERT相同，因为没有索引被用于确定是否新行复制了其它的行。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用了 node 的 mysql 的库，不是 ORM 只是原生的 SQL，名字是 <a href="https://github.com/felixge/node-mysql" target="_blank" rel="external"><strong>felixge/n]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Project with Nodejs and Expressjs - ni]]></title>
    <link href="http://ochukai.github.io/new-project-with-nodejs-and-expressjs-ni/"/>
    <id>http://ochukai.github.io/new-project-with-nodejs-and-expressjs-ni/</id>
    <published>2014-12-27T09:12:05.000Z</published>
    <updated>2015-11-07T15:22:59.591Z</updated>
    <content type="html"><![CDATA[<p>上一篇记录了新装 node 以及新建 node web(express) 项目的过程，很潦草，只是记录了过程的一点点，而且当时新建项目的时候心态也不好，很着急，实际上手写的时候遇到了诸多问题，而且我本人也有选择困难症，经常会纠结到底用这个库还是那个库，还是自己写比较好呢，时间经常在这样的纠结中过去了，项目于是变得遥遥无期。距离上一篇博客已经过去了整整14天！</p>
<p>上一篇博客的晚上我思前想后，感觉用 bookshelf(orm) 的话，访问数据库这一部分不好控制，因为我自己的工作就是数据库的相关的，看不到自己写的格式优美的 sql 是不能容忍的。因为现在项目的重点还不是数据库部分，我也暂时没有过多写相关的代码，所以数据库的部分放在下一篇博客。</p>
<hr>
<p>最近使用 Bootstrap 写了一个后台管理的页面，如下：</p>
<p><a href="http://oyaoya-wordpress.stor.sinaapp.com/uploads/2014/12/QQ截图20141227160228.jpg" target="_blank" rel="external"><img src="http://oyaoya-wordpress.stor.sinaapp.com/uploads/2014/12/QQ截图20141227160228.jpg" alt="QQ截图20141227160228"></a></p>
<p>&nbsp;</p>
<p>这个管理页面可是耗费了我近一周的功夫，暂时认定他的功能比较完整了吧。它是有什么构成的呢？</p>
<ul>
<li>angular</li>
<li>bootstrap</li>
<li>jquery</li>
<li>angular-loading-bar</li>
<li>nav.js<br>我打算用 bootstrap 做样式，后台整个就用 angular 来写，目标就这样的设定了。然后我就开始了漫长的学习过程，对于 bootstrap 的话，我之前已经用过无数次，所以比较熟悉，angular 我虽然也接触了无数次，但是仍旧没有用过啊，只是听说了很多关于它的介绍以及它的概念，比如指令（directive），这个东西我一直挺晕的，因为某一次逛微博的时候看到某某 MVVM 框架作者狂吹自己写的框架有12000个指令，而 angular 只有1200！！！吓得我魂飞魄散。但是 Jinger 这个项目还是要继续写的，于是我开始学习 angular。</li>
</ul>
<hr>
<h1 id="Angular">Angular</h1><p>angular 是一个前端的 MVVM 框架，包括诸多概念，比如controller，service，directive等，初学咋一看挺吓人的，但其实挺好用，这是我近两天总结出来的。</p>
<p>项目结构大致如此：</p>
<pre class="lang:default decode:true  ">&lt;!DOCTYPE html&gt;
&lt;html lang="zh" ng-app="myApp"&gt;

&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
    &lt;meta name="description" content="Jinger"&gt;
    &lt;meta name="author" content="Ochukai"&gt;

    &lt;title&gt;Jinger by Bootstrap&lt;/title&gt;
    &lt;link rel="icon" href="favicon.ico"&gt;

    &lt;!-- Bootstrap core CSS --&gt;
    &lt;link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet"&gt;
    &lt;link href="assets/vendor/loading-bar/loading-bar.css" rel="stylesheet"&gt;

    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;
      &lt;script src="http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;!--[if lte IE 8]&gt;&lt;link rel="stylesheet" href="assets/vendor/nav-js/responsive-nav.css"&gt;&lt;![endif]--&gt;
    &lt;!--[if gt IE 8]&gt;&lt;!--&gt;
    &lt;link rel="stylesheet" href="assets/css/styles.css"&gt;
    &lt;!--&lt;![endif]--&gt;
&lt;/head&gt;

&lt;body&gt;

    &lt;div id="nav-sider" class="nav-collapse"&gt;
        &lt;ul role="navigation" class="nav nav-pills nav-stacked"&gt;
            &lt;li&gt;
                &lt;a href=""&gt;&lt;h2&gt; 京儿 &lt;/h2&gt;&lt;/a&gt;
            &lt;/li&gt;
            &lt;li class="divider"&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;div role="main" class="main"&gt;
        &lt;a href="#nav" class="nav-toggle"&gt;Menu&lt;/a&gt;
        &lt;div class="container-fluid"&gt;
            &lt;div class="row"&gt;
                &lt;div id="main-container" class="col-sm-12 col-md-12" ng-view&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- Bootstrap core JavaScript
    ================================================== --&gt;
    &lt;!-- Placed at the end of the document so the pages load faster --&gt;
    &lt;script src="assets/vendor/jquery/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="assets/vendor/bootstrap/js/bootstrap.min.js"&gt;&lt;/script&gt;
    &lt;script src="assets/vendor/nav-js/responsive-nav.min.js"&gt;&lt;/script&gt;
    &lt;!--  angularjs  --&gt;
    &lt;script src="assets/vendor/angular/angular.js"&gt;&lt;/script&gt;
    &lt;script src="assets/vendor/angular/angular-animate.js"&gt;&lt;/script&gt;
    &lt;script src="assets/vendor/angular/angular-route.js"&gt;&lt;/script&gt;
    &lt;script src="assets/vendor/angular/angular-storage.js"&gt;&lt;/script&gt;
    &lt;script src="assets/vendor/loading-bar/loading-bar.js"&gt;&lt;/script&gt;
    &lt;script src="assets/js/app/app.js"&gt;&lt;/script&gt;
    &lt;script src="assets/js/app/controllers.js"&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</pre>

<h1 id="Bower">Bower</h1><p>上图可以看出前端如果使用**框架，那必然引入的文件会很多很多，而且如果需要更换版本，哦！！！ 简直是噩梦。所以使用 Bower来管理前端的各种依赖。</p>
<p>安装 node 的时候就已经安装了 bower ，所以现在可以直接使用了，首先在当前项目的根目录下打开 terminal ，输入</p>
<p><pre class="lang:default decode:true ">bower init</pre><br>会有一些需要确认的信息，一般回车就好，等到向导结束，就会生成一个 bower.json 文件在项目的根目录如果刚刚 terminal 的路径没有错，生成的文件大概是这样的：</p>
<p><pre class="lang:js decode:true">{<br>  “name”: “jinger”,<br>  “version”: “0.0.1”,<br>  “homepage”: “<a href="https://github.com/xiaoyee/jinger" target="_blank" rel="external">https://github.com/xiaoyee/jinger</a>“,<br>  “authors”: [<br>    “Ochukai &lt;sex.xiaoyee@gmail.com&gt;”<br>  ],<br>  “description”: “jinger”,<br>  “main”: “app.js”,<br>  “moduleType”: [<br>    “node”<br>  ],<br>  “keywords”: [<br>    “jinger”<br>  ],<br>  “license”: “MIT”,<br>  “ignore”: [<br>    “<em>*/.</em>“,<br>    “node_modules”,<br>    “bower_components”,<br>    “test”,<br>    “tests”<br>  ],<br>  “dependencies”: {<br>    “jquery”: “~2.1.3”<br>  }<br>}</pre><br>最重要的节点当然是 dependencies，这里定义了你的项目使用的库及其版本。</p>
<p>使用 bower 安装的依赖默认实在项目根目录下的 bower_components 文件夹，当然是可以修改的了。修改的话，要在项目根目录新建 .bowerrc 文件，新建这个文件需要用 terminal 输入：</p>
<p><pre class="lang:default decode:true">$ cd . &gt; .bowerrc</pre><br>这是官方的一个例子：</p>
<p><pre class="lang:js decode:true">{<br>  “directory”: “app/components/“, // 这里可以规定依赖安装的位置。<br>  “analytics”: false,<br>  “timeout”: 120000,<br>  “registry”: {<br>    “search”: [<br>      “<a href="http://localhost:8000" target="_blank" rel="external">http://localhost:8000</a>“,<br>      “<a href="https://bower.herokuapp.com" target="_blank" rel="external">https://bower.herokuapp.com</a>“<br>    ]<br>  }<br>}</pre><br>更多信息，在<a href="http://bower.io/docs/api/" title="bower.io" target="_blank" rel="external">http://bower.io/docs/api/</a></p>
<p>今天写这么多吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇记录了新装 node 以及新建 node web(express) 项目的过程，很潦草，只是记录了过程的一点点，而且当时新建项目的时候心态也不好，很着急，实际上手写的时候遇到了诸多问题，而且我本人也有选择困难症，经常会纠结到底用这个库还是那个库，还是自己写比较好呢，时]]>
    </summary>
    
      <category term="angular" scheme="http://ochukai.github.io/tags/angular/"/>
    
      <category term="expressjs" scheme="http://ochukai.github.io/tags/expressjs/"/>
    
      <category term="node" scheme="http://ochukai.github.io/tags/node/"/>
    
      <category term="angularjs" scheme="http://ochukai.github.io/categories/angularjs/"/>
    
      <category term="node" scheme="http://ochukai.github.io/categories/angularjs/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Project with Nodejs and Expressjs - yiti]]></title>
    <link href="http://ochukai.github.io/new-project-with-node-and-express-yiti/"/>
    <id>http://ochukai.github.io/new-project-with-node-and-express-yiti/</id>
    <published>2014-12-14T03:32:38.000Z</published>
    <updated>2015-11-07T15:22:59.585Z</updated>
    <content type="html"><![CDATA[<p>今天我要开始写一个产品展示类的项目，业务逻辑很简单，决定使用 nodejs 来写。</p>
<hr>
<h2 id="准备环境">准备环境</h2><h3 id="安装nodejs">安装nodejs</h3><p>直接登陆nodejs的官网 <a href="http://nodejs.org" target="_blank" rel="external">http://nodejs.org</a> 下载对应版本安装即可，path等都会自动配置好，很简单。</p>
<h3 id="安装express">安装express</h3><pre class="lang:default decode:true">npm install -g express</pre>
最新express4.0+版本中将命令工具分家出来了,所以还需要安装一个命令行工具
<pre class="lang:default decode:true">npm install -g express-generator</pre>

<h3 id="安装其他工具">安装其他工具</h3><pre class="lang:default decode:true ">npm install nodemon -g　  // nodemon 用于实时监听 app.js 文件
npm install grunt-cli -g　// grunt 是一款任务构建工具，可以使用它完成自动编译/压缩等工作
npm install bower -g　　  // bower 是一款页面引入文件管理工具</pre>
至此，环境大概几乎已经就绪，所以开始吧。

* * *

## 新建项目

### express

使用express-generator 创建项目，在工作空间下建立需要的文件夹，然后执行：
<pre class="lang:default decode:true">cd jinger

express

npm install
</pre>

<h3 id="bookshelf（后来决定不用ORM了，用原生mysql）">bookshelf（后来决定不用ORM了，用原生mysql）</h3><p>因为项目里面要使用orm，我选择的是bookshelf(<a href="http://bookshelfjs.org/" target="_blank" rel="external">http://bookshelfjs.org/</a>)，所以安装它。</p>
<pre class="lang:default decode:true  ">npm install knex --save
npm install bookshelf --save

Then add one of the following:
npm install pg
npm install mysql
npm install mariasql
npm install sqlite3</pre>

<h3 id="jade">jade</h3><p>项目里面会用到jade,，所以最好使用html2jade 讲些好的html转为jade，方便直接用：</p>
<pre class="lang:default decode:true ">npm install -g html2jade</pre>
下面是简单的用法，但已足够。
<pre class="lang:default decode:true ">html2jade example.html #直接输出为 example.jade

html2jade http://twitter.com

html2jade http://twitter.com &gt; twitter.jade</pre>
ok！！！
<pre class="lang:default decode:true">npm start</pre>]]></content>
    <summary type="html">
    <![CDATA[<p>今天我要开始写一个产品展示类的项目，业务逻辑很简单，决定使用 nodejs 来写。</p>
<hr>
<h2 id="准备环境">准备环境</h2><h3 id="安装nodejs">安装nodejs</h3><p>直接登陆nodejs的官网 <a href="http:/]]>
    </summary>
    
      <category term="bookshelf" scheme="http://ochukai.github.io/tags/bookshelf/"/>
    
      <category term="expressjs" scheme="http://ochukai.github.io/tags/expressjs/"/>
    
      <category term="jade" scheme="http://ochukai.github.io/tags/jade/"/>
    
      <category term="jinger" scheme="http://ochukai.github.io/tags/jinger/"/>
    
      <category term="nodejs" scheme="http://ochukai.github.io/tags/nodejs/"/>
    
      <category term="orm" scheme="http://ochukai.github.io/tags/orm/"/>
    
      <category term="node" scheme="http://ochukai.github.io/categories/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Error: ENOENT stat *** After install nodejs on win8.1]]></title>
    <link href="http://ochukai.github.io/error-enoent-stat-after-install-nodejs-on-win8/"/>
    <id>http://ochukai.github.io/error-enoent-stat-after-install-nodejs-on-win8/</id>
    <published>2014-12-10T14:39:41.000Z</published>
    <updated>2015-11-07T15:22:59.585Z</updated>
    <content type="html"><![CDATA[<p>近几日我一直在研究AngularJS，曾经也研究过，但终于因为项目时间太赶而没有用上，这一次难得清闲几日决定继续。</p>
<p>在Bing的过程中发现了angular-seed这个项目，是用来学习AngularJS的，所以就clone到了本地，项目里面的readme.md文件提到必须使用node才可编译，但我最近的win8.1在前几次安装node都失败了，这一次又出现node无论如何我觉得都要再试一次。</p>
<p>下载双击下一步等了一会竟然奇迹般的开始安装了，我很激动，于是赶紧到angular-seed文件家里面，npm install回车一气呵成，但是却出错了。</p>
<p><a href="http://oyaoya-wordpress.stor.sinaapp.com/uploads/2014/12/QQ截图20141210223553.png" target="_blank" rel="external"><img src="http://oyaoya-wordpress.stor.sinaapp.com/uploads/2014/12/QQ截图20141210223553-300x73.png" alt="QQ截图20141210223553"></a></p>
<blockquote>
<p>解决方案：这是文件路径不对造成的，在 <strong>C:\Users\“你用户名”\AppData\Roaming\</strong>   这个路径下建个npm文件夹即可！</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>近几日我一直在研究AngularJS，曾经也研究过，但终于因为项目时间太赶而没有用上，这一次难得清闲几日决定继续。</p>
<p>在Bing的过程中发现了angular-seed这个项目，是用来学习AngularJS的，所以就clone到了本地，项目里面的readme.md]]>
    </summary>
    
      <category term="angular" scheme="http://ochukai.github.io/tags/angular/"/>
    
      <category term="node" scheme="http://ochukai.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://ochukai.github.io/tags/npm/"/>
    
      <category term="angularjs" scheme="http://ochukai.github.io/categories/angularjs/"/>
    
      <category term="node" scheme="http://ochukai.github.io/categories/angularjs/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WebGL in Action -- yiti]]></title>
    <link href="http://ochukai.github.io/webgl-in-action-yiti/"/>
    <id>http://ochukai.github.io/webgl-in-action-yiti/</id>
    <published>2014-12-07T03:13:55.000Z</published>
    <updated>2015-11-07T15:22:59.587Z</updated>
    <content type="html"><![CDATA[<p>由于喜欢玩魔方写了java版的计时器觉得不爽进而写了web版的计时器还是不爽，不如来一发3D版的可以直接上手的魔方过瘾。于是奋发图钱要学习WebGL，这就是本文的初衷。</p>
<p>我不否定兴趣使然，这在我自己身上的体现可谓淋漓尽致。例子暂时不举了。</p>
<p>之前小弟不才，一直觉得html5有了Canvas很nb，但不知还有WebGL这等东西，偶然在Lufy Legend的博客看到，感谢，其实最吸引我的原因便是博主翻译的<a href="http://wgld.org/" target="_blank" rel="external">http://wgld.org/</a>是来自nihon国度的WebGL专家，いしょに勉強しろ。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>关于Canvas的绘图，这些比较基础：</p>
<ol>
<li><strong>canvas</strong>和<strong>img</strong>等标签一样，是一个可以自由制定大小的矩形区域。</li>
<li>canvas的2d的<strong>context</strong>功能是一个封装了绘图处理的各种API的对象，这个对象中包含了所有的绘图函数和属性。</li>
<li>2d的context可以进行图形，文字以及图片数据的描画，与之相对的，WebGL是三维，可以描画3D图形，叫做<strong>webglcontext</strong><br>&nbsp;</li>
</ol>
<p>这是WebGL所采用的右手坐标系。<br><a href="http://oyaoya-wordpress.stor.sinaapp.com/uploads/2014/12/w003_01.jpg" target="_blank" rel="external"><img src="http://oyaoya-wordpress.stor.sinaapp.com/uploads/2014/12/w003_01.jpg" alt="w003_01"></a></p>
<p>&nbsp;</p>
<p>利用WebGL绘制3D图形并输出在2D的显示器上面，这里3D到2D的转换是需要计算的。为了模拟三维空间，将三维空间的情报向二维的情报进行转换，需要三个坐标变换。</p>
<h3 id="三种坐标转换：">三种坐标转换：</h3><ol>
<li>模型转换</li>
<li>视图转换</li>
<li>投影转换</li>
</ol>
<h3 id="模型转换">模型转换</h3><blockquote>
<p>三つある座標変換の一つ目は、<strong>モデル変換</strong>です。OpenGL の処理系ではこのモデル変換という名称が一般的ですが、DirectX 系ではワールド変換と呼ばれているものですね。</p>
<p>モデル変換とは、被写体となる物体が三次元空間のどの位置にあるのかを定義するための座標変換です。現実の世界とは異なり、プログラムのなかの三次元空間には世界の中心の基準となる<em>原点</em>という位置が定義されています。その原点から見て、被写体となるモデルが相対的にどの位置に存在しているのかを知るためにモデル変換が必要になります。</p>
<p>仮に、シミュレートする三次元空間にリンゴがひとつ存在しているとしたら、そのリンゴの存在する位置を定義するためにモデル変換が必要になるわけですね。<br>三种坐标变换中的第一个，是模型变换。在OpenGL的处理中虽然一般叫做模型变换，但是在DirectX中被叫做世界变换。</p>
</blockquote>
<p>模型变换，是指为了定义参照物在三维空间的什么位置而进行的坐标变换。和现实的世界不同，程序中的三维空间里定义了世界的中心的基准点，就是原点。从这个原点出发，为了知道参照物的相对位置，就需要进行必要的坐标变换。</p>
<p>假设，虚拟的三维空间里有一个苹果，那么为了表示这个苹果在什么位置，就需要进行相应的模型变换了。</p>
<h3 id="视图转换">视图转换</h3><blockquote>
<p>三つある座標変換の二つ目は<strong>ビュー変換</strong>と呼ばれます。</p>
<p>ビュー変換では、実際にカメラがどの位置にあるのか、そしてカメラはどこを向いているのかなどを定義します。先ほどのリンゴの話に合わせると、仮に三次元空間にリンゴが存在していたとしてもカメラがそのリンゴに向けられていなければ、リンゴが映し出されることはありませんね。他にも、たとえばカメラとリンゴとの距離が著しく離れていれば、仮にリンゴにカメラが向けられていたとしても映らないかもしれません。</p>
<p>カメラの位置や、その向けられている方角を決めるために行なう座標変換、それがビュー変換というわけです。<br>三种坐标变换的第二个，是视图变换。</p>
</blockquote>
<p>视图变换，定义了镜头的实际位置以及镜头的方向。拿刚刚举例的苹果来说，即使三维空间中有一个苹果，如果镜头的方向不对着苹果的话，同样也是看不到这个苹果的。而且，如果将镜头大幅度远离苹果，那么也有可能看不到苹果了。</p>
<p>为了决定镜头的位置和角度所进行的坐标变换就叫做视图变换。</p>
<h3 id="投影转换">投影转换</h3><blockquote>
<p>三つある座標変換の最後の一つ、それが<strong>プロジェクション変換</strong>です。</p>
<p>この変換では、三次元空間のどの領域を撮影するのかなどを定義します。たとえば、横に幅広くパノラマとして撮影するのか、あるいは縦長の映像として撮影するのか、どのくらい遠くまでを撮影するのかなどを定義することができます。</p>
<p>一般的なカメラの場合は、レンズの前にあるもの全てを撮影しますし、どのくらい遠くまで撮影するのかなんて意識することはありませんね。しかし、プログラムが無限に広い空間をシミュレートするのは不可能です。そこで、一番手前はここから、一番遠くはここまで、というシミュレートする領域を決めて処理するわけですね。</p>
<p>プロジェクション変換を行なうことによって、いわゆる遠近法の効果が得られます。近くにあるものは大きく、遠くにあるものは小さく描画されるようになるわけです。<br>三种坐标变换中的最后一个，是投影变换。</p>
</blockquote>
<p>这个变换，定义了三维空间的摄影区域。比如，是横向摄影，还是纵向摄影，最远拍摄多远距离等。</p>
<p>一般的照相机，直接拍摄镜头前的所有图像，最远拍摄多远也基本上没什么意识。但是，程序是无法模拟无限大的空间的，所以，从哪里开始拍摄，拍摄到哪里，必须有一个明确的范围。</p>
<p>投影变幻，通过远近法则，可以将近处的物体描画的比较大，远处的物体描画的比较小。</p>
<p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>上面的只是算是理论知识，我不是很喜欢背诵这些东西，读一遍有些许了解便可，下面便开始了。</p>
<h3 id="一个最低限度的HTML模版，就是像下面这样。">一个最低限度的HTML模版，就是像下面这样。</h3><p><pre class="lang:xhtml decode:true ">&lt;!DOCTYPE html&gt;<br>&lt;html lang=”en”&gt;</pre></p>
<p>&lt;head&gt;<br>    &lt;meta charset=”utf-8”&gt;<br>    &lt;title&gt;WebGL TEST&lt;/title&gt;<br>&lt;/head&gt;</p>
<p>&lt;body&gt;<br>    &lt;canvas id=”canvas”&gt;&lt;/canvas&gt;</p>
<pre><code><span class="subst">&amp;</span><span class="literal">lt</span>;script src=<span class="string">"script.js"</span> <span class="keyword">type</span>=<span class="string">"text/javascript"</span><span class="subst">&amp;</span><span class="literal">gt</span>;<span class="subst">&amp;</span><span class="literal">lt</span>;/script<span class="subst">&amp;</span><span class="literal">gt</span>;
</code></pre><p>&lt;/body&gt;</p>
<p>&lt;/html&gt;<br>在javascript中使用getElementById等函数很容易能获取到这个canvas对象，获取了这个canvas之后，利用javascript可以完成所有的操作。</p>
<h3 id="固定渲染管线和可编辑渲染管线">固定渲染管线和可编辑渲染管线</h3><p>固定渲染管线，简单来说，就是3d渲染所进行的一连串的计算流程，就像流水线一样。固定渲染管线中，上次所说的模型，视图，投影的坐标变换都会替我们完成。不需要理解细节，只需要知道所有的这些坐标变换都包含在里面，都会帮我们计算好。</p>
<p>WebGL中不存在固定渲染管线。也就是说，坐标变换必须全部由自己来做。而且，这个记述了坐标变换的机制就叫做着色器(Shader)。</p>
<p>这样可以由程序员控制的机制叫做可编辑渲染管线。而着色器又有 处理几何图形顶点的顶点着色器和处理像素的片段着色器两种类型。</p>
<p>由于WebGL中没有固定管线，所以必须准备好顶点着色器和片段着色器。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于喜欢玩魔方写了java版的计时器觉得不爽进而写了web版的计时器还是不爽，不如来一发3D版的可以直接上手的魔方过瘾。于是奋发图钱要学习WebGL，这就是本文的初衷。</p>
<p>我不否定兴趣使然，这在我自己身上的体现可谓淋漓尽致。例子暂时不举了。</p>
<p>之前小]]>
    </summary>
    
      <category term="html" scheme="http://ochukai.github.io/tags/html/"/>
    
      <category term="js" scheme="http://ochukai.github.io/tags/js/"/>
    
      <category term="webgl" scheme="http://ochukai.github.io/tags/webgl/"/>
    
      <category term="WebGL" scheme="http://ochukai.github.io/categories/WebGL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wordpress 新装技巧]]></title>
    <link href="http://ochukai.github.io/wordpress-newer-tips/"/>
    <id>http://ochukai.github.io/wordpress-newer-tips/</id>
    <published>2014-12-03T13:40:56.000Z</published>
    <updated>2015-11-07T15:22:59.585Z</updated>
    <content type="html"><![CDATA[<p>第一次安装Wordpress总会遇到各种各样的问题，比如字体加载很慢…</p>
<p>现在问题都解决了，我需要自己总结一下。</p>
<blockquote>
<p>移除Open Sans</p>
</blockquote>
<pre class="theme:ado font:consolas font-size:14 line-height:18 toolbar:2 striped:false marking:false ranges:false start-line:0 tab-convert:true lang:php decode:true">// Remove Open Sans that WP adds from frontend
if (!function_exists('remove_wp_open_sans')) :
    function remove_wp_open_sans() {
        wp_deregister_style( 'open-sans' );
        wp_register_style( 'open-sans', false );
    }
    add_action('wp_enqueue_scripts', 'remove_wp_open_sans');

    // Uncomment below to remove from admin
    // add_action('admin_enqueue_scripts', 'remove_wp_open_sans');
endif;</pre>

<blockquote>
<p>去掉更新提示</p>
</blockquote>
<pre class="theme:ado font:consolas font-size:14 line-height:18 lang:php decode:true">// Remove update notices.
add_action('admin_menu','wp_hide_nag');
function wp_hide_nag() {
    remove_action( 'admin_notices', 'update_nag', 3 );
}</pre>

<p>以上两段代码 都要加在function.php的最后。</p>
<p>话说前面两个都是错误的，但是我不忍心删除。</p>
<p>在SAE的wordpress 如果想要实现修改固定链接，需要修改config.yaml</p>
<pre class="lang:yaml decode:true ">name: oyaoya
version: 1
handle:
  - rewrite: if(!is_dir() &amp;&amp; !is_file()) goto "index.php?%{QUERY_STRING}"</pre>

<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次安装Wordpress总会遇到各种各样的问题，比如字体加载很慢…</p>
<p>现在问题都解决了，我需要自己总结一下。</p>
<blockquote>
<p>移除Open Sans</p>
</blockquote>
<pre class="theme:ado fo]]>
    </summary>
    
      <category term="php" scheme="http://ochukai.github.io/tags/php/"/>
    
      <category term="wordpress" scheme="http://ochukai.github.io/tags/wordpress/"/>
    
      <category term="PHP" scheme="http://ochukai.github.io/categories/PHP/"/>
    
      <category term="Wordpress" scheme="http://ochukai.github.io/categories/PHP/Wordpress/"/>
    
  </entry>
  
</feed>
