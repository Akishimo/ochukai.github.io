<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[I am Oliver]]></title>
  <subtitle><![CDATA[I love Jone.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ochukai.github.io/"/>
  <updated>2015-11-23T03:06:34.942Z</updated>
  <id>http://ochukai.github.io/</id>
  
  <author>
    <name><![CDATA[Oliver Wang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[GIT - remember password in linux.]]></title>
    <link href="http://ochukai.github.io/GIT-remember-password-in-linux/"/>
    <id>http://ochukai.github.io/GIT-remember-password-in-linux/</id>
    <published>2015-11-23T02:46:44.000Z</published>
    <updated>2015-11-23T03:06:34.942Z</updated>
    <content type="html"><![CDATA[<h1 id="Window">Window</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为 window 不允许之间新建 . 开头的文件，所以使用 mv 的方式</span></span><br><span class="line">mv git-credentials .git-credentials</span><br></pre></td></tr></table></figure>
<p>然后编辑 <strong>.git-credentials</strong><br><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor"># github 是这样的格式</span></span><br><span class="line">https:<span class="comment">//&#123;username&#125;:&#123;password&#125;@github.com </span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># git.oschina.net 是这样的</span></span><br><span class="line">https:<span class="comment">//&#123;username&#125;:&#123;password&#125;@git.oschina.net</span></span><br></pre></td></tr></table></figure></p>
<p>最后一步是<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></p>
<h1 id="Linux">Linux</h1><blockquote>
<p>在此之前或许要添加 ssh-key (<a href="https://help.github.com/articles/generating-ssh-keys/#platform-linux" target="_blank" rel="external">https://help.github.com/articles/generating-ssh-keys/#platform-linux</a>)</p>
</blockquote>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> credential.helper cache</span><br><span class="line"><span class="preprocessor"># 默认缓存密码15分钟，可以改得更长, 比如1小时</span></span><br><span class="line">$ git config --<span class="keyword">global</span> credential.helper <span class="string">'cache --timeout=3600'</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Window">Window</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为 windo]]>
    </summary>
    
      <category term="git" scheme="http://ochukai.github.io/tags/git/"/>
    
      <category term="记住密码" scheme="http://ochukai.github.io/tags/%E8%AE%B0%E4%BD%8F%E5%AF%86%E7%A0%81/"/>
    
      <category term="GIT" scheme="http://ochukai.github.io/categories/GIT/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[User correct way to change view]]></title>
    <link href="http://ochukai.github.io/use-correct-way-to-change-view/"/>
    <id>http://ochukai.github.io/use-correct-way-to-change-view/</id>
    <published>2015-11-17T15:42:24.000Z</published>
    <updated>2015-11-23T02:56:00.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="backbone" scheme="http://ochukai.github.io/tags/backbone/"/>
    
      <category term="Backbone" scheme="http://ochukai.github.io/categories/Backbone/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Baseview in Backbone]]></title>
    <link href="http://ochukai.github.io/Baseview-in-Backbone/"/>
    <id>http://ochukai.github.io/Baseview-in-Backbone/</id>
    <published>2015-11-12T16:36:15.000Z</published>
    <updated>2015-11-12T17:39:53.967Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天研究了好久的 Backbone，一直搞不明白，怎么通过 router 的改变来切换 view。</p>
<h2 id="过程跌宕起伏">过程跌宕起伏</h2><p>事情是这样的，都知道 backbone 有 model, collection, view, router 这些基本概念，今天我要写一个简单的网页，有两个 nav 项，因为用了 backbone，自然就想到了单页应用，就是单击其中某一个的时候，显示这一个 nav 项对应的内容。</p>
<p>这就用到了 router 的事件，每当 router 改变时，重新 render 整个页面。（我是这么想的，也不是整个，router 变了有些内容必然会跟着变。）<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> appView = <span class="keyword">this</span>;</span><br><span class="line">Backbone.history.on(<span class="string">'route'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">router, name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'current route:'</span>, name);</span><br><span class="line">    appView.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>另外，在 router 里面我定义了一个变量，用来表明哪一个 nav 项被点击。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Backbone.Router.extend(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... other methods</span></span><br><span class="line"></span><br><span class="line">    routes: &#123;</span><br><span class="line">        <span class="string">''</span>: <span class="string">'chat'</span>, <span class="comment">// default to #chat</span></span><br><span class="line">        <span class="string">'chat'</span>: <span class="string">'chat'</span>,</span><br><span class="line">        <span class="string">'broadcast'</span>: <span class="string">'broadcast'</span>,</span><br><span class="line">        <span class="string">'*nothingMatched'</span>: <span class="string">'pageNotFoundRoute'</span> <span class="comment">// 404</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    chat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"chat page loaded."</span>);</span><br><span class="line">        <span class="built_in">window</span>.App.currentRouter = <span class="string">'chat'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    broadcast: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'broadcast page loaded.'</span>);</span><br><span class="line">        <span class="built_in">window</span>.App.currentRouter = <span class="string">'broadcast'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    pageNotFoundRoute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'pageNotFoundRoute'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>事实证明，我的想法是有一点点正确的，因为运行顺序是这样的：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span> appView initialize.</span><br><span class="line">doctor-router.js:<span class="number">11</span> Route initialize</span><br><span class="line">doctor-router.js:<span class="number">22</span> chat page loaded.    <span class="comment"># 首先，进入 router 的处理方法</span></span><br><span class="line">app.js:<span class="number">31</span> current route: chat            <span class="comment"># 然后，响应 router 的 change 事件</span></span><br><span class="line">app.js:<span class="number">58</span> <span class="keyword">in</span> appView render.             <span class="comment"># 最后，appView 的 render 方法根据 route name</span></span><br><span class="line">                                         <span class="comment"># render对应的 view</span></span><br></pre></td></tr></table></figure></p>
<p>render 的时候，首先要 <strong>remove</strong> 当前的view，然后 render 新的view。我是这么写的：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.siderView) &#123;</span><br><span class="line">    <span class="comment">// 删掉当前的</span></span><br><span class="line">    <span class="keyword">this</span>.siderView.remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (App.currentRouter === <span class="string">'chat'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> ChatSiderView();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (App.currentRouter === <span class="string">'broadcast'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> DoctorProfileView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 新的 view</span></span><br><span class="line"><span class="keyword">this</span>.siderView.render();</span><br></pre></td></tr></table></figure></p>
<p>运行之后我发现，这样点击下一个 nav 的时候， view 变成了空白的。后来审查元素，发现 el 那个节点整个被删掉了，因为他们两个共同放在同一个 el 下面。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// view 1</span></span><br><span class="line"><span class="keyword">var</span> DoctorProfileView = Backbone.View.extend(&#123;</span><br><span class="line">    el: <span class="string">'.left_aside'</span>,</span><br><span class="line">    className:  <span class="string">'doctor_profile'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// view 2</span></span><br><span class="line"><span class="keyword">var</span> ChatSiderView = BaseView.extend(&#123;</span><br><span class="line">    el: <span class="string">'.left_aside'</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>因为是新手，而且这是第一次用 backbone，所以还不知道 $el 就是 juqery 对象（其实问题不在这里），所以我就开始了漫无目的的搜索。</p>
<p>其实办法肯定是有的，就是让他俩不共用同一个 el 节点，每次 render 完了之后，添加到要显示的地方，remove 的时候也只会删掉他自己，况且还可以用 hide。</p>
<h2 id="有了一线希望">有了一线希望</h2><p>终于，我看到网上有人写了这么一句：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$el.empty();</span><br></pre></td></tr></table></figure></p>
<p>然后我顺藤摸瓜看起了 backbone 的源代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Creating a Backbone.View creates its initial element outside of the DOM,</span></span><br><span class="line"><span class="comment">// if an existing element is not provided...</span></span><br><span class="line"><span class="keyword">var</span> View = Backbone.View = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cid = _.uniqueId(<span class="string">'view'</span>);</span><br><span class="line">    _.extend(<span class="keyword">this</span>, _.pick(options, viewOptions));</span><br><span class="line">    <span class="keyword">this</span>._ensureElement();</span><br><span class="line">    <span class="keyword">this</span>.initialize.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure that the View has a DOM element to render into.</span></span><br><span class="line"><span class="comment">// If `this.el` is a string, pass it through `$()`, take the first</span></span><br><span class="line"><span class="comment">// matching element, and re-assign it to `el`. Otherwise, create</span></span><br><span class="line"><span class="comment">// an element from the `id`, `className` and `tagName` properties.</span></span><br><span class="line">_ensureElement: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.el) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">// omit this because we pass 'el' as options to the View.</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setElement(_.result(<span class="keyword">this</span>, <span class="string">'el'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change the view's element (`this.el` property) and re-delegate the</span></span><br><span class="line"><span class="comment">// view's events on the new element.</span></span><br><span class="line">setElement: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.undelegateEvents();</span><br><span class="line">    <span class="keyword">this</span>._setElement(element);</span><br><span class="line">    <span class="keyword">this</span>.delegateEvents();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates the `this.el` and `this.$el` references for this view using the</span></span><br><span class="line"><span class="comment">// given `el`. `el` can be a CSS selector or an HTML string, a jQuery</span></span><br><span class="line"><span class="comment">// context or an element. Subclasses can override this to utilize an</span></span><br><span class="line"><span class="comment">// alternative DOM manipulation API and are only required to set the</span></span><br><span class="line"><span class="comment">// `this.el` property.</span></span><br><span class="line">_setElement: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = el <span class="keyword">instanceof</span> Backbone.$</span><br><span class="line">             ? el</span><br><span class="line">             : Backbone.$(el);</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="keyword">this</span>.$el[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这一段就是说，如果我们传入了 el 那么 backbone 会自动设置 $el（通过命名就能看出这是一个 jquery 对象咯）, 并且绑定我们在 events 定义的事件到这上面。</p>
<p>然后还有 backbone 的 remove view 的方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Remove this view by taking the element out of the DOM, and removing any</span></span><br><span class="line"><span class="comment">// applicable Backbone.Events listeners.</span></span><br><span class="line">remove: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._removeElement();</span><br><span class="line">    <span class="keyword">this</span>.stopListening();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove this view's element from the document and all event listeners</span></span><br><span class="line"><span class="comment">// attached to it. Exposed for subclasses using an alternative DOM</span></span><br><span class="line"><span class="comment">// manipulation API.</span></span><br><span class="line">_removeElement: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解除事件监听，删掉元素。</p>
<h2 id="最终的_hide_方法">最终的 hide 方法</h2><p>于是，我模仿着写了一个 hide 方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.undelegateEvents();</span><br><span class="line">    <span class="keyword">this</span>.$el.empty();</span><br><span class="line">    <span class="keyword">this</span>.stopListening();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好像很简单，哈哈， 顺便把 appView 里面也改掉：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.siderView) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView.hide();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!App.currentRouter || App.currentRouter === <span class="string">'chat'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> ChatSiderView();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (App.currentRouter === <span class="string">'broadcast'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.siderView = <span class="keyword">new</span> DoctorProfileView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.siderView.render();</span><br></pre></td></tr></table></figure></p>
<p>运行之后，切换 view 正常了。耶！</p>
<p>然后我想让我的view 都具有 hide 这个方法，恰好 backbone 很好的面向对象，于是：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*global define*/</span></span><br><span class="line">define([</span><br><span class="line">    <span class="string">'jquery'</span>,</span><br><span class="line">    <span class="string">'underscore'</span>,</span><br><span class="line">    <span class="string">'backbone'</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span> (<span class="params">$, _, Backbone</span>) </span>&#123;</span><br><span class="line"><span class="pi">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> BaseView = Backbone.View.extend(&#123;</span><br><span class="line"></span><br><span class="line">        hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.undelegateEvents();</span><br><span class="line">            <span class="keyword">this</span>.$el.empty();</span><br><span class="line">            <span class="keyword">this</span>.stopListening();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> BaseView;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">var</span> ChatSiderView = BaseView.extend(&#123;</span><br><span class="line"></span><br><span class="line">    el: <span class="string">'.left_aside'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>感觉非常顺畅。</p>
<h2 id="后记">后记</h2><p>频繁的删除dom元素，速度肯定是慢的，恰好我的网页很简单，所以看不出明显的缺点，网上也是推荐使用 <code>display：none</code> 和 <code>display：block</code> 来切换 view， 等我以后再研究吧。</p>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>今天研究了好久的 Backbone，一直搞不明白，怎么通过 router 的改变来切换 view。</p>
<h2 id="过程跌宕起伏">过程跌宕起伏</h2><p>事情是这样的，都知道 backbone 有 model, colle]]>
    </summary>
    
      <category term="backbone" scheme="http://ochukai.github.io/tags/backbone/"/>
    
      <category term="base" scheme="http://ochukai.github.io/tags/base/"/>
    
      <category term="view" scheme="http://ochukai.github.io/tags/view/"/>
    
      <category term="Backbone" scheme="http://ochukai.github.io/categories/Backbone/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wrong clearfix Make me crazy!]]></title>
    <link href="http://ochukai.github.io/Wrong-clearfix-Make-me-crazy/"/>
    <id>http://ochukai.github.io/Wrong-clearfix-Make-me-crazy/</id>
    <published>2015-11-11T09:45:59.000Z</published>
    <updated>2015-11-11T09:47:49.733Z</updated>
    <content type="html"><![CDATA[<p>Clearfix 就是这么简单！<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.clearfix</span><span class="pseudo">:after</span>,</span><br><span class="line"><span class="class">.clearfix</span><span class="pseudo">:before</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">" "</span></span><br><span class="line"></span></span></span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.clearfix</span><span class="pseudo">:after</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span><br><span class="line"></span></span></span>&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Clearfix 就是这么简单！<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="class">.clearfix</span]]>
    </summary>
    
      <category term="css" scheme="http://ochukai.github.io/tags/css/"/>
    
      <category term="html" scheme="http://ochukai.github.io/tags/html/"/>
    
      <category term="css" scheme="http://ochukai.github.io/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wamp mysql 中文显示为？]]></title>
    <link href="http://ochukai.github.io/wamp-mysql-chinese-question-mark/"/>
    <id>http://ochukai.github.io/wamp-mysql-chinese-question-mark/</id>
    <published>2015-08-09T05:25:28.000Z</published>
    <updated>2015-11-23T03:00:31.083Z</updated>
    <content type="html"><![CDATA[<p>发现中文显示为“？”，然后我看了一下 mysql.ini，添加了两行</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="title">[mysqld]</span></span><br><span class="line"><span class="setting">port=<span class="value"><span class="number">3306</span></span></span></span><br><span class="line"><span class="comment">#下面的两行是添加的</span></span><br><span class="line"><span class="setting">character_set_client=<span class="value">utf8</span></span></span><br><span class="line"><span class="setting">character_set_server=<span class="value">utf8</span></span></span><br></pre></td></tr></table></figure>
<p>后来再看 mysql 中的信息发现这样了，不过中文问题已经解决了。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like 'character%';</span><br><span class="line">+--------------------------+----------------------------------------------------</span><br><span class="line">+</span><br><span class="line">| Variable_name            | Value</span><br><span class="line">|</span><br><span class="line">+--------------------------+----------------------------------------------------</span><br><span class="line">+</span><br><span class="line">| character_set_client     | gbk</span><br><span class="line">|</span><br><span class="line">| character_set_connection | gbk</span><br><span class="line">|</span><br><span class="line">| character_set_database   | utf8</span><br><span class="line">|</span><br><span class="line">| character_set_filesystem | binary</span><br><span class="line">|</span><br><span class="line">| character_set_results    | gbk</span><br><span class="line">|</span><br><span class="line">| character_set_server     | utf8</span><br><span class="line">|</span><br><span class="line">| character_set_system     | utf8</span><br><span class="line">|</span><br><span class="line">| character_sets_dir       | E:\Soft\wamp\bin\mysql\mysql5.6.12\share\charsets\</span><br><span class="line">|</span><br><span class="line">+--------------------------+----------------------------------------------------</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>发现中文显示为“？”，然后我看了一下 mysql.ini，添加了两行</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="tit]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="中文乱码" scheme="http://ochukai.github.io/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改 wamp 中 mysql 默认空密码]]></title>
    <link href="http://ochukai.github.io/modify-wamp-mysql-password/"/>
    <id>http://ochukai.github.io/modify-wamp-mysql-password/</id>
    <published>2015-07-31T15:32:13.000Z</published>
    <updated>2015-11-23T02:59:25.158Z</updated>
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">use</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'hooray'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">use</span> my]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="paswword" scheme="http://ochukai.github.io/tags/paswword/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在网络暴力中捍卫自己]]></title>
    <link href="http://ochukai.github.io/protect-yourself-in-network/"/>
    <id>http://ochukai.github.io/protect-yourself-in-network/</id>
    <published>2015-07-10T13:52:53.000Z</published>
    <updated>2015-11-23T03:09:10.684Z</updated>
    <content type="html"><![CDATA[<p>我想先问大家一个问题，有谁一年365，天天被未曾谋面的陌生人骂?举手的这个人就站在你们面前。不过别担心，我今天不是来诉苦的，我是穿着马甲来跟大家分享如何被骂大的。</p>
<p>网络对于我们来说再日常不过，但是当你身处网络世界的围攻中，就不再那么轻松。2013年的以前，我作梦也想不到自己会变成网络世界里的“黑姑娘”。因为参演了一部电视剧，演技没有达到观众的预期，故事的结局不尽人意，而被推到了风口浪尖，让我从一个还在摸爬滚打的小演员，一夜之间变成了被大家声讨的“热门人物”。</p>
<p>震惊之余，让自己尽快从虚拟的世界中挣脱出来是我唯一的出路。我选择在网络声中被倒下，就在网络声中爬起来。有不少人认为，公众人物就应该具有强大的承受能力和耐力，打不还手，骂不还口。偶尔被坑蒙拐骗了，还要尽量先捂着不敢报警。</p>
<p>当我被骂得小有名气的时候，我就暗自思量。反正也挨骂，不如用最积极的方式迎接骂声。2013年3月3日，我在微博上发出了一条名为“爱的骂骂”的微博，既然大家那么需要宣泄，点击鼠标可以不用负责，那我也动动手指头，干点什么吧！</p>
<p>我在微博里面制定了骂的规则——骂，没问题，但请集中精力地骂。只要在我这条微博下面留言的，不管是鼓励我的、骂我的，还是随便说说的，我都认捐五毛。24个小时，有十万多条留言，捐款金额是50693.5元，作为北京一家残疾孤儿康复机构的手术费。</p>
<p>在这里，我要对每一位留言的人表示感谢。因为我们一起在虚拟的世界中救助了4个在现实生活中顽强生活着的残疾孤儿。其中有一个孩子，在手术后的那一年，终于有机会可以站起来了。那时候她还不满三岁。当我看到她第一次站起来，我很感动，也很骄傲，这个“黑姑娘”干了一件痛快的事。</p>
<p>是的，我说出了金额。我知道，一定会有人说“捐那么少，还好意思报数”。我相信现在大部分人都不愿意公布捐款金额，因为捐款已经不再是一件随心的行动，而是成为大家根据金额的多少来衡量爱心的大小。我相信在座的各位也一定有过朋友之间随份子该给多少才合适的烦恼。我之所以说出来，不仅仅是因为我不觉得随性的行为需要躲闪，更因为“爱的骂骂”是每一个留言人的镜子。当时骂过我的人，也许，在两年后的今天听到我说的这番话，会想起曾经不太善意的留言却给了这些孩子们机会获得新生。这同样值得高兴。</p>
<p>其实我们每个人都有不同阶段的新生，不是吗?“爱的骂骂”发出的那一刻，我如重生般释然了。虽然，我不像很多演员那样，拥有令人赞叹的表演才华，自己也觉得不是天生吃这碗饭的，但是既然选择了演员这份职业，我相信只要通过自己的努力和善待他人，就可以让自己的家人和自己过上幸福美满的生活。</p>
<p>然而这一切，在2013年的夏天被一句开创演艺界(网络)暴力先河的“滚出娱乐圈”所动摇。我是第一个(被)放在主语位置的人。袁姗姗这个名字好像从此就和“一无是处”划上了等号。那个时候，不管说什么、做什么、演什么都不对。更有媒体总结了“袁姗姗不被观众所喜欢的五大理由”，第一条理由是“没有理由”。这是得有多深厚的感情基础，才能达到的境界。</p>
<p>2013年确实挺让人操心的，从春天到夏天都没有平静过。一开始，我也有些懊恼，不知道到底发生了什么。我既然没有不劳而获，也没有做过伤天害理的事。为什么让我“滚”?!没多久，我想明白了一个道理，谁都可以说我不好，但是自己必须接纳那个心安理得的自己。既然我的演艺生涯要倒数开始，那我之后的每一点进步都是充满喜悦的。从零分到六十分比从满分到六十分，哪个更让人开心呢?</p>
<p>也是从那个时候，我重拾扔下了多年的小提琴，还有健身。运动让我心情愉悦。不工作的时候，练琴和健身会让我的每一天都过得很充实，根本没有过多的时间停留在网上，更顾不上网友的围观。我建议那些沉迷于网络的年轻人，每天可以挤出一点时间锻炼身体。当有朝一日被他人欺负的时候，至少可以像我一样，身轻如燕，自由翻滚。</p>
<p>不尽人意的2013年确实过得有些艰辛，但是我也时刻提醒着自己，别忘了尽可能给予所能达到的人以温暖。这是对鼓励过你的人最好的感激方式。但同时，我们也不要忽略身边朋友向你发出的求助信号。也许你的关心会改变他的决定。</p>
<p>我在来之前了解到几个数据。在美国，有40%的年轻人遭遇过网络欺凌侵害，甚至有些受害者因此而患上精神疾病，身心受损。联合国儿童基金会在2014年的9月发布了一则消息报道，在法国，6到18岁之间的青少年有12.5%的人都有过在网上被攻击的经历。在中国，因为网络暴力而结束生命的人，离我们的生活越来越近。</p>
<p>前不久，在台湾，有一位艺人因为网络暴力而自杀。听到这个消息的时候，我非常惋惜。我不知道她内心到底挣扎了多久。但当我看到这则新闻的时候，我有过一念之间的不安。如果在这之前，我可以跟她说几句话，她是不是好过一些?</p>
<p>互联网的时代，让人与人之间的沟通方式越来越便捷，沟通成本却越来越大。足不出户在网上匿名可以干很多事，每天都要面对接踵而来的海量信息，有谁还愿意费力去核实消息的真实性，也不会有太多人会为自己发出或转发的信息而深思熟虑。那还有多少人会为他人的生命叹息呢?</p>
<p>语言不应该成为致命的利器。网络的诞生也不应该是为了制造困扰，而是为了让生活变得更加美好。作为过去也许将来还会遭遇网络暴力的过来人，我不希望再有人因为网络暴力而受到伤害。请善用语言，让人言可敬。</p>
<p>特别感谢在那段特殊时间陪伴我的家人和朋友，感谢他们承受住了一个当时还没有来得及减肥、各方面份量都很重的我。经历了这些，并不是想说明自己有多强大，但确实因为这些切身经历让我有了足够的时间去思考。我曾经问过自己一个问题——如果我当时真的不堪重负放弃了演员这个职业，是否网络暴力就会消失？答案当然不会。既然还是要面对，就应该积极面对。</p>
<p>前不久，我参与了一部公益电影的拍摄。电影传递了一个非常积极的理念：每个人都有自由选择的机会和权利，无论你生下来是幸运的还是不幸的。我非常赞同，所以我选择做一个积极快乐的自己，不再受控于网络暴力中，不再只能看到消极的一面。</p>
<p>都说做公益是在帮助他人，在我身上，成全了一个更加快乐的自己。不知道大家有没有看过这部电影。电影的名字叫《有一天》。我想在这里特别推荐一下。虽然我只参演了电影的一部分，但也给我带来了很多启发和感动。这部电影关注了九类特殊儿童群体。我参与拍摄的故事和聋哑儿童有关。跟我一起搭档演出的也是一名聋哑儿童。拍摄之前，我还有些顾虑，我不知道该怎么去跟他交流，我担心会因为自己不小心的举动伤害到他。但是见面之后，我才发现成年人的世界真的是因为想太多了变得复杂。只要我们保持一颗平常的心，用平等的方式去交流，就不会存在特别的障碍。重要的是你怎么看，而不是他怎么想。</p>
<p>拍摄的那几天，我平静而快乐。每当完成一个镜头，这个小少年都会跟我竖起大拇指示意。他这个小小的举动也提醒了我和我们，有人选择赞美有人则不。</p>
<p>感谢“爱的骂骂”，感谢《有一天》，感谢喝倒彩时刻提醒我的人，感谢一直鼓励我的家人和朋友，感谢倔强中的那个自己。我希望能有更多的人可以像我一样，主动地从逆境中走出来。这个世界还有很多需要我们关心的事去做，需要我们关心的人去爱。保持自己的真实，倔强地活下去。</p>
<p>感谢大家的聆听，感谢网络世界将我带到你们面前。</p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我想先问大家一个问题，有谁一年365，天天被未曾谋面的陌生人骂?举手的这个人就站在你们面前。不过别担心，我今天不是来诉苦的，我是穿着马甲来跟大家分享如何被骂大的。</p>
<p>网络对于我们来说再日常不过，但是当你身处网络世界的围攻中，就不再那么轻松。2013年的以前，我作]]>
    </summary>
    
      <category term="tedx" scheme="http://ochukai.github.io/tags/tedx/"/>
    
      <category term="在网络暴力中捍卫自己" scheme="http://ochukai.github.io/tags/%E5%9C%A8%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B%E4%B8%AD%E6%8D%8D%E5%8D%AB%E8%87%AA%E5%B7%B1/"/>
    
      <category term="演讲稿" scheme="http://ochukai.github.io/tags/%E6%BC%94%E8%AE%B2%E7%A8%BF/"/>
    
      <category term="袁姗姗" scheme="http://ochukai.github.io/tags/%E8%A2%81%E5%A7%97%E5%A7%97/"/>
    
      <category term="生活杂记" scheme="http://ochukai.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Navicat 10.1.7 的注册码]]></title>
    <link href="http://ochukai.github.io/navicat-10-1-7-key/"/>
    <id>http://ochukai.github.io/navicat-10-1-7-key/</id>
    <published>2014-12-28T13:23:42.000Z</published>
    <updated>2015-11-23T02:50:13.501Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>NAVN-LNXG-XHHX-5NOO<br>名和组织随便写。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>NAVN-LNXG-XHHX-5NOO<br>名和组织随便写。</p>
</blockquote>
]]>
    </summary>
    
      <category term="mysql" scheme="http://ochukai.github.io/tags/mysql/"/>
    
      <category term="navicat" scheme="http://ochukai.github.io/tags/navicat/"/>
    
      <category term="MySQL" scheme="http://ochukai.github.io/categories/MySQL/"/>
    
  </entry>
  
</feed>
