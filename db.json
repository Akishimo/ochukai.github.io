{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/strict/source/img/white-2.jpg","path":"img/white-2.jpg","modified":0},{"_id":"themes/strict/source/img/love-2.jpg","path":"img/love-2.jpg","modified":0},{"_id":"themes/strict/source/img/bg-1.png","path":"img/bg-1.png","modified":0},{"_id":"themes/strict/source/fonts/icon.woff","path":"fonts/icon.woff","modified":0},{"_id":"themes/strict/source/fonts/icon.ttf","path":"fonts/icon.ttf","modified":0},{"_id":"themes/strict/source/fonts/icon.svg","path":"fonts/icon.svg","modified":0},{"_id":"themes/strict/source/fonts/icon.eot","path":"fonts/icon.eot","modified":0},{"_id":"themes/strict/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"source/images/li-queue-in.png","path":"images/li-queue-in.png","modified":0},{"_id":"source/images/aise-normal.png","path":"images/aise-normal.png","modified":0},{"_id":"source/images/aise-broken.png","path":"images/aise-broken.png","modified":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0},{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"themes/strict/source/js/main.js","path":"js/main.js","modified":1}],"Cache":[{"_id":"source/404.html","shasum":"f7d32c6d1ddac7caa964d346c19e920fa7b3986f","modified":1455684992000},{"_id":"source/CNAME","shasum":"07dbc8a8365a5d7ecb5e6ad61be17591ccc3d610","modified":1456893033000},{"_id":"source/_drafts/git-in-action.md","shasum":"af4e1cd6d80ca6b4eeb40ab112868768df6189b5","modified":1456997649000},{"_id":"source/README.md","shasum":"2002f06cfffb64e8d4e17d4049c8393294a4ad58","modified":1456893296000},{"_id":"source/_posts/css-animation-queue-list.md","shasum":"a75b99a5f99df752ddeccc612950a228b669ac31","modified":1457002240000},{"_id":"source/_posts/baseview-in-backbone.md","shasum":"f885428706520ccabcdcb3a1d13205bc82106330","modified":1455684992000},{"_id":"source/_posts/esekesu-senkanno-onnanoko.md","shasum":"9def17a2188af103bcd94872201f3d5cfb728749","modified":1456988429000},{"_id":"source/_posts/battleship-girls.md","shasum":"9bdded1fc76d3e506df1701b806b21674934fe27","modified":1456984228000},{"_id":"source/_posts/for-in-scss.md","shasum":"6a6384ae79a4d306ad174ac45f667c508c1ddf33","modified":1456988590000},{"_id":"source/_posts/kill-process.md","shasum":"ace444c2b2b114663bcd10b0dd3dcc88d02740be","modified":1456482934000},{"_id":"source/_posts/git-remember-password-in-window-and-linux.md","shasum":"da56f267e60aeb2c4e08485d6c8c40cd21f4bde8","modified":1455684992000},{"_id":"source/_posts/modify-wamp-mysql-password.md","shasum":"e6e021d2977ef4b1457da09032fe4ae0200266fb","modified":1455684992000},{"_id":"source/_posts/telephone-number-not-recognize-in-wx.md","shasum":"375be2496320e61861d3dc678fa349d227e0597a","modified":1456988676000},{"_id":"source/_posts/navicat-10-1-7-key.md","shasum":"658b481b8d975386ef75f6b7c31f103f453e8617","modified":1455684992000},{"_id":"source/_posts/protect-yourself-in-network.md","shasum":"5b0a2bf7ef90bc59deea95abe44d1491122530a8","modified":1455684992000},{"_id":"source/_posts/show-a-default-image-when-the-image-is-broken.md","shasum":"ea73292a6b4653ae80d2fc3e8ccbe7ca9eb4033a","modified":1455684992000},{"_id":"source/_posts/write-a-compatible-js-module.md","shasum":"24853a140ea4ff416b604e07da5bc12368affee4","modified":1455684992000},{"_id":"source/_posts/wamp-mysql-chinese-question-mark.md","shasum":"946a7f6656990ded7ecb1125b487e1b074adbce3","modified":1455684992000},{"_id":"source/_posts/wrong-clearfix-make-me-crazy.md","shasum":"3eed8e319b68488d45f5a3c8aff6d7c205c11b18","modified":1455684992000},{"_id":"source/_posts/use-js-to-convert-ts-to-data.md","shasum":"81fa639ef12dff6f0389b6f1434f3657091a502e","modified":1455684992000},{"_id":"source/about/index.md","shasum":"186904652c5c278d19a3cfb9418b09ea1a4ab927","modified":1455684992000},{"_id":"source/categories/index.md","shasum":"ba3a1a01177f3302e0ee582f12ae632b7ea7863b","modified":1455684992000},{"_id":"source/favicon.ico","shasum":"c0159d635085448ccc0aa746d03b48469bffb12c","modified":1455684992000},{"_id":"source/images/li-queue-in.png","shasum":"e8768cc7bbb1baa4f447c70d38ae423b7228227a","modified":1456986329000},{"_id":"source/tags/index.md","shasum":"4445c40ee0b358068f699f63a6af8910313eec13","modified":1455684992000},{"_id":"themes/strict/layout/_views/foot.jade","shasum":"79fe983e9e08ad4bc45d83f17533aa16d849c673","modified":1457063805000},{"_id":"themes/strict/_config.yml","shasum":"baa0f1efbe735f1266f0b769361c699853ee9cf7","modified":1457059533000},{"_id":"themes/strict/layout/_views/menu.jade","shasum":"77a33ac339763dda1334edfca8ca6ec1ae7a5589","modified":1455684992000},{"_id":"themes/strict/layout/_views/head.jade","shasum":"4d670e0e72a1dcb643191edb4f7d4b72c3c6d45b","modified":1457059543000},{"_id":"themes/strict/layout/_views/main.jade","shasum":"871ee2b7f843a4d668d76af36fc8641cc0bfe9ee","modified":1455684992000},{"_id":"themes/strict/layout/category.jade","shasum":"d1ed33f34d91e465394b82c7ce4f89dc596ce7ba","modified":1455684992000},{"_id":"themes/strict/layout/archive.jade","shasum":"6de7fe251c04f2ab6967ff96765adf9bb544e237","modified":1455684992000},{"_id":"themes/strict/layout/_views/nav.jade","shasum":"12e44f11add7900c41b165b64acb1fc04e6209aa","modified":1455684992000},{"_id":"themes/strict/layout/_views/post.jade","shasum":"2d92ca3259bca59e243f534ef9a41de8a22a5523","modified":1455685221000},{"_id":"themes/strict/layout/tag.jade","shasum":"fdc46250473ed96748a80dc56c62f4160ee6824c","modified":1455684992000},{"_id":"themes/strict/layout/page.jade","shasum":"1788e6900a3398603c111346ce9d033e780a3d60","modified":1455684992000},{"_id":"themes/strict/layout/index.jade","shasum":"39af85250c8a3fc267b51a479c642dd81e1b8314","modified":1455684992000},{"_id":"themes/strict/layout/post.jade","shasum":"51dd42e28580604fecf8ee6545bfe3513bac651c","modified":1455684992000},{"_id":"themes/strict/source/css/base/_font.styl","shasum":"7c16dcc09c5897d2433476fd8077e1c1117a26ae","modified":1455684992000},{"_id":"themes/strict/source/css/_var.styl","shasum":"f1b148b66ce5c5557db83b067cd9d81bc8fa17c1","modified":1456893402000},{"_id":"themes/strict/source/css/base/_base.styl","shasum":"e7af14148eb1d4827dcea0d85f6755e9b79c6669","modified":1457059033000},{"_id":"themes/strict/source/css/_main-r.styl","shasum":"52b20d012b866e1cf1efb8683b76f329585d3c39","modified":1456996865000},{"_id":"themes/strict/source/css/base/_util.styl","shasum":"e01fda8bf22966b39dab3c978155780c9899a571","modified":1455684992000},{"_id":"themes/strict/source/css/main.styl","shasum":"5d9337a2999423c0c52d27ec4ef1b6831f1aef0b","modified":1455684992000},{"_id":"themes/strict/source/css/base/_mixin.styl","shasum":"a30fbdd99e796ba2015e561a650dd031b25a9aed","modified":1455684992000},{"_id":"themes/strict/source/css/base/_reset.styl","shasum":"ac35c98496a68343d295e6f9178cc783c00cc0ed","modified":1455684992000},{"_id":"themes/strict/source/css/partial/_post.styl","shasum":"bf957d979483cd9d1aa38e5612ee51e1a8e43db9","modified":1456990254000},{"_id":"themes/strict/source/css/partial/_main.styl","shasum":"18b14bc516150b9e361b5a20d364cab7b6768e2a","modified":1457059033000},{"_id":"themes/strict/source/css/vendor/_echo.styl","shasum":"7bc4901ff6c063b0713a3ba842ef711f756875ed","modified":1455684992000},{"_id":"themes/strict/source/css/vendor/_highlight.styl","shasum":"5094c4259942da75a855418716aa9a133c9227ba","modified":1455684992000},{"_id":"themes/strict/source/css/vendor/_normalize.styl","shasum":"942fe069cfb511f7168da1a4c50b1d88b85b8e74","modified":1455684992000},{"_id":"themes/strict/source/fonts/icon.eot","shasum":"9097fa8611053f4c2e5f35cd2a64efc40bd8b685","modified":1455684992000},{"_id":"themes/strict/source/fonts/icon.ttf","shasum":"9a18ee1b1f245f6cc2c61fd1ebe58266b6c451ba","modified":1455684992000},{"_id":"themes/strict/source/fonts/icon.svg","shasum":"bd5e9e4f5343c9d49ede3145417c87155334881e","modified":1455684992000},{"_id":"themes/strict/source/fonts/icon.woff","shasum":"7d15057502dd0086931b763ebc62458c8669b4ed","modified":1455684992000},{"_id":"themes/strict/source/img/love-2.jpg","shasum":"b494da1ccfcd2e02ffa347da893020788e600410","modified":1456542931000},{"_id":"source/images/aise-normal.png","shasum":"24e114a88b0da9d2a99ea6cae9159fad3df26b7b","modified":1456985003000},{"_id":"themes/strict/source/img/white-2.jpg","shasum":"52d7fffb9e25eb5657117f4bd517296a6f670ceb","modified":1456542931000},{"_id":"source/images/aise-broken.png","shasum":"d7ef6c1cdf8aee201a4a5c3b16626766fff3cf7c","modified":1456985016000},{"_id":"themes/strict/source/img/bg-1.png","shasum":"2fdd542b206736c4c75242bb45aab995c9cff6b4","modified":1456995263000},{"_id":"public/img/white-2.jpg","modified":1457062123071,"shasum":"52d7fffb9e25eb5657117f4bd517296a6f670ceb"},{"_id":"public/img/love-2.jpg","modified":1457062123079,"shasum":"b494da1ccfcd2e02ffa347da893020788e600410"},{"_id":"public/img/bg-1.png","modified":1457062123085,"shasum":"2fdd542b206736c4c75242bb45aab995c9cff6b4"},{"_id":"public/fonts/icon.woff","modified":1457062123091,"shasum":"7d15057502dd0086931b763ebc62458c8669b4ed"},{"_id":"public/fonts/icon.ttf","modified":1457062123099,"shasum":"9a18ee1b1f245f6cc2c61fd1ebe58266b6c451ba"},{"_id":"public/fonts/icon.svg","modified":1457062123105,"shasum":"bd5e9e4f5343c9d49ede3145417c87155334881e"},{"_id":"public/fonts/icon.eot","modified":1457062123110,"shasum":"9097fa8611053f4c2e5f35cd2a64efc40bd8b685"},{"_id":"public/css/main.css","modified":1457062123557,"shasum":"d4e8f35403dc93490a00f8a2c06799c833f195c0"},{"_id":"public/images/li-queue-in.png","modified":1457062123628,"shasum":"e8768cc7bbb1baa4f447c70d38ae423b7228227a"},{"_id":"public/images/aise-normal.png","modified":1457062123636,"shasum":"24e114a88b0da9d2a99ea6cae9159fad3df26b7b"},{"_id":"public/images/aise-broken.png","modified":1457062123643,"shasum":"d7ef6c1cdf8aee201a4a5c3b16626766fff3cf7c"},{"_id":"public/favicon.ico","modified":1457062123653,"shasum":"c0159d635085448ccc0aa746d03b48469bffb12c"},{"_id":"public/CNAME","modified":1457062123655,"shasum":"07dbc8a8365a5d7ecb5e6ad61be17591ccc3d610"},{"_id":"public/404.html","modified":1457062123932,"shasum":"b3566d202f7b0cca990b448b9dcf82b0a49f57cb"},{"_id":"public/tags/index.html","modified":1457062124155,"shasum":"cb77f10e6beaf78c6a66f848568495e4feed416d"},{"_id":"public/categories/index.html","modified":1457062124354,"shasum":"a683dec28b58bc57e5239aabd76284d19b01a6d0"},{"_id":"public/about/index.html","modified":1457062124491,"shasum":"d90c75fe8e770b105de26c81ed7adfe2051c375c"},{"_id":"public/README.html","modified":1457062124611,"shasum":"3eaf6df34df3faf5fce018fa842e3daf0dd9de75"},{"_id":"public/css-animation-queue-list/index.html","modified":1457062124707,"shasum":"1febde0549d67d18c235f4f810f1d8ebb3db1778"},{"_id":"public/esekesu-senkanno-onnanoko/index.html","modified":1457062124781,"shasum":"b63f156e2b60c306c64a80f4d67024eb3ec8d5c4"},{"_id":"public/for-in-scss/index.html","modified":1457062124860,"shasum":"43198bee2a6c1947678c563a87ae2cc31d59f39c"},{"_id":"public/telephone-number-not-recognize-in-wx/index.html","modified":1457062124968,"shasum":"680fe1b768655a579425edb45cfd02e491f737ca"},{"_id":"public/kill-process/index.html","modified":1457062125001,"shasum":"7ec0b0fa1232ca26298b3b8f3af5e663a052caf0"},{"_id":"public/battleship-girls/index.html","modified":1457062125059,"shasum":"fd198ee457b80fa551d8e55b9617908819e40055"},{"_id":"public/use-js-to-convert-ts-to-data/index.html","modified":1457062125092,"shasum":"fee2cd33d27a991e7869ffdbfaf78485939b928c"},{"_id":"public/write-a-compatible-js-module/index.html","modified":1457062125155,"shasum":"6d8843bd37437afd39c895fce905933cd7f426a9"},{"_id":"public/show-a-default-image-when-the-image-is-broken/index.html","modified":1457062125187,"shasum":"05d0e943143b7b5dc2d8124b18c7f5dcb5650904"},{"_id":"public/git-remember-password-in-window-and-linux/index.html","modified":1457062125239,"shasum":"d37bf09ede8dc4780c3b18702d5cb0f169eda766"},{"_id":"public/baseview-in-backbone/index.html","modified":1457062125285,"shasum":"3535fda0fbe7f3056342a4604c137abb80370e6e"},{"_id":"public/wrong-clearfix-make-me-crazy/index.html","modified":1457062125319,"shasum":"bd898b531e3f5a476dd4a97a4b80a0d184b243c2"},{"_id":"public/wamp-mysql-chinese-question-mark/index.html","modified":1457062125366,"shasum":"06588ce283c796682a430fd8a21e7e1c009f7249"},{"_id":"public/modify-wamp-mysql-password/index.html","modified":1457062125397,"shasum":"9aaf582470017fdd278134a700bbb0fd4d18ffb9"},{"_id":"public/protect-yourself-in-network/index.html","modified":1457062125443,"shasum":"6b3a94e7fbce662f8d0531b48ed8584f10b1d5bd"},{"_id":"public/navicat-10-1-7-key/index.html","modified":1457062125471,"shasum":"685ca7ed19064a26425acc325d4c8fa3e122f53b"},{"_id":"public/archives/index.html","modified":1457062125524,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/page/2/index.html","modified":1457062125573,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/page/3/index.html","modified":1457062125612,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2014/index.html","modified":1457062125669,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2014/12/index.html","modified":1457062125701,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2015/index.html","modified":1457062125754,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2015/page/2/index.html","modified":1457062125785,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2015/07/index.html","modified":1457062125840,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2015/08/index.html","modified":1457062125872,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2015/11/index.html","modified":1457062125921,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2015/12/index.html","modified":1457062125972,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2016/index.html","modified":1457062126028,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2016/02/index.html","modified":1457062126070,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/archives/2016/03/index.html","modified":1457062126119,"shasum":"15b6cea8e8eb9c650ece97cda3bfde6d9c8512f0"},{"_id":"public/categories/css/index.html","modified":1457062126169,"shasum":"b49b2d1aa5b08bc90dbb4c17af3ef14b88dc46c7"},{"_id":"public/categories/javascript/index.html","modified":1457062126206,"shasum":"00405c2ab6316a57cc6a5f739b725c777227a6ac"},{"_id":"public/categories/mysql/index.html","modified":1457062126260,"shasum":"89cee487b2b591e08ce81a7ddde4d325d9a6b4f1"},{"_id":"public/categories/微信开发/index.html","modified":1457062126291,"shasum":"111cc6fbb32a6e8b93469145ac22db37c7b55335"},{"_id":"public/categories/生活杂记/index.html","modified":1457062126334,"shasum":"aa1b6efc5889ebdad8105b9fc7f3a146eefd442b"},{"_id":"public/categories/linux/index.html","modified":1457062126363,"shasum":"a427516857692d9599ec7ee5e3f650ac66c461a2"},{"_id":"public/categories/git/index.html","modified":1457062126409,"shasum":"833c6da7dd687bf7d7eae7fffb611b7d9f8c2f3f"},{"_id":"public/categories/sass/index.html","modified":1457062126435,"shasum":"c26016a1cb11407e39b3bc06688586c0ba54a278"},{"_id":"public/categories/戦艦の女の子/index.html","modified":1457062126479,"shasum":"0d88551acaee79b75a07fe6defef1afafd5f952f"},{"_id":"public/categories/backbone/index.html","modified":1457062126509,"shasum":"e0594291ef39ebb0966190a81b28c3584e031f1f"},{"_id":"public/atom.xml","modified":1457062126513,"shasum":"0b3569af955a1d192ba34625364bae0ca71b8d35"},{"_id":"public/index.html","modified":1457062126575,"shasum":"6c415e751364bccf40408a8aef5a3157ac31ff7e"},{"_id":"public/page/2/index.html","modified":1457062126633,"shasum":"221243bdbc2b5d34ad4b19e7f7123fe0d469f172"},{"_id":"public/page/3/index.html","modified":1457062126695,"shasum":"965775b6b53ea2379d4c14852ad64442452b28ca"},{"_id":"public/sitemap.xml","modified":1457062126697,"shasum":"06fe9d00ce786f122b887330d084f1500ab7dcc8"},{"_id":"public/tags/html/index.html","modified":1457062126735,"shasum":"d4f6e4d0355b91ce7dee4671d0cc45f237d37e9d"},{"_id":"public/tags/css/index.html","modified":1457062126793,"shasum":"6bd2d320ee89e49e1b51e5886093f9994f0a082d"},{"_id":"public/tags/compatible-module/index.html","modified":1457062126823,"shasum":"3af1b987101036dac3494b7bce734ac28173d89f"},{"_id":"public/tags/amd/index.html","modified":1457062126873,"shasum":"bc2fafb270cdd5adc5bfca575f53e8a15af0936e"},{"_id":"public/tags/cmd/index.html","modified":1457062126900,"shasum":"ca0c7b01d673243f831f070d463957b4977304c1"},{"_id":"public/tags/mysql/index.html","modified":1457062126950,"shasum":"3a31a3e3a5dcae2396883aea32541bf45e3f143d"},{"_id":"public/tags/中文乱码/index.html","modified":1457062126978,"shasum":"122da06f30e1d9e157b76e9d55f4e7772a340eff"},{"_id":"public/tags/ts/index.html","modified":1457062127038,"shasum":"c7b41548703a7e586b6f30eda916e77757e26a8a"},{"_id":"public/tags/date/index.html","modified":1457062127070,"shasum":"a734bc3711b03a21ea93505301b5256b89610d37"},{"_id":"public/tags/format/index.html","modified":1457062127130,"shasum":"dc2bb03d2d70bf320bbfba751b3856561dde8fb7"},{"_id":"public/tags/js/index.html","modified":1457062127161,"shasum":"554145aea1e2f51b2f6cfa282c7ea19fca70c09a"},{"_id":"public/tags/微信开发/index.html","modified":1457062127211,"shasum":"111cc6fbb32a6e8b93469145ac22db37c7b55335"},{"_id":"public/tags/imgage-error/index.html","modified":1457062127244,"shasum":"964f884dd4b8858ddd118804bbb38cd4d9ca910a"},{"_id":"public/tags/tedx/index.html","modified":1457062127294,"shasum":"0f571dff5b05b14ac48c57d0752d6dc92cdb95e1"},{"_id":"public/tags/在网络暴力中捍卫自己/index.html","modified":1457062127326,"shasum":"d8645243292e5586581e1ba16c189f8483093b97"},{"_id":"public/tags/演讲稿/index.html","modified":1457062127380,"shasum":"cf5d8f59db910704b55e51db0a1c6c302c1c1579"},{"_id":"public/tags/袁姗姗/index.html","modified":1457062127412,"shasum":"e1c618578f9874afc92d752329b8f76efad0176c"},{"_id":"public/tags/navicat/index.html","modified":1457062127480,"shasum":"6cf90da1681eb1f83e72d01394bfeba153d946e2"},{"_id":"public/tags/paswword/index.html","modified":1457062127532,"shasum":"370b762e6762256c3ff2c492a4e0c8cd68bffb0e"},{"_id":"public/tags/端口占用/index.html","modified":1457062127598,"shasum":"59bbe9d76a51c3a8da62e8b4d3293132a7085cab"},{"_id":"public/tags/git/index.html","modified":1457062127639,"shasum":"7e8d9eb5cb5924c66d0742714af43bd160a47cd3"},{"_id":"public/tags/记住密码/index.html","modified":1457062127694,"shasum":"c614bc2d3009d87b6d4180adcb978cfef3850cd7"},{"_id":"public/tags/scss/index.html","modified":1457062127743,"shasum":"0407a0f65e90a5f1b645491f2b6d7ba85a758f5f"},{"_id":"public/tags/for/index.html","modified":1457062127796,"shasum":"8b7eb7e11b175658af7c51d288b6dafbb6e2bc53"},{"_id":"public/tags/埃塞克斯/index.html","modified":1457062127874,"shasum":"9ff965f589f1f63abf9e6882f77d34d4a6fc6ad8"},{"_id":"public/tags/航母/index.html","modified":1457062127991,"shasum":"5e8c32af9e0846b08a231897b9b3579e32bf6ca9"},{"_id":"public/tags/animation/index.html","modified":1457062128068,"shasum":"26c1a16f86d8724de63f3a1f7ccbf3c1376330ef"},{"_id":"public/tags/建造公式/index.html","modified":1457062128121,"shasum":"0557c6d0a3da5d5ff8c6a707ff250faa0f9e986d"},{"_id":"public/tags/backbone/index.html","modified":1457062128165,"shasum":"cf748327d19a36eddc34277645ac4f7ee2a47775"},{"_id":"public/tags/base/index.html","modified":1457062128222,"shasum":"2512d01c3bb84c933995ca38001e5d34bffb9caf"},{"_id":"public/tags/view/index.html","modified":1457062128298,"shasum":"b0b7104bbde62192b60da60a405d1a3c1bd0cfca"},{"_id":"themes/strict/source/js/main.js","shasum":"9a832de00aec2d28dfdc636fbd8774edfebdfded","modified":1457063436000}],"Category":[{"name":"css","_id":"cild560w800054kzajq19tsqe"},{"name":"JavaScript","_id":"cild560wi000c4kzam7dq2kp4"},{"name":"MySQL","_id":"cild560wl000l4kza3eq45fw6"},{"name":"微信开发","_id":"cild560ww00124kzadi00fnrs"},{"name":"生活杂记","_id":"cild560x4001b4kzagw8apyrj"},{"name":"LINUX","_id":"cild560xh001w4kzau0j4h7w5"},{"name":"GIT","_id":"cild560xk00214kzal3qnlgs1"},{"name":"SASS","_id":"cild560xm00284kzabrcgi5r2"},{"name":"戦艦の女の子","_id":"cild560xp002f4kza5qd62fxh"},{"name":"CSS","_id":"cild560xs002m4kzazr365dbj"},{"name":"Backbone","_id":"cild560y4002w4kza2gpy93r3"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","date":"2016-02-17T04:56:32.000Z","updated":"2016-02-17T04:56:32.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cild560vk00004kzaij6o0mck"},{"title":"Tagcloud","date":"2015-11-07T09:35:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: Tagcloud\ndate: 2015-11-07 17:35:00\ntype: \"tags\"\n---","updated":"2016-02-17T04:56:32.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cild560vu00014kza0tegtrw3"},{"title":"分类","date":"2015-11-07T09:35:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-11-07 17:35:00\ntype: \"categories\"\n---","updated":"2016-02-17T04:56:32.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cild560vy00024kza47m19lg7"},{"title":"about","date":"2015-11-07T09:39:49.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-11-07 17:39:49\n---\n","updated":"2016-02-17T04:56:32.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cild560vz00034kzara89t3ix"},{"_content":"# I am Oliver~\n","source":"README.md","raw":"# I am Oliver~\n","date":"2016-03-02T04:34:56.000Z","updated":"2016-03-02T04:34:56.000Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cild560y700374kzah9xj531t"}],"Post":[{"title":"Wrong clearfix Make me crazy!","date":"2015-11-11T09:45:59.000Z","_content":"\nClearfix 就是这么简单！\n```css\n.clearfix:after,\n.clearfix:before {\n    display: table;\n    content: \" \"\n}\n\n.clearfix:after {\n    clear: both\n}\n```\n","source":"_posts/wrong-clearfix-make-me-crazy.md","raw":"title: 'Wrong clearfix Make me crazy!'\ndate: 2015-11-11 17:45:59\ntags:\n  - html\n  - css\ncategories:\n  - css\n---\n\nClearfix 就是这么简单！\n```css\n.clearfix:after,\n.clearfix:before {\n    display: table;\n    content: \" \"\n}\n\n.clearfix:after {\n    clear: both\n}\n```\n","slug":"wrong-clearfix-make-me-crazy","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560w200044kzadjsf8dq3"},{"title":"编写一个可以兼容 AMD 和 CMD 的 js 模块","date":"2015-11-29T12:11:07.000Z","_content":"\n没什么好解释的，直接看代码吧。\n\n```js\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        //define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS style for Browserify/Seajs\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        // Browser globals\n        factory(jQuery, _);\n        //factory();\n    }\n}(function ($, _) {\n    //doSomething...\n}));\n```\n\n还有一种写法\n```js\n// from: http://segmentfault.com/a/1190000003732752\n;(function(){\n    function MyModule() {\n        // ...\n    }\n    \n    var moduleName = MyModule;\n    if (typeof module !== 'undefined' && typeof exports === 'object') {\n        module.exports = moduleName;\n    } else if (typeof define === 'function' && (define.amd || define.cmd)) {\n        define(function() { return moduleName; });\n    } else {\n        this.moduleName = moduleName;\n    }\n}).call(function() {\n    return this || (typeof window !== 'undefined' ? window : global);\n});\n```","source":"_posts/write-a-compatible-js-module.md","raw":"title: 编写一个可以兼容 AMD 和 CMD 的 js 模块\ntags:\n  - compatible module\n  - AMD\n  - CMD\ncategories:\n  - JavaScript\ndate: 2015-11-29 20:11:07\n---\n\n没什么好解释的，直接看代码吧。\n\n```js\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        //define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS style for Browserify/Seajs\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        // Browser globals\n        factory(jQuery, _);\n        //factory();\n    }\n}(function ($, _) {\n    //doSomething...\n}));\n```\n\n还有一种写法\n```js\n// from: http://segmentfault.com/a/1190000003732752\n;(function(){\n    function MyModule() {\n        // ...\n    }\n    \n    var moduleName = MyModule;\n    if (typeof module !== 'undefined' && typeof exports === 'object') {\n        module.exports = moduleName;\n    } else if (typeof define === 'function' && (define.amd || define.cmd)) {\n        define(function() { return moduleName; });\n    } else {\n        this.moduleName = moduleName;\n    }\n}).call(function() {\n    return this || (typeof window !== 'undefined' ? window : global);\n});\n```","slug":"write-a-compatible-js-module","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560wf000b4kza8tt27p0c"},{"title":"wamp mysql 中文显示为？","id":"235","date":"2015-08-09T05:25:28.000Z","_content":"\n发现中文显示为“？”，然后我看了一下 mysql.ini，添加了两行\n\n```\n[mysqld]\nport=3306\n#下面的两行是添加的\ncharacter_set_client=utf8\ncharacter_set_server=utf8\n```\n\n后来再看 mysql 中的信息发现这样了，不过中文问题已经解决了。\n```sql\nmysql> show variables like 'character%';\n+--------------------------+----------------------------------------------------\n+\n| Variable_name            | Value\n|\n+--------------------------+----------------------------------------------------\n+\n| character_set_client     | gbk\n|\n| character_set_connection | gbk\n|\n| character_set_database   | utf8\n|\n| character_set_filesystem | binary\n|\n| character_set_results    | gbk\n|\n| character_set_server     | utf8\n|\n| character_set_system     | utf8\n|\n| character_sets_dir       | E:\\Soft\\wamp\\bin\\mysql\\mysql5.6.12\\share\\charsets\\\n|\n+--------------------------+----------------------------------------------------\n```","source":"_posts/wamp-mysql-chinese-question-mark.md","raw":"title: wamp mysql 中文显示为？\ntags:\n  - mysql\n  - 中文乱码\nid: 235\ncategories:\n  - MySQL\ndate: 2015-08-09 13:25:28\n---\n\n发现中文显示为“？”，然后我看了一下 mysql.ini，添加了两行\n\n```\n[mysqld]\nport=3306\n#下面的两行是添加的\ncharacter_set_client=utf8\ncharacter_set_server=utf8\n```\n\n后来再看 mysql 中的信息发现这样了，不过中文问题已经解决了。\n```sql\nmysql> show variables like 'character%';\n+--------------------------+----------------------------------------------------\n+\n| Variable_name            | Value\n|\n+--------------------------+----------------------------------------------------\n+\n| character_set_client     | gbk\n|\n| character_set_connection | gbk\n|\n| character_set_database   | utf8\n|\n| character_set_filesystem | binary\n|\n| character_set_results    | gbk\n|\n| character_set_server     | utf8\n|\n| character_set_system     | utf8\n|\n| character_sets_dir       | E:\\Soft\\wamp\\bin\\mysql\\mysql5.6.12\\share\\charsets\\\n|\n+--------------------------+----------------------------------------------------\n```","slug":"wamp-mysql-chinese-question-mark","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560wl000k4kzanu1r7egc"},{"title":"JavaScript 中 Timestamp 与 Date 的转化","date":"2015-12-02T03:10:44.000Z","_content":"## 问题产生\n今天在处理一个接口时，发现返回的格式是这样的：\n```json\n{\n    \"meta\": {\n        \"has_next_msg\": false\n    },\n    \"objects\": [\n        {\n            \"text\": \"111\",\n            \"from_user_type\": \"PAT\",\n            \"pic\": \"\",\n            \"ts\": 1419939065\n        }\n    ]\n}\n```\n\n`ts` 那个属性我不太熟悉，不过我觉得应该是 timestamp 的意思吧。后来才知道，`ts` 就是该条消息的发送时间戳（timestamp），显示这条信息的时候应该显示为日期。\n\n## 把 Date 转化为 Timestamp\n\n我们都知道，在 js 里面把 date 转化为 timestamp 的方法比较简单，而且方法也有好多种，比如：\n\n```js\n// get the timestamp in seconds\nMath.floor(Date.now() / 1000);\n\n// or with a slightly way\nDate.now() / 1000 | 0\n\n// Year 2038 problem? lol...\nnew Date('Jan 1, 2039') / 1000 | 0 // -2117514496 \n\n/*----------*/\nMath.round(new Date().getTime()/1000);\n\n+new Date / 1000 | 0\n\n~~(Date.now() / 1000)\n\nnew Date / 1e3 | 0\n```\n\n## 把 Timestamp 转化为 Date\n\n还有一种需求，比如我要把 timestamp 转化为 `1991-10-03 06:01:54` ，那么就需要先把这个 timestamp 转化为日期， 然后再进行format吧，正好我找到一个比较方便的办法：\n```js\nDate.prototype.format = function(format) {\n    var o = {\n        'M+': this.getMonth() + 1,          // month\n        'd+': this.getDate(),                 // day\n        'h+': this.getHours(),                  // hour\n        'm+': this.getMinutes(),                  // minute\n        's+': this.getSeconds(),                    // second     \n        'q+': Math.floor((this.getMonth() + 3) / 3),  // quarter\n        'S' : this.getMilliseconds()                 // millisecond\n    };\n\n    // year\n    if (/(y+)/.test(format) || /(Y+)/.test(format)) {\n        format = format.replace(RegExp.$1, (this.getFullYear() + '')\n                       .substr(4 - RegExp.$1.length));\n    }\n\n    for (var k in o) {\n        if (new RegExp('(' + k + ')').test(format)) {\n            var first = RegExp.$1;\n            var str = first.length === 1\n                    ? o[k]\n                    : ('00' + o[k]).substr(('' + o[k]).length); // nb\n            format = format.replace(first, str);\n        }\n    }\n\n    return format;\n};\n\nfunction tsToDate(timestamp) {\n    return (new Date(timestamp * 1000)).format('yyyy-MM-dd hh:mm:ss');\n}\n\n\n// test it\n> tsToDate(1448967948)\n< \"2015-12-01 19:05:48\"\n```\n","source":"_posts/use-js-to-convert-ts-to-data.md","raw":"title: JavaScript 中 Timestamp 与 Date 的转化\ntags:\n  - ts\n  - date\n  - format\n  - js\ncategories:\n  - JavaScript\ndate: 2015-12-02 11:10:44\n---\n## 问题产生\n今天在处理一个接口时，发现返回的格式是这样的：\n```json\n{\n    \"meta\": {\n        \"has_next_msg\": false\n    },\n    \"objects\": [\n        {\n            \"text\": \"111\",\n            \"from_user_type\": \"PAT\",\n            \"pic\": \"\",\n            \"ts\": 1419939065\n        }\n    ]\n}\n```\n\n`ts` 那个属性我不太熟悉，不过我觉得应该是 timestamp 的意思吧。后来才知道，`ts` 就是该条消息的发送时间戳（timestamp），显示这条信息的时候应该显示为日期。\n\n## 把 Date 转化为 Timestamp\n\n我们都知道，在 js 里面把 date 转化为 timestamp 的方法比较简单，而且方法也有好多种，比如：\n\n```js\n// get the timestamp in seconds\nMath.floor(Date.now() / 1000);\n\n// or with a slightly way\nDate.now() / 1000 | 0\n\n// Year 2038 problem? lol...\nnew Date('Jan 1, 2039') / 1000 | 0 // -2117514496 \n\n/*----------*/\nMath.round(new Date().getTime()/1000);\n\n+new Date / 1000 | 0\n\n~~(Date.now() / 1000)\n\nnew Date / 1e3 | 0\n```\n\n## 把 Timestamp 转化为 Date\n\n还有一种需求，比如我要把 timestamp 转化为 `1991-10-03 06:01:54` ，那么就需要先把这个 timestamp 转化为日期， 然后再进行format吧，正好我找到一个比较方便的办法：\n```js\nDate.prototype.format = function(format) {\n    var o = {\n        'M+': this.getMonth() + 1,          // month\n        'd+': this.getDate(),                 // day\n        'h+': this.getHours(),                  // hour\n        'm+': this.getMinutes(),                  // minute\n        's+': this.getSeconds(),                    // second     \n        'q+': Math.floor((this.getMonth() + 3) / 3),  // quarter\n        'S' : this.getMilliseconds()                 // millisecond\n    };\n\n    // year\n    if (/(y+)/.test(format) || /(Y+)/.test(format)) {\n        format = format.replace(RegExp.$1, (this.getFullYear() + '')\n                       .substr(4 - RegExp.$1.length));\n    }\n\n    for (var k in o) {\n        if (new RegExp('(' + k + ')').test(format)) {\n            var first = RegExp.$1;\n            var str = first.length === 1\n                    ? o[k]\n                    : ('00' + o[k]).substr(('' + o[k]).length); // nb\n            format = format.replace(first, str);\n        }\n    }\n\n    return format;\n};\n\nfunction tsToDate(timestamp) {\n    return (new Date(timestamp * 1000)).format('yyyy-MM-dd hh:mm:ss');\n}\n\n\n// test it\n> tsToDate(1448967948)\n< \"2015-12-01 19:05:48\"\n```\n","slug":"use-js-to-convert-ts-to-data","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560wp000r4kzarvv1z4j1"},{"title":"在微信网页上的电话号码","date":"2016-02-26T10:36:25.000Z","_content":"\n### 电话好不不想被识别\n\n在网页中的比较长的数字会被微信浏览器自动识别为电话号码，稍不注意可能就使页面变得很难看，与是，在 header 里面加上下面两个 meta 就电话号码就不会被识别了。\n\n```html\n<meta name=\"format-detection\" content=\"telephone=no\"/>\n<meta http-equiv=\"x-rim-auto-match\" content=\"none\">\n```\n\n### 如果要识别呢？\n\n加一个 `tel//***` 就可以了。\n\n```html\n<div class=\"telephone\">\n    <p>苹果妹妹专线</p>\n    <a href=\"tel://4000630086\">400-063-0086</a>\n</div>\n```\n","source":"_posts/telephone-number-not-recognize-in-wx.md","raw":"title: 在微信网页上的电话号码\ntags:\n  - 微信开发\ncategories:\n  - 微信开发\ndate: 2016-02-26 18:36:25\n---\n\n### 电话好不不想被识别\n\n在网页中的比较长的数字会被微信浏览器自动识别为电话号码，稍不注意可能就使页面变得很难看，与是，在 header 里面加上下面两个 meta 就电话号码就不会被识别了。\n\n```html\n<meta name=\"format-detection\" content=\"telephone=no\"/>\n<meta http-equiv=\"x-rim-auto-match\" content=\"none\">\n```\n\n### 如果要识别呢？\n\n加一个 `tel//***` 就可以了。\n\n```html\n<div class=\"telephone\">\n    <p>苹果妹妹专线</p>\n    <a href=\"tel://4000630086\">400-063-0086</a>\n</div>\n```\n","slug":"telephone-number-not-recognize-in-wx","published":1,"updated":"2016-03-03T07:04:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560wu00114kza1vm5o7i7"},{"title":"图片加载错误时显示默认图片","date":"2015-11-27T10:24:36.000Z","_content":"\n## 直接写\n\n```js\nfunction imgError(image) {\n    image.onerror = null; // prevent event bubble\n    image.src = \"/images/noimage.gif\";\n    return true;\n}\n```\n```html\n<img src=\"image.png\" onerror=\"imgError(this);\"/>\n```\n\n## 使用 jQuery\n```js\n$(\"img\").error(function () {\n    $(this).unbind(\"error\").attr(\"src\", \"broken.gif\");\n});\n\n//If you use this technique you can use the \"one\" method to avoid needing to unbind the event: \n$('img').one('error', function() { \n  this.src = 'broken.gif'; \n}); \n```\n\n## 还有一种写法\n```js\n$(window).load(function() {\n  $('img').each(function() {\n    if (!this.complete \n        || typeof this.naturalWidth == \"undefined\" \n        || this.naturalWidth == 0) {\n      // image was broken, replace with your new image\n      this.src = 'broken.gif';\n    }\n  });\n});\n```","source":"_posts/show-a-default-image-when-the-image-is-broken.md","raw":"title: 图片加载错误时显示默认图片\ntags:\n  - imgage error\ncategories:\n  - JavaScript\ndate: 2015-11-27 18:24:36\n---\n\n## 直接写\n\n```js\nfunction imgError(image) {\n    image.onerror = null; // prevent event bubble\n    image.src = \"/images/noimage.gif\";\n    return true;\n}\n```\n```html\n<img src=\"image.png\" onerror=\"imgError(this);\"/>\n```\n\n## 使用 jQuery\n```js\n$(\"img\").error(function () {\n    $(this).unbind(\"error\").attr(\"src\", \"broken.gif\");\n});\n\n//If you use this technique you can use the \"one\" method to avoid needing to unbind the event: \n$('img').one('error', function() { \n  this.src = 'broken.gif'; \n}); \n```\n\n## 还有一种写法\n```js\n$(window).load(function() {\n  $('img').each(function() {\n    if (!this.complete \n        || typeof this.naturalWidth == \"undefined\" \n        || this.naturalWidth == 0) {\n      // image was broken, replace with your new image\n      this.src = 'broken.gif';\n    }\n  });\n});\n```","slug":"show-a-default-image-when-the-image-is-broken","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560wy00164kzaohdjqg6k"},{"title":"在网络暴力中捍卫自己","id":"224","date":"2015-07-10T13:52:53.000Z","_content":"\n我想先问大家一个问题，有谁一年365，天天被未曾谋面的陌生人骂?举手的这个人就站在你们面前。不过别担心，我今天不是来诉苦的，我是穿着马甲来跟大家分享如何被骂大的。\n\n网络对于我们来说再日常不过，但是当你身处网络世界的围攻中，就不再那么轻松。2013年的以前，我作梦也想不到自己会变成网络世界里的“黑姑娘”。因为参演了一部电视剧，演技没有达到观众的预期，故事的结局不尽人意，而被推到了风口浪尖，让我从一个还在摸爬滚打的小演员，一夜之间变成了被大家声讨的“热门人物”。\n\n震惊之余，让自己尽快从虚拟的世界中挣脱出来是我唯一的出路。我选择在网络声中被倒下，就在网络声中爬起来。有不少人认为，公众人物就应该具有强大的承受能力和耐力，打不还手，骂不还口。偶尔被坑蒙拐骗了，还要尽量先捂着不敢报警。\n\n当我被骂得小有名气的时候，我就暗自思量。反正也挨骂，不如用最积极的方式迎接骂声。2013年3月3日，我在微博上发出了一条名为“爱的骂骂”的微博，既然大家那么需要宣泄，点击鼠标可以不用负责，那我也动动手指头，干点什么吧！\n\n我在微博里面制定了骂的规则——骂，没问题，但请集中精力地骂。只要在我这条微博下面留言的，不管是鼓励我的、骂我的，还是随便说说的，我都认捐五毛。24个小时，有十万多条留言，捐款金额是50693.5元，作为北京一家残疾孤儿康复机构的手术费。\n\n在这里，我要对每一位留言的人表示感谢。因为我们一起在虚拟的世界中救助了4个在现实生活中顽强生活着的残疾孤儿。其中有一个孩子，在手术后的那一年，终于有机会可以站起来了。那时候她还不满三岁。当我看到她第一次站起来，我很感动，也很骄傲，这个“黑姑娘”干了一件痛快的事。\n\n是的，我说出了金额。我知道，一定会有人说“捐那么少，还好意思报数”。我相信现在大部分人都不愿意公布捐款金额，因为捐款已经不再是一件随心的行动，而是成为大家根据金额的多少来衡量爱心的大小。我相信在座的各位也一定有过朋友之间随份子该给多少才合适的烦恼。我之所以说出来，不仅仅是因为我不觉得随性的行为需要躲闪，更因为“爱的骂骂”是每一个留言人的镜子。当时骂过我的人，也许，在两年后的今天听到我说的这番话，会想起曾经不太善意的留言却给了这些孩子们机会获得新生。这同样值得高兴。\n\n其实我们每个人都有不同阶段的新生，不是吗?“爱的骂骂”发出的那一刻，我如重生般释然了。虽然，我不像很多演员那样，拥有令人赞叹的表演才华，自己也觉得不是天生吃这碗饭的，但是既然选择了演员这份职业，我相信只要通过自己的努力和善待他人，就可以让自己的家人和自己过上幸福美满的生活。\n\n然而这一切，在2013年的夏天被一句开创演艺界(网络)暴力先河的“滚出娱乐圈”所动摇。我是第一个(被)放在主语位置的人。袁姗姗这个名字好像从此就和“一无是处”划上了等号。那个时候，不管说什么、做什么、演什么都不对。更有媒体总结了“袁姗姗不被观众所喜欢的五大理由”，第一条理由是“没有理由”。这是得有多深厚的感情基础，才能达到的境界。\n\n2013年确实挺让人操心的，从春天到夏天都没有平静过。一开始，我也有些懊恼，不知道到底发生了什么。我既然没有不劳而获，也没有做过伤天害理的事。为什么让我“滚”?!没多久，我想明白了一个道理，谁都可以说我不好，但是自己必须接纳那个心安理得的自己。既然我的演艺生涯要倒数开始，那我之后的每一点进步都是充满喜悦的。从零分到六十分比从满分到六十分，哪个更让人开心呢?\n\n也是从那个时候，我重拾扔下了多年的小提琴，还有健身。运动让我心情愉悦。不工作的时候，练琴和健身会让我的每一天都过得很充实，根本没有过多的时间停留在网上，更顾不上网友的围观。我建议那些沉迷于网络的年轻人，每天可以挤出一点时间锻炼身体。当有朝一日被他人欺负的时候，至少可以像我一样，身轻如燕，自由翻滚。\n\n不尽人意的2013年确实过得有些艰辛，但是我也时刻提醒着自己，别忘了尽可能给予所能达到的人以温暖。这是对鼓励过你的人最好的感激方式。但同时，我们也不要忽略身边朋友向你发出的求助信号。也许你的关心会改变他的决定。\n\n我在来之前了解到几个数据。在美国，有40%的年轻人遭遇过网络欺凌侵害，甚至有些受害者因此而患上精神疾病，身心受损。联合国儿童基金会在2014年的9月发布了一则消息报道，在法国，6到18岁之间的青少年有12.5%的人都有过在网上被攻击的经历。在中国，因为网络暴力而结束生命的人，离我们的生活越来越近。\n\n前不久，在台湾，有一位艺人因为网络暴力而自杀。听到这个消息的时候，我非常惋惜。我不知道她内心到底挣扎了多久。但当我看到这则新闻的时候，我有过一念之间的不安。如果在这之前，我可以跟她说几句话，她是不是好过一些?\n\n互联网的时代，让人与人之间的沟通方式越来越便捷，沟通成本却越来越大。足不出户在网上匿名可以干很多事，每天都要面对接踵而来的海量信息，有谁还愿意费力去核实消息的真实性，也不会有太多人会为自己发出或转发的信息而深思熟虑。那还有多少人会为他人的生命叹息呢?\n\n语言不应该成为致命的利器。网络的诞生也不应该是为了制造困扰，而是为了让生活变得更加美好。作为过去也许将来还会遭遇网络暴力的过来人，我不希望再有人因为网络暴力而受到伤害。请善用语言，让人言可敬。\n\n特别感谢在那段特殊时间陪伴我的家人和朋友，感谢他们承受住了一个当时还没有来得及减肥、各方面份量都很重的我。经历了这些，并不是想说明自己有多强大，但确实因为这些切身经历让我有了足够的时间去思考。我曾经问过自己一个问题——如果我当时真的不堪重负放弃了演员这个职业，是否网络暴力就会消失？答案当然不会。既然还是要面对，就应该积极面对。\n\n前不久，我参与了一部公益电影的拍摄。电影传递了一个非常积极的理念：每个人都有自由选择的机会和权利，无论你生下来是幸运的还是不幸的。我非常赞同，所以我选择做一个积极快乐的自己，不再受控于网络暴力中，不再只能看到消极的一面。\n\n都说做公益是在帮助他人，在我身上，成全了一个更加快乐的自己。不知道大家有没有看过这部电影。电影的名字叫《有一天》。我想在这里特别推荐一下。虽然我只参演了电影的一部分，但也给我带来了很多启发和感动。这部电影关注了九类特殊儿童群体。我参与拍摄的故事和聋哑儿童有关。跟我一起搭档演出的也是一名聋哑儿童。拍摄之前，我还有些顾虑，我不知道该怎么去跟他交流，我担心会因为自己不小心的举动伤害到他。但是见面之后，我才发现成年人的世界真的是因为想太多了变得复杂。只要我们保持一颗平常的心，用平等的方式去交流，就不会存在特别的障碍。重要的是你怎么看，而不是他怎么想。\n\n拍摄的那几天，我平静而快乐。每当完成一个镜头，这个小少年都会跟我竖起大拇指示意。他这个小小的举动也提醒了我和我们，有人选择赞美有人则不。\n\n感谢“爱的骂骂”，感谢《有一天》，感谢喝倒彩时刻提醒我的人，感谢一直鼓励我的家人和朋友，感谢倔强中的那个自己。我希望能有更多的人可以像我一样，主动地从逆境中走出来。这个世界还有很多需要我们关心的事去做，需要我们关心的人去爱。保持自己的真实，倔强地活下去。\n\n感谢大家的聆听，感谢网络世界将我带到你们面前。\n\n&nbsp;","source":"_posts/protect-yourself-in-network.md","raw":"title: 在网络暴力中捍卫自己\ntags:\n  - tedx\n  - 在网络暴力中捍卫自己\n  - 演讲稿\n  - 袁姗姗\nid: 224\ncategories:\n  - 生活杂记\ndate: 2015-07-10 21:52:53\n---\n\n我想先问大家一个问题，有谁一年365，天天被未曾谋面的陌生人骂?举手的这个人就站在你们面前。不过别担心，我今天不是来诉苦的，我是穿着马甲来跟大家分享如何被骂大的。\n\n网络对于我们来说再日常不过，但是当你身处网络世界的围攻中，就不再那么轻松。2013年的以前，我作梦也想不到自己会变成网络世界里的“黑姑娘”。因为参演了一部电视剧，演技没有达到观众的预期，故事的结局不尽人意，而被推到了风口浪尖，让我从一个还在摸爬滚打的小演员，一夜之间变成了被大家声讨的“热门人物”。\n\n震惊之余，让自己尽快从虚拟的世界中挣脱出来是我唯一的出路。我选择在网络声中被倒下，就在网络声中爬起来。有不少人认为，公众人物就应该具有强大的承受能力和耐力，打不还手，骂不还口。偶尔被坑蒙拐骗了，还要尽量先捂着不敢报警。\n\n当我被骂得小有名气的时候，我就暗自思量。反正也挨骂，不如用最积极的方式迎接骂声。2013年3月3日，我在微博上发出了一条名为“爱的骂骂”的微博，既然大家那么需要宣泄，点击鼠标可以不用负责，那我也动动手指头，干点什么吧！\n\n我在微博里面制定了骂的规则——骂，没问题，但请集中精力地骂。只要在我这条微博下面留言的，不管是鼓励我的、骂我的，还是随便说说的，我都认捐五毛。24个小时，有十万多条留言，捐款金额是50693.5元，作为北京一家残疾孤儿康复机构的手术费。\n\n在这里，我要对每一位留言的人表示感谢。因为我们一起在虚拟的世界中救助了4个在现实生活中顽强生活着的残疾孤儿。其中有一个孩子，在手术后的那一年，终于有机会可以站起来了。那时候她还不满三岁。当我看到她第一次站起来，我很感动，也很骄傲，这个“黑姑娘”干了一件痛快的事。\n\n是的，我说出了金额。我知道，一定会有人说“捐那么少，还好意思报数”。我相信现在大部分人都不愿意公布捐款金额，因为捐款已经不再是一件随心的行动，而是成为大家根据金额的多少来衡量爱心的大小。我相信在座的各位也一定有过朋友之间随份子该给多少才合适的烦恼。我之所以说出来，不仅仅是因为我不觉得随性的行为需要躲闪，更因为“爱的骂骂”是每一个留言人的镜子。当时骂过我的人，也许，在两年后的今天听到我说的这番话，会想起曾经不太善意的留言却给了这些孩子们机会获得新生。这同样值得高兴。\n\n其实我们每个人都有不同阶段的新生，不是吗?“爱的骂骂”发出的那一刻，我如重生般释然了。虽然，我不像很多演员那样，拥有令人赞叹的表演才华，自己也觉得不是天生吃这碗饭的，但是既然选择了演员这份职业，我相信只要通过自己的努力和善待他人，就可以让自己的家人和自己过上幸福美满的生活。\n\n然而这一切，在2013年的夏天被一句开创演艺界(网络)暴力先河的“滚出娱乐圈”所动摇。我是第一个(被)放在主语位置的人。袁姗姗这个名字好像从此就和“一无是处”划上了等号。那个时候，不管说什么、做什么、演什么都不对。更有媒体总结了“袁姗姗不被观众所喜欢的五大理由”，第一条理由是“没有理由”。这是得有多深厚的感情基础，才能达到的境界。\n\n2013年确实挺让人操心的，从春天到夏天都没有平静过。一开始，我也有些懊恼，不知道到底发生了什么。我既然没有不劳而获，也没有做过伤天害理的事。为什么让我“滚”?!没多久，我想明白了一个道理，谁都可以说我不好，但是自己必须接纳那个心安理得的自己。既然我的演艺生涯要倒数开始，那我之后的每一点进步都是充满喜悦的。从零分到六十分比从满分到六十分，哪个更让人开心呢?\n\n也是从那个时候，我重拾扔下了多年的小提琴，还有健身。运动让我心情愉悦。不工作的时候，练琴和健身会让我的每一天都过得很充实，根本没有过多的时间停留在网上，更顾不上网友的围观。我建议那些沉迷于网络的年轻人，每天可以挤出一点时间锻炼身体。当有朝一日被他人欺负的时候，至少可以像我一样，身轻如燕，自由翻滚。\n\n不尽人意的2013年确实过得有些艰辛，但是我也时刻提醒着自己，别忘了尽可能给予所能达到的人以温暖。这是对鼓励过你的人最好的感激方式。但同时，我们也不要忽略身边朋友向你发出的求助信号。也许你的关心会改变他的决定。\n\n我在来之前了解到几个数据。在美国，有40%的年轻人遭遇过网络欺凌侵害，甚至有些受害者因此而患上精神疾病，身心受损。联合国儿童基金会在2014年的9月发布了一则消息报道，在法国，6到18岁之间的青少年有12.5%的人都有过在网上被攻击的经历。在中国，因为网络暴力而结束生命的人，离我们的生活越来越近。\n\n前不久，在台湾，有一位艺人因为网络暴力而自杀。听到这个消息的时候，我非常惋惜。我不知道她内心到底挣扎了多久。但当我看到这则新闻的时候，我有过一念之间的不安。如果在这之前，我可以跟她说几句话，她是不是好过一些?\n\n互联网的时代，让人与人之间的沟通方式越来越便捷，沟通成本却越来越大。足不出户在网上匿名可以干很多事，每天都要面对接踵而来的海量信息，有谁还愿意费力去核实消息的真实性，也不会有太多人会为自己发出或转发的信息而深思熟虑。那还有多少人会为他人的生命叹息呢?\n\n语言不应该成为致命的利器。网络的诞生也不应该是为了制造困扰，而是为了让生活变得更加美好。作为过去也许将来还会遭遇网络暴力的过来人，我不希望再有人因为网络暴力而受到伤害。请善用语言，让人言可敬。\n\n特别感谢在那段特殊时间陪伴我的家人和朋友，感谢他们承受住了一个当时还没有来得及减肥、各方面份量都很重的我。经历了这些，并不是想说明自己有多强大，但确实因为这些切身经历让我有了足够的时间去思考。我曾经问过自己一个问题——如果我当时真的不堪重负放弃了演员这个职业，是否网络暴力就会消失？答案当然不会。既然还是要面对，就应该积极面对。\n\n前不久，我参与了一部公益电影的拍摄。电影传递了一个非常积极的理念：每个人都有自由选择的机会和权利，无论你生下来是幸运的还是不幸的。我非常赞同，所以我选择做一个积极快乐的自己，不再受控于网络暴力中，不再只能看到消极的一面。\n\n都说做公益是在帮助他人，在我身上，成全了一个更加快乐的自己。不知道大家有没有看过这部电影。电影的名字叫《有一天》。我想在这里特别推荐一下。虽然我只参演了电影的一部分，但也给我带来了很多启发和感动。这部电影关注了九类特殊儿童群体。我参与拍摄的故事和聋哑儿童有关。跟我一起搭档演出的也是一名聋哑儿童。拍摄之前，我还有些顾虑，我不知道该怎么去跟他交流，我担心会因为自己不小心的举动伤害到他。但是见面之后，我才发现成年人的世界真的是因为想太多了变得复杂。只要我们保持一颗平常的心，用平等的方式去交流，就不会存在特别的障碍。重要的是你怎么看，而不是他怎么想。\n\n拍摄的那几天，我平静而快乐。每当完成一个镜头，这个小少年都会跟我竖起大拇指示意。他这个小小的举动也提醒了我和我们，有人选择赞美有人则不。\n\n感谢“爱的骂骂”，感谢《有一天》，感谢喝倒彩时刻提醒我的人，感谢一直鼓励我的家人和朋友，感谢倔强中的那个自己。我希望能有更多的人可以像我一样，主动地从逆境中走出来。这个世界还有很多需要我们关心的事去做，需要我们关心的人去爱。保持自己的真实，倔强地活下去。\n\n感谢大家的聆听，感谢网络世界将我带到你们面前。\n\n&nbsp;","slug":"protect-yourself-in-network","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560x2001a4kzauwi1xbcj"},{"title":"Navicat 10.1.7 的注册码","id":"107","date":"2014-12-28T13:23:42.000Z","_content":"\n> NAVN-LNXG-XHHX-5NOO \n> 名和组织随便写。","source":"_posts/navicat-10-1-7-key.md","raw":"title: Navicat 10.1.7 的注册码\ntags:\n  - mysql\n  - navicat\nid: 107\ncategories:\n  - MySQL\ndate: 2014-12-28 21:23:42\n---\n\n> NAVN-LNXG-XHHX-5NOO \n> 名和组织随便写。","slug":"navicat-10-1-7-key","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560x8001l4kzabjvkqq50"},{"title":"修改 wamp 中 mysql 默认空密码","id":"229","date":"2015-07-31T15:32:13.000Z","_content":"\n```sql\nuse mysql\n\nupdate user set password=PASSWORD('hooray') where user='root';\n\nflush privileges;\n```","source":"_posts/modify-wamp-mysql-password.md","raw":"title: 修改 wamp 中 mysql 默认空密码\ntags:\n  - mysql\n  - paswword\nid: 229\ncategories:\n  - MySQL\ndate: 2015-07-31 23:32:13\n---\n\n```sql\nuse mysql\n\nupdate user set password=PASSWORD('hooray') where user='root';\n\nflush privileges;\n```","slug":"modify-wamp-mysql-password","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xc001q4kzaql22pm19"},{"title":"杀死正在占有你端口的小程序","date":"2016-02-25T10:38:07.000Z","_content":"\n最近在 mac 上用 terminal 启动 python 的时候经常会提示我，端口被占用了，像这样\n``` bash\n0 errors found\nFebruary 25, 2016 - 18:25:21\nDjango version 1.6.7, using settings 'green.settings'\nStarting development server at http://0.0.0.0:8000/\nQuit the server with CONTROL-C.\nError: That port is already in use.\n```\n\n```\nps aux | grep python\n```\n\n```shell\n(kkh)➜  green git:(feature/shopping_mall_womens_day) ✗ ps aux | grep python\nOliver          23232   0.0  0.0  2434840    752 s002  S+    5:25下午   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn python\nOliver          23103   0.0  0.8  2550628  66364 s002  S     5:23下午   0:02.23 /Users/Oliver/dev/kkh/bin/python manage.py runserver 0.0.0.0:8000\n```\n\n```bash\nkill 23103\n```\n","source":"_posts/kill-process.md","raw":"title: 杀死正在占有你端口的小程序\ntags:\n  - 端口占用\ncategories:\n  - LINUX\ndate: 2016-02-25 18:38:07\n---\n\n最近在 mac 上用 terminal 启动 python 的时候经常会提示我，端口被占用了，像这样\n``` bash\n0 errors found\nFebruary 25, 2016 - 18:25:21\nDjango version 1.6.7, using settings 'green.settings'\nStarting development server at http://0.0.0.0:8000/\nQuit the server with CONTROL-C.\nError: That port is already in use.\n```\n\n```\nps aux | grep python\n```\n\n```shell\n(kkh)➜  green git:(feature/shopping_mall_womens_day) ✗ ps aux | grep python\nOliver          23232   0.0  0.0  2434840    752 s002  S+    5:25下午   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn python\nOliver          23103   0.0  0.8  2550628  66364 s002  S     5:23下午   0:02.23 /Users/Oliver/dev/kkh/bin/python manage.py runserver 0.0.0.0:8000\n```\n\n```bash\nkill 23103\n```\n","slug":"kill-process","published":1,"updated":"2016-02-26T10:35:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xg001v4kzaor7sikej"},{"title":"GIT - remember password in window & linux.","date":"2015-11-23T02:46:44.000Z","_content":"\n# Window\n\n```sh\n# 因为 window 不允许之间新建 . 开头的文件，所以使用 mv 的方式\nmv git-credentials .git-credentials\n```\n\n然后编辑 **.git-credentials**\n```\n# github 是这样的格式\nhttps://{username}:{password}@github.com \n\n# git.oschina.net 是这样的\nhttps://{username}:{password}@git.oschina.net\n```\n\n最后一步是\n```sh\ngit config --global credential.helper store\n```\n\n# Linux\n\n> 在此之前或许要添加 ssh-key (https://help.github.com/articles/generating-ssh-keys/#platform-linux)\n\n```\n$ git config --global credential.helper cache\n# 默认缓存密码15分钟，可以改得更长, 比如1小时\n$ git config --global credential.helper 'cache --timeout=3600'\n```","source":"_posts/git-remember-password-in-window-and-linux.md","raw":"title: GIT - remember password in window & linux.\ntags:\n  - git\n  - 记住密码\ncategories:\n  - GIT\ndate: 2015-11-23 10:46:44\n---\n\n# Window\n\n```sh\n# 因为 window 不允许之间新建 . 开头的文件，所以使用 mv 的方式\nmv git-credentials .git-credentials\n```\n\n然后编辑 **.git-credentials**\n```\n# github 是这样的格式\nhttps://{username}:{password}@github.com \n\n# git.oschina.net 是这样的\nhttps://{username}:{password}@git.oschina.net\n```\n\n最后一步是\n```sh\ngit config --global credential.helper store\n```\n\n# Linux\n\n> 在此之前或许要添加 ssh-key (https://help.github.com/articles/generating-ssh-keys/#platform-linux)\n\n```\n$ git config --global credential.helper cache\n# 默认缓存密码15分钟，可以改得更长, 比如1小时\n$ git config --global credential.helper 'cache --timeout=3600'\n```","slug":"git-remember-password-in-window-and-linux","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xj00204kzauio7p01j"},{"title":"Scss 里面的 for 循环","date":"2016-03-03T05:40:35.000Z","_content":"\n最近在写一个动画效果，使 ul 下面的 li 逐个进入，就像下图  \n![](../images/li-queue-in.png)\n\n做这个效果用到了 css 的 animation 中 `animation-delay`，给 li 设置入场动画后，再给 li 设置 `animation-delay`，像这样：\n\n```css\n.li-animation-delay-1 {\n  animation-delay: 0.1s;\n}\n```\n\n并且每一个 li 的 animation-delay 都比前一个 li 的长 .1s，也就达到了后面的 li 的入场动画后播放的效果。\n\n因为 li 的数量也不确定，所以我打算批量生成一些 `li-animation-delay-*`, 查了一下 scss 正好有 for 的用法：\n\n```scss\n@for $index from 0 to 10 {\n  .list-ad-#{$index} {\n    animation-delay: $index * 0.1#{s};\n  }\n}\n```\n\n其中，`#{***}` 的作用的把字符串原封不动的输出。\n```\n#{s} --> s\n```\n","source":"_posts/for-in-scss.md","raw":"title: Scss 里面的 for 循环\ntags:\n  - scss\n  - for\ncategories:\n  - SASS\ndate: 2016-03-03 13:40:35\n---\n\n最近在写一个动画效果，使 ul 下面的 li 逐个进入，就像下图  \n![](../images/li-queue-in.png)\n\n做这个效果用到了 css 的 animation 中 `animation-delay`，给 li 设置入场动画后，再给 li 设置 `animation-delay`，像这样：\n\n```css\n.li-animation-delay-1 {\n  animation-delay: 0.1s;\n}\n```\n\n并且每一个 li 的 animation-delay 都比前一个 li 的长 .1s，也就达到了后面的 li 的入场动画后播放的效果。\n\n因为 li 的数量也不确定，所以我打算批量生成一些 `li-animation-delay-*`, 查了一下 scss 正好有 for 的用法：\n\n```scss\n@for $index from 0 to 10 {\n  .list-ad-#{$index} {\n    animation-delay: $index * 0.1#{s};\n  }\n}\n```\n\n其中，`#{***}` 的作用的把字符串原封不动的输出。\n```\n#{s} --> s\n```\n","slug":"for-in-scss","published":1,"updated":"2016-03-03T07:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xl00274kzams4ccom3"},{"title":"戦艦の女の子 の 航母 - 诶塞克斯","date":"2016-03-03T05:49:03.000Z","_content":"\n## 战舰少女\n首先让我们认识一下这个游戏的名字：\n> 戦艦の女の子 【せんかんのおんなのこ】【senkannoonnanoko】\n\n## 航空母舰\n还有航空母舰这个单词\n> 航空母艦日【こうくうぼかん】【koukuubokann】  \n\n> 航空母舰。（航空機を搭載し、これを発着させるための飛行甲板および格納庫・修理設備などを備えた軍艦。今日、水上兵力の中核。略称、空母。）\n\n## 埃塞克斯\n下面进入正题，就是我很喜欢但是还咩有得到的 - 埃塞克斯\n\n![正常](..//images/aise-normal.png)\n![正常](..//images/aise-broken.png)\n\n## 建造公式\n\n1. 标准航母公式：400,600,600,400（基本上赌航母都用这个）\n2. 低费航母公式：300,30,400,300（当资源不足时可用）\n3. 常用玄学公式：400 600 650 430（目前出货率极高的公式）\n4. 500 130 600 400（据说出货率更高~）\n\n## 建造时间\n4 个小时\n","source":"_posts/esekesu-senkanno-onnanoko.md","raw":"title: 戦艦の女の子 の 航母 - 诶塞克斯\ntags:\n  - 埃塞克斯\n  - 航母\ncategories:\n  - 戦艦の女の子\ndate: 2016-03-03 13:49:03\n---\n\n## 战舰少女\n首先让我们认识一下这个游戏的名字：\n> 戦艦の女の子 【せんかんのおんなのこ】【senkannoonnanoko】\n\n## 航空母舰\n还有航空母舰这个单词\n> 航空母艦日【こうくうぼかん】【koukuubokann】  \n\n> 航空母舰。（航空機を搭載し、これを発着させるための飛行甲板および格納庫・修理設備などを備えた軍艦。今日、水上兵力の中核。略称、空母。）\n\n## 埃塞克斯\n下面进入正题，就是我很喜欢但是还咩有得到的 - 埃塞克斯\n\n![正常](..//images/aise-normal.png)\n![正常](..//images/aise-broken.png)\n\n## 建造公式\n\n1. 标准航母公式：400,600,600,400（基本上赌航母都用这个）\n2. 低费航母公式：300,30,400,300（当资源不足时可用）\n3. 常用玄学公式：400 600 650 430（目前出货率极高的公式）\n4. 500 130 600 400（据说出货率更高~）\n\n## 建造时间\n4 个小时\n","slug":"esekesu-senkanno-onnanoko","published":1,"updated":"2016-03-03T07:00:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xo002e4kza0oanugc4"},{"title":"Queue Anim 列表","date":"2016-03-03T09:45:24.000Z","_content":"\n\n# @keyframes\n基本写法是一个开始状态和一个结束状态：\n```css\n@keyframes demo-anim {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n```\n\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"QNbBOy\" data-default-tab=\"result\" data-user=\"ochukai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/ochukai/pen/QNbBOy/\">QNbBOy</a> by Oliver (<a href=\"http://codepen.io/ochukai\">@ochukai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n> 其中 `animation-iteration-count: number or infinite;` 可以设置循环次数，infinite为无限次\n\n还可以定义的很详细：\n```css\n@keyframes demo-anim {\n  from {\n    transform: translate(0, 0);\n  }\n  20% {\n    transform: translate(20, 20);\n  }\n  40% {\n    transform: translate(40, 0);\n  }\n  60% {\n    transform: translate(60, 20);\n  }\n  80% {\n    transform: translate(80, 0);\n  }\n  to {\n    transform: translate(100, 20);\n  }\n}\n\n```\n\n# animation-fill-mode\n> animation-fill-mode : none | forwards | backwards | both;\n\n\n值|描述\n-|-\nnone|不改变默认行为。\nforward|当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。\nbackwards|在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。\nboth|向前和向后填充模式都被应用。\n\n\n> 用到的知识点就是上面两个，下面开始写。\n\n# Queue-in List\n我要写的效果是一个列表，当列表显示时，其子项逐个出现，从右向左滑入，透明度也由浅变深。\n\n## 思路\n先写一个使 li 从左向右滑入的效果，然后再给需要稍晚滑入的 li 加上 `animation-delay` 就好了。\n\n## css\n```css\n/* 定义 li 样式 */\nli {\n  width: 200px;\n  height: 30px;\n  background-color: #ccc;\n  margin-top: 2px;\n  opacity: 0; /* 默认是隐藏的 */\n}\n\n/* 定义动画 */\n@keyframes queue-in {\n  from {\n    /* 开始时 在左边 */\n    transform: translateX(40px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* 调用动画 */\n.list-queue-in > li {\n  animation-name: queue-in;\n  animation-duration: .3s;\n  /* 这一行就表示动画结束时元素的状态就是动画的最后一帧 */\n  animation-fill-mode: forwards;\n  animation-timing-function: ease-in;\n}\n```\n\n\n## html\n这是 进入状态时的 html\n\n```html\n<ul class=\"list-queue-in\">\n  <li class=\"list-ad-0\" key=\"0\">1</li>\n  <li class=\"list-ad-1\" key=\"1\">2</li>\n  <li class=\"list-ad-2\" key=\"2\">3</li>\n  <li class=\"list-ad-3\" key=\"2\">4</li>\n  <li class=\"list-ad-4\" key=\"2\">5</li>\n</ul>\n```\n> 这样的话，li 已经可以从右向左滑入了，但是，是在一起滑入的，我需要他们分开~\n\n## animation-delay\n\n`list-ad-0` 这个东西就是提前定义好的 `animation-delay`，比如：\n\n```css\n.list-ad-0 {\n  -webkit-animation-delay: 0s;\n          animation-delay: 0s;\n}\n\n.list-ad-1 {\n  -webkit-animation-delay: 0.1s;\n          animation-delay: 0.1s;\n}\n```\n然后，他们就可以一个接一个的滑了~\n\n## 最后\n所有的代码都在这里，就是这样的效果：\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"zqYgxb\" data-default-tab=\"result\" data-user=\"ochukai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/ochukai/pen/zqYgxb/\">zqYgxb</a> by Oliver (<a href=\"http://codepen.io/ochukai\">@ochukai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","source":"_posts/css-animation-queue-list.md","raw":"title: Queue Anim 列表\ntags:\n  - css\n  - animation\ncategories:\n  - CSS\ndate: 2016-03-3 17:45:24\n---\n\n\n# @keyframes\n基本写法是一个开始状态和一个结束状态：\n```css\n@keyframes demo-anim {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n```\n\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"QNbBOy\" data-default-tab=\"result\" data-user=\"ochukai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/ochukai/pen/QNbBOy/\">QNbBOy</a> by Oliver (<a href=\"http://codepen.io/ochukai\">@ochukai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n> 其中 `animation-iteration-count: number or infinite;` 可以设置循环次数，infinite为无限次\n\n还可以定义的很详细：\n```css\n@keyframes demo-anim {\n  from {\n    transform: translate(0, 0);\n  }\n  20% {\n    transform: translate(20, 20);\n  }\n  40% {\n    transform: translate(40, 0);\n  }\n  60% {\n    transform: translate(60, 20);\n  }\n  80% {\n    transform: translate(80, 0);\n  }\n  to {\n    transform: translate(100, 20);\n  }\n}\n\n```\n\n# animation-fill-mode\n> animation-fill-mode : none | forwards | backwards | both;\n\n\n值|描述\n-|-\nnone|不改变默认行为。\nforward|当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。\nbackwards|在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。\nboth|向前和向后填充模式都被应用。\n\n\n> 用到的知识点就是上面两个，下面开始写。\n\n# Queue-in List\n我要写的效果是一个列表，当列表显示时，其子项逐个出现，从右向左滑入，透明度也由浅变深。\n\n## 思路\n先写一个使 li 从左向右滑入的效果，然后再给需要稍晚滑入的 li 加上 `animation-delay` 就好了。\n\n## css\n```css\n/* 定义 li 样式 */\nli {\n  width: 200px;\n  height: 30px;\n  background-color: #ccc;\n  margin-top: 2px;\n  opacity: 0; /* 默认是隐藏的 */\n}\n\n/* 定义动画 */\n@keyframes queue-in {\n  from {\n    /* 开始时 在左边 */\n    transform: translateX(40px);\n  }\n\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* 调用动画 */\n.list-queue-in > li {\n  animation-name: queue-in;\n  animation-duration: .3s;\n  /* 这一行就表示动画结束时元素的状态就是动画的最后一帧 */\n  animation-fill-mode: forwards;\n  animation-timing-function: ease-in;\n}\n```\n\n\n## html\n这是 进入状态时的 html\n\n```html\n<ul class=\"list-queue-in\">\n  <li class=\"list-ad-0\" key=\"0\">1</li>\n  <li class=\"list-ad-1\" key=\"1\">2</li>\n  <li class=\"list-ad-2\" key=\"2\">3</li>\n  <li class=\"list-ad-3\" key=\"2\">4</li>\n  <li class=\"list-ad-4\" key=\"2\">5</li>\n</ul>\n```\n> 这样的话，li 已经可以从右向左滑入了，但是，是在一起滑入的，我需要他们分开~\n\n## animation-delay\n\n`list-ad-0` 这个东西就是提前定义好的 `animation-delay`，比如：\n\n```css\n.list-ad-0 {\n  -webkit-animation-delay: 0s;\n          animation-delay: 0s;\n}\n\n.list-ad-1 {\n  -webkit-animation-delay: 0.1s;\n          animation-delay: 0.1s;\n}\n```\n然后，他们就可以一个接一个的滑了~\n\n## 最后\n所有的代码都在这里，就是这样的效果：\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"zqYgxb\" data-default-tab=\"result\" data-user=\"ochukai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/ochukai/pen/zqYgxb/\">zqYgxb</a> by Oliver (<a href=\"http://codepen.io/ochukai\">@ochukai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","slug":"css-animation-queue-list","published":1,"updated":"2016-03-03T10:50:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xq002l4kza4u2xtmup"},{"title":"战舰少女基础知识及部分公式","date":"2016-02-22T16:07:25.000Z","_content":"\n## 类型\n类型|缩写|特点|\n-|-|-|\n战列舰|BB|大炮巨舰的典范，高火力、高血量、高护甲。是游戏中后期推图的主力。\n战列巡洋舰|BC|战列舰的缩减版本，火力、血量、护甲略低于战列舰，拥有相对高的防空属性，优点是全部是高速舰，推图上有优势。\n正规航母|CV|高索敌，有开幕战，多一轮攻击，受装备影响大，夜间无法攻击。\n轻型航母|CVL|正规航母的缩水版，装甲低下，可反潜，搭载数量低，作用是前期舰队补充。\n浅水重炮舰|BM|游戏中只有两艘，火力高，可以装长距离的主炮，白天可以来两发，消耗低，本来可以用来打捞保姆，之后有改过，护甲变低，基本上没人用了。\n潜艇|SS|同样为数不多，低闪避，高鱼雷，只有具备反潜能力的舰船才能打到，夜战能力高!升到11级后有开幕雷击的能力。\n重巡洋舰|CA|夜战优秀，闪避中上，部分能够发射鱼雷，消耗较，欺负小学生的神器。\n轻巡洋舰|CL|大部分反潜优秀，属性在重巡和驱逐之间，闪避出色，依旧适合欺负小学生。\n驱逐舰|DD|属性低，消耗低，闪避高，夜战出色，鱼雷战优秀。小学生作为入门舰船，也是必须练的船，一般用来推图带路和完成远征的特定条件。\n\n> **炮潜**\n>在2015夏季活动中加入的新舰船—絮库夫的舰船种类，虽然会潜水，但是却没有开幕雷击，没多大用处。  \n\n> **补给舰**\n>目前唯一一艘**苏赫巴托尔**，萌萌哒，幸运高，闪避高，技能可以打捞到更好的船，1-5通关奖励。\n\n## 驱逐\n> 空想、绫波、Z1、萤火虫、Z31、Z16、晓、响、雷、电、敷波和标枪\n\n> 高星稀有驱逐: 塔什干、奥班农、拉菲等\n\n> 以及Z系的其他驱逐\n\n## 战列\n-|名称\n-|-\n改造战列|威尔士亲王改、俾斯麦改、罗德尼改、安德烈亚多利亚改、纳尔逊改、内华达改、俄克拉荷马改\n高星稀有|黎塞留、前卫、提尔比茨、华盛顿\n四星|科罗拉多、马里兰，西弗吉尼亚\n\n## 轻巡\n名称|特点\n-|-\n海伦娜改|可以给全队增加索敌和命中\n夕张改|觉醒技能后，可以使性能提升很多\n奥希金斯改|\n宁海改|经验宝宝，技能可以增加战斗经验\n平海改|\n天龙改|\n> 5星轻巡天狼星，贝尔法斯特  \n> 4星的基洛夫，以及中国船逸仙、重庆（曙光女神改）\n\n\n## 热门\n埃塞克斯，马汉，M1，睦月，企业号航母，狮，宁海，威奇塔改，拉菲，青叶\n\n## 公式\n-|第一|第二|产物\n-|-|-|-\n战列|400 80 650 130 | 630 600 650 230 | 黎塞留、前卫、安德烈亚多利亚、提尔比茨、俾斯麦、华盛顿\n航母轻母|400 600 600 400 |500 130 600 400 | 赤城、加贺、追赶者\n轻巡|200 30 200 100|130 130 130 130|贝尔法斯特、爱丁堡、逸仙、平海、宁海、基洛夫、埃姆登、莱比锡\n驱逐|130 30 130 30| 130 130 130 130|拉菲、空想、塔什干（拉菲用3663出货率还是蛮不错的）\n潜艇|30 60 60 30|250 30 250 30|大青花鱼\n\n\n## 常用公式产出分析\n1. 400 80 650 130(前卫公式)\n当前用的最多的战列公式，出所有战列，所有战巡，所有重巡，4星以上轻巡，重炮以及空想和拉菲这两艘驱逐;屏蔽了航母，轻母，其余轻巡，驱逐以及大青花鱼。\n\n2. 630 600 650 230(黑猫公式)\n据说是最容易出北宅和猫?出所有战列，所有战巡，所有重巡，重炮以及空想;屏蔽了航母，轻母，所有轻巡，其余驱逐以及大青花鱼。\n3. 400 600 600 400(标准航母公式)\n最早常见的航母公式，出航母，轻母，重巡，4星轻巡以及空想;屏蔽战列，战巡，其余轻巡，其余驱逐，重炮以及大青花鱼。\n\n4. 400 130 500 130(稀有轻巡公式)\n可以用来赌贝爷(贝尔法斯特)，当然其他4星轻巡也是可以的。出战巡，重巡，稀有轻巡，重炮以及空想;屏蔽战列，航母，轻母，3星以下轻巡，其余驱逐和大青花鱼。\n\n5. 500 130 600 400(航母公式)\n新型航母公式，相比标准航母公式，屏蔽了轻巡，一定程度上提高了吃喝、追赶的出货率。出航母，轻母，重巡以及空想;屏蔽其余战列，轻巡，重炮，其余驱逐以及大青花鱼。\n\n6. 130 30 130 30(小船通用公式)\n小船指得是轻巡驱逐潜艇。屏蔽其余舰种船只。如果要鱼的话30 60 60 30就够了。\n","source":"_posts/battleship-girls.md","raw":"title: 战舰少女基础知识及部分公式\ntags:\n  - 建造公式\ncategories:\n  - 戦艦の女の子\ndate: 2016-02-23 00:07:25\n---\n\n## 类型\n类型|缩写|特点|\n-|-|-|\n战列舰|BB|大炮巨舰的典范，高火力、高血量、高护甲。是游戏中后期推图的主力。\n战列巡洋舰|BC|战列舰的缩减版本，火力、血量、护甲略低于战列舰，拥有相对高的防空属性，优点是全部是高速舰，推图上有优势。\n正规航母|CV|高索敌，有开幕战，多一轮攻击，受装备影响大，夜间无法攻击。\n轻型航母|CVL|正规航母的缩水版，装甲低下，可反潜，搭载数量低，作用是前期舰队补充。\n浅水重炮舰|BM|游戏中只有两艘，火力高，可以装长距离的主炮，白天可以来两发，消耗低，本来可以用来打捞保姆，之后有改过，护甲变低，基本上没人用了。\n潜艇|SS|同样为数不多，低闪避，高鱼雷，只有具备反潜能力的舰船才能打到，夜战能力高!升到11级后有开幕雷击的能力。\n重巡洋舰|CA|夜战优秀，闪避中上，部分能够发射鱼雷，消耗较，欺负小学生的神器。\n轻巡洋舰|CL|大部分反潜优秀，属性在重巡和驱逐之间，闪避出色，依旧适合欺负小学生。\n驱逐舰|DD|属性低，消耗低，闪避高，夜战出色，鱼雷战优秀。小学生作为入门舰船，也是必须练的船，一般用来推图带路和完成远征的特定条件。\n\n> **炮潜**\n>在2015夏季活动中加入的新舰船—絮库夫的舰船种类，虽然会潜水，但是却没有开幕雷击，没多大用处。  \n\n> **补给舰**\n>目前唯一一艘**苏赫巴托尔**，萌萌哒，幸运高，闪避高，技能可以打捞到更好的船，1-5通关奖励。\n\n## 驱逐\n> 空想、绫波、Z1、萤火虫、Z31、Z16、晓、响、雷、电、敷波和标枪\n\n> 高星稀有驱逐: 塔什干、奥班农、拉菲等\n\n> 以及Z系的其他驱逐\n\n## 战列\n-|名称\n-|-\n改造战列|威尔士亲王改、俾斯麦改、罗德尼改、安德烈亚多利亚改、纳尔逊改、内华达改、俄克拉荷马改\n高星稀有|黎塞留、前卫、提尔比茨、华盛顿\n四星|科罗拉多、马里兰，西弗吉尼亚\n\n## 轻巡\n名称|特点\n-|-\n海伦娜改|可以给全队增加索敌和命中\n夕张改|觉醒技能后，可以使性能提升很多\n奥希金斯改|\n宁海改|经验宝宝，技能可以增加战斗经验\n平海改|\n天龙改|\n> 5星轻巡天狼星，贝尔法斯特  \n> 4星的基洛夫，以及中国船逸仙、重庆（曙光女神改）\n\n\n## 热门\n埃塞克斯，马汉，M1，睦月，企业号航母，狮，宁海，威奇塔改，拉菲，青叶\n\n## 公式\n-|第一|第二|产物\n-|-|-|-\n战列|400 80 650 130 | 630 600 650 230 | 黎塞留、前卫、安德烈亚多利亚、提尔比茨、俾斯麦、华盛顿\n航母轻母|400 600 600 400 |500 130 600 400 | 赤城、加贺、追赶者\n轻巡|200 30 200 100|130 130 130 130|贝尔法斯特、爱丁堡、逸仙、平海、宁海、基洛夫、埃姆登、莱比锡\n驱逐|130 30 130 30| 130 130 130 130|拉菲、空想、塔什干（拉菲用3663出货率还是蛮不错的）\n潜艇|30 60 60 30|250 30 250 30|大青花鱼\n\n\n## 常用公式产出分析\n1. 400 80 650 130(前卫公式)\n当前用的最多的战列公式，出所有战列，所有战巡，所有重巡，4星以上轻巡，重炮以及空想和拉菲这两艘驱逐;屏蔽了航母，轻母，其余轻巡，驱逐以及大青花鱼。\n\n2. 630 600 650 230(黑猫公式)\n据说是最容易出北宅和猫?出所有战列，所有战巡，所有重巡，重炮以及空想;屏蔽了航母，轻母，所有轻巡，其余驱逐以及大青花鱼。\n3. 400 600 600 400(标准航母公式)\n最早常见的航母公式，出航母，轻母，重巡，4星轻巡以及空想;屏蔽战列，战巡，其余轻巡，其余驱逐，重炮以及大青花鱼。\n\n4. 400 130 500 130(稀有轻巡公式)\n可以用来赌贝爷(贝尔法斯特)，当然其他4星轻巡也是可以的。出战巡，重巡，稀有轻巡，重炮以及空想;屏蔽战列，航母，轻母，3星以下轻巡，其余驱逐和大青花鱼。\n\n5. 500 130 600 400(航母公式)\n新型航母公式，相比标准航母公式，屏蔽了轻巡，一定程度上提高了吃喝、追赶的出货率。出航母，轻母，重巡以及空想;屏蔽其余战列，轻巡，重炮，其余驱逐以及大青花鱼。\n\n6. 130 30 130 30(小船通用公式)\n小船指得是轻巡驱逐潜艇。屏蔽其余舰种船只。如果要鱼的话30 60 60 30就够了。\n","slug":"battleship-girls","published":1,"updated":"2016-03-03T05:50:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560xu002r4kza35yebpr1"},{"title":"Baseview in Backbone","date":"2015-11-12T16:36:15.000Z","_content":"## 前言\n今天研究了好久的 Backbone，一直搞不明白，怎么通过 router 的改变来切换 view。\n\n## 过程跌宕起伏\n\n事情是这样的，都知道 backbone 有 model, collection, view, router 这些基本概念，今天我要写一个简单的网页，有两个 nav 项，因为用了 backbone，自然就想到了单页应用，就是单击其中某一个的时候，显示这一个 nav 项对应的内容。\n\n这就用到了 router 的事件，每当 router 改变时，重新 render 整个页面。（我是这么想的，也不是整个，router 变了有些内容必然会跟着变。）\n\n```js\nvar appView = this;\nBackbone.history.on('route', function (router, name) {\n    console.log('current route:', name);\n    appView.render();\n});\n```\n\n另外，在 router 里面我定义了一个变量，用来表明哪一个 nav 项被点击。\n```js\nBackbone.Router.extend({\n\n    // ... other methods\n\n    routes: {\n        '': 'chat', // default to #chat\n        'chat': 'chat',\n        'broadcast': 'broadcast',\n        '*nothingMatched': 'pageNotFoundRoute' // 404\n    },\n\n    chat: function () {\n        console.log(\"chat page loaded.\");\n        window.App.currentRouter = 'chat';\n    },\n\n    broadcast: function () {\n        console.log('broadcast page loaded.');\n        window.App.currentRouter = 'broadcast';\n    },\n\n    pageNotFoundRoute: function() {\n        console.log('pageNotFoundRoute');\n    }\n\n});\n```\n\n事实证明，我的想法是有一点点正确的，因为运行顺序是这样的：\n```bash\nin appView initialize.\ndoctor-router.js:11 Route initialize\ndoctor-router.js:22 chat page loaded.    # 首先，进入 router 的处理方法\napp.js:31 current route: chat            # 然后，响应 router 的 change 事件\napp.js:58 in appView render.             # 最后，appView 的 render 方法根据 route name\n                                         # render对应的 view\n```\n\nrender 的时候，首先要 **remove** 当前的view，然后 render 新的view。我是这么写的：\n```js\nif (this.siderView) {\n    // 删掉当前的\n    this.siderView.remove();\n}\n\nif (App.currentRouter === 'chat') {\n    this.siderView = new ChatSiderView();\n} else if (App.currentRouter === 'broadcast') {\n    this.siderView = new DoctorProfileView();\n}\n\n// render 新的 view\nthis.siderView.render();\n```\n\n运行之后我发现，这样点击下一个 nav 的时候， view 变成了空白的。后来审查元素，发现 el 那个节点整个被删掉了，因为他们两个共同放在同一个 el 下面。\n```js\n// view 1\nvar DoctorProfileView = Backbone.View.extend({\n    el: '.left_aside',\n    className:  'doctor_profile'\n    // ...\n});\n\n// view 2\nvar ChatSiderView = BaseView.extend({\n    el: '.left_aside',\n    // ...\n});\n```\n\n因为是新手，而且这是第一次用 backbone，所以还不知道 $el 就是 juqery 对象（其实问题不在这里），所以我就开始了漫无目的的搜索。\n\n其实办法肯定是有的，就是让他俩不共用同一个 el 节点，每次 render 完了之后，添加到要显示的地方，remove 的时候也只会删掉他自己，况且还可以用 hide。\n\n## 有了一线希望\n\n终于，我看到网上有人写了这么一句：\n```js\nthis.$el.empty();\n```\n\n然后我顺藤摸瓜看起了 backbone 的源代码：\n```js\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function (options) {\n      this.cid = _.uniqueId('view');\n      _.extend(this, _.pick(options, viewOptions));\n      this._ensureElement();\n      this.initialize.apply(this, arguments);\n  };\n\n  // Ensure that the View has a DOM element to render into.\n  // If `this.el` is a string, pass it through `$()`, take the first\n  // matching element, and re-assign it to `el`. Otherwise, create\n  // an element from the `id`, `className` and `tagName` properties.\n  _ensureElement: function () {\n      if (!this.el) {\n        // ...\n        // omit this because we pass 'el' as options to the View.\n        // ...\n      } else {\n          this.setElement(_.result(this, 'el'));\n      }\n  }\n\n  // Change the view's element (`this.el` property) and re-delegate the\n  // view's events on the new element.\n  setElement: function (element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n  }\n\n  // Creates the `this.el` and `this.$el` references for this view using the\n  // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n  // context or an element. Subclasses can override this to utilize an\n  // alternative DOM manipulation API and are only required to set the\n  // `this.el` property.\n  _setElement: function (el) {\n      this.$el = el instanceof Backbone.$\n               ? el\n               : Backbone.$(el);\n      this.el = this.$el[0];\n  }\n```\n\n上面这一段就是说，如果我们传入了 el 那么 backbone 会自动设置 $el（通过命名就能看出这是一个 jquery 对象咯）, 并且绑定我们在 events 定义的事件到这上面。\n\n然后还有 backbone 的 remove view 的方法：\n```js\n  // Remove this view by taking the element out of the DOM, and removing any\n  // applicable Backbone.Events listeners.\n  remove: function () {\n      this._removeElement();\n      this.stopListening();\n      return this;\n  },\n\n  // Remove this view's element from the document and all event listeners\n  // attached to it. Exposed for subclasses using an alternative DOM\n  // manipulation API.\n  _removeElement: function () {\n      this.$el.remove();\n  }\n```\n\n解除事件监听，删掉元素。\n\n## 最终的 hide 方法\n\n于是，我模仿着写了一个 hide 方法：\n```js\n  hide: function () {\n      this.undelegateEvents();\n      this.$el.empty();\n      this.stopListening();\n  }\n```\n好像很简单，哈哈， 顺便把 appView 里面也改掉：\n```js\nif (this.siderView) {\n    this.siderView.hide();\n}\n\nif (!App.currentRouter || App.currentRouter === 'chat') {\n    this.siderView = new ChatSiderView();\n} else if (App.currentRouter === 'broadcast') {\n    this.siderView = new DoctorProfileView();\n}\n\nthis.siderView.render();\n```\n运行之后，切换 view 正常了。耶！\n\n然后我想让我的view 都具有 hide 这个方法，恰好 backbone 很好的面向对象，于是：\n```js\n/*global define*/\ndefine([\n    'jquery',\n    'underscore',\n    'backbone'\n], function ($, _, Backbone) {\n    'use strict';\n\n    var BaseView = Backbone.View.extend({\n\n        hide: function () {\n            this.undelegateEvents();\n            this.$el.empty();\n            this.stopListening();\n        }\n\n    });\n\n    return BaseView;\n\n});\n\n// how to use\nvar ChatSiderView = BaseView.extend({\n\n    el: '.left_aside',\n\n    //...\n});\n```\n\n感觉非常顺畅。\n\n## 后记\n频繁的删除dom元素，速度肯定是慢的，恰好我的网页很简单，所以看不出明显的缺点，网上也是推荐使用 `display：none` 和 `display：block` 来切换 view， 等我以后再研究吧。\n\n以上。\n","source":"_posts/baseview-in-backbone.md","raw":"title: Baseview in Backbone\ntags:\n  - backbone\n  - base\n  - view\ncategories:\n  - Backbone\ndate: 2015-11-13 00:36:15\n---\n## 前言\n今天研究了好久的 Backbone，一直搞不明白，怎么通过 router 的改变来切换 view。\n\n## 过程跌宕起伏\n\n事情是这样的，都知道 backbone 有 model, collection, view, router 这些基本概念，今天我要写一个简单的网页，有两个 nav 项，因为用了 backbone，自然就想到了单页应用，就是单击其中某一个的时候，显示这一个 nav 项对应的内容。\n\n这就用到了 router 的事件，每当 router 改变时，重新 render 整个页面。（我是这么想的，也不是整个，router 变了有些内容必然会跟着变。）\n\n```js\nvar appView = this;\nBackbone.history.on('route', function (router, name) {\n    console.log('current route:', name);\n    appView.render();\n});\n```\n\n另外，在 router 里面我定义了一个变量，用来表明哪一个 nav 项被点击。\n```js\nBackbone.Router.extend({\n\n    // ... other methods\n\n    routes: {\n        '': 'chat', // default to #chat\n        'chat': 'chat',\n        'broadcast': 'broadcast',\n        '*nothingMatched': 'pageNotFoundRoute' // 404\n    },\n\n    chat: function () {\n        console.log(\"chat page loaded.\");\n        window.App.currentRouter = 'chat';\n    },\n\n    broadcast: function () {\n        console.log('broadcast page loaded.');\n        window.App.currentRouter = 'broadcast';\n    },\n\n    pageNotFoundRoute: function() {\n        console.log('pageNotFoundRoute');\n    }\n\n});\n```\n\n事实证明，我的想法是有一点点正确的，因为运行顺序是这样的：\n```bash\nin appView initialize.\ndoctor-router.js:11 Route initialize\ndoctor-router.js:22 chat page loaded.    # 首先，进入 router 的处理方法\napp.js:31 current route: chat            # 然后，响应 router 的 change 事件\napp.js:58 in appView render.             # 最后，appView 的 render 方法根据 route name\n                                         # render对应的 view\n```\n\nrender 的时候，首先要 **remove** 当前的view，然后 render 新的view。我是这么写的：\n```js\nif (this.siderView) {\n    // 删掉当前的\n    this.siderView.remove();\n}\n\nif (App.currentRouter === 'chat') {\n    this.siderView = new ChatSiderView();\n} else if (App.currentRouter === 'broadcast') {\n    this.siderView = new DoctorProfileView();\n}\n\n// render 新的 view\nthis.siderView.render();\n```\n\n运行之后我发现，这样点击下一个 nav 的时候， view 变成了空白的。后来审查元素，发现 el 那个节点整个被删掉了，因为他们两个共同放在同一个 el 下面。\n```js\n// view 1\nvar DoctorProfileView = Backbone.View.extend({\n    el: '.left_aside',\n    className:  'doctor_profile'\n    // ...\n});\n\n// view 2\nvar ChatSiderView = BaseView.extend({\n    el: '.left_aside',\n    // ...\n});\n```\n\n因为是新手，而且这是第一次用 backbone，所以还不知道 $el 就是 juqery 对象（其实问题不在这里），所以我就开始了漫无目的的搜索。\n\n其实办法肯定是有的，就是让他俩不共用同一个 el 节点，每次 render 完了之后，添加到要显示的地方，remove 的时候也只会删掉他自己，况且还可以用 hide。\n\n## 有了一线希望\n\n终于，我看到网上有人写了这么一句：\n```js\nthis.$el.empty();\n```\n\n然后我顺藤摸瓜看起了 backbone 的源代码：\n```js\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function (options) {\n      this.cid = _.uniqueId('view');\n      _.extend(this, _.pick(options, viewOptions));\n      this._ensureElement();\n      this.initialize.apply(this, arguments);\n  };\n\n  // Ensure that the View has a DOM element to render into.\n  // If `this.el` is a string, pass it through `$()`, take the first\n  // matching element, and re-assign it to `el`. Otherwise, create\n  // an element from the `id`, `className` and `tagName` properties.\n  _ensureElement: function () {\n      if (!this.el) {\n        // ...\n        // omit this because we pass 'el' as options to the View.\n        // ...\n      } else {\n          this.setElement(_.result(this, 'el'));\n      }\n  }\n\n  // Change the view's element (`this.el` property) and re-delegate the\n  // view's events on the new element.\n  setElement: function (element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n  }\n\n  // Creates the `this.el` and `this.$el` references for this view using the\n  // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n  // context or an element. Subclasses can override this to utilize an\n  // alternative DOM manipulation API and are only required to set the\n  // `this.el` property.\n  _setElement: function (el) {\n      this.$el = el instanceof Backbone.$\n               ? el\n               : Backbone.$(el);\n      this.el = this.$el[0];\n  }\n```\n\n上面这一段就是说，如果我们传入了 el 那么 backbone 会自动设置 $el（通过命名就能看出这是一个 jquery 对象咯）, 并且绑定我们在 events 定义的事件到这上面。\n\n然后还有 backbone 的 remove view 的方法：\n```js\n  // Remove this view by taking the element out of the DOM, and removing any\n  // applicable Backbone.Events listeners.\n  remove: function () {\n      this._removeElement();\n      this.stopListening();\n      return this;\n  },\n\n  // Remove this view's element from the document and all event listeners\n  // attached to it. Exposed for subclasses using an alternative DOM\n  // manipulation API.\n  _removeElement: function () {\n      this.$el.remove();\n  }\n```\n\n解除事件监听，删掉元素。\n\n## 最终的 hide 方法\n\n于是，我模仿着写了一个 hide 方法：\n```js\n  hide: function () {\n      this.undelegateEvents();\n      this.$el.empty();\n      this.stopListening();\n  }\n```\n好像很简单，哈哈， 顺便把 appView 里面也改掉：\n```js\nif (this.siderView) {\n    this.siderView.hide();\n}\n\nif (!App.currentRouter || App.currentRouter === 'chat') {\n    this.siderView = new ChatSiderView();\n} else if (App.currentRouter === 'broadcast') {\n    this.siderView = new DoctorProfileView();\n}\n\nthis.siderView.render();\n```\n运行之后，切换 view 正常了。耶！\n\n然后我想让我的view 都具有 hide 这个方法，恰好 backbone 很好的面向对象，于是：\n```js\n/*global define*/\ndefine([\n    'jquery',\n    'underscore',\n    'backbone'\n], function ($, _, Backbone) {\n    'use strict';\n\n    var BaseView = Backbone.View.extend({\n\n        hide: function () {\n            this.undelegateEvents();\n            this.$el.empty();\n            this.stopListening();\n        }\n\n    });\n\n    return BaseView;\n\n});\n\n// how to use\nvar ChatSiderView = BaseView.extend({\n\n    el: '.left_aside',\n\n    //...\n});\n```\n\n感觉非常顺畅。\n\n## 后记\n频繁的删除dom元素，速度肯定是慢的，恰好我的网页很简单，所以看不出明显的缺点，网上也是推荐使用 `display：none` 和 `display：block` 来切换 view， 等我以后再研究吧。\n\n以上。\n","slug":"baseview-in-backbone","published":1,"updated":"2016-02-17T04:56:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560y3002v4kza4l73ate3"},{"title":"git in action","_content":"\n# git 的工作流\n\n```sh\ngit-flow feature start cs_send_message_to_doctor\n```\n\n# branch\n\n# stash\n* git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\n* git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。\n* git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\n* git stash clear: 清空Git栈。\n* git stash apply stash@{n}: 恢复到第 n 个\n\n### git stash apply 的例子\n```shell\n$ git stash list\nstash@{0}: WIP on master: e95dc37 Require administrator authority...\nstash@{1}: WIP on md_develop: fcaa18f Add an object to recieve md...\n\n$ git stash apply stash@{1}\n```\n\n> 而且，pop 出来的内容只是你上次 stash 时候的内容，在这之间，如果对stash的文件做了修改，`stash pop` 之后就没了。  \n\n> 所以在 `stash pop` 之前尽量`commit`一下，然后用 `cherry-pick` 来通过增量的方法将修复的内容合并到新版本上，如果有冲突需要手动解决。\n\n# fetch 和 pull 的区别\n\n# cherry-pick\n\n# revert 和 reset\n- git revert 是撤销某次操作，此次操作之前的commit都会被保留\n- git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区\n","source":"_drafts/git-in-action.md","raw":"title: git in action\ntags:\n  - git\ncategories:\n  - GIT\n---\n\n# git 的工作流\n\n```sh\ngit-flow feature start cs_send_message_to_doctor\n```\n\n# branch\n\n# stash\n* git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\n* git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。\n* git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\n* git stash clear: 清空Git栈。\n* git stash apply stash@{n}: 恢复到第 n 个\n\n### git stash apply 的例子\n```shell\n$ git stash list\nstash@{0}: WIP on master: e95dc37 Require administrator authority...\nstash@{1}: WIP on md_develop: fcaa18f Add an object to recieve md...\n\n$ git stash apply stash@{1}\n```\n\n> 而且，pop 出来的内容只是你上次 stash 时候的内容，在这之间，如果对stash的文件做了修改，`stash pop` 之后就没了。  \n\n> 所以在 `stash pop` 之前尽量`commit`一下，然后用 `cherry-pick` 来通过增量的方法将修复的内容合并到新版本上，如果有冲突需要手动解决。\n\n# fetch 和 pull 的区别\n\n# cherry-pick\n\n# revert 和 reset\n- git revert 是撤销某次操作，此次操作之前的commit都会被保留\n- git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区\n","slug":"git-in-action","published":0,"date":"2016-03-03T09:34:09.000Z","updated":"2016-03-03T09:34:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cild560y600344kzapv0g7roq"}],"PostAsset":[],"PostCategory":[{"post_id":"cild560w200044kzadjsf8dq3","category_id":"cild560w800054kzajq19tsqe","_id":"cild560wb00084kzaa7ed9gec"},{"post_id":"cild560wf000b4kza8tt27p0c","category_id":"cild560wi000c4kzam7dq2kp4","_id":"cild560wi000f4kzanrcck07c"},{"post_id":"cild560wl000k4kzanu1r7egc","category_id":"cild560wl000l4kza3eq45fw6","_id":"cild560wm000o4kzajehabqb2"},{"post_id":"cild560wp000r4kzarvv1z4j1","category_id":"cild560wi000c4kzam7dq2kp4","_id":"cild560wr000s4kza883okvfi"},{"post_id":"cild560wu00114kza1vm5o7i7","category_id":"cild560ww00124kzadi00fnrs","_id":"cild560wx00154kzal3pvbxjd"},{"post_id":"cild560wy00164kzaohdjqg6k","category_id":"cild560wi000c4kzam7dq2kp4","_id":"cild560x000174kzaquj4htiz"},{"post_id":"cild560x2001a4kzauwi1xbcj","category_id":"cild560x4001b4kzagw8apyrj","_id":"cild560x5001e4kzadt9924pa"},{"post_id":"cild560x8001l4kzabjvkqq50","category_id":"cild560wl000l4kza3eq45fw6","_id":"cild560x9001m4kzaazt5netf"},{"post_id":"cild560xc001q4kzaql22pm19","category_id":"cild560wl000l4kza3eq45fw6","_id":"cild560xe001r4kzahgpioklb"},{"post_id":"cild560xg001v4kzaor7sikej","category_id":"cild560xh001w4kzau0j4h7w5","_id":"cild560xh001z4kzadjana1eh"},{"post_id":"cild560xj00204kzauio7p01j","category_id":"cild560xk00214kzal3qnlgs1","_id":"cild560xk00244kzayc0qf643"},{"post_id":"cild560xl00274kzams4ccom3","category_id":"cild560xm00284kzabrcgi5r2","_id":"cild560xm002b4kza5d8343k8"},{"post_id":"cild560xo002e4kza0oanugc4","category_id":"cild560xp002f4kza5qd62fxh","_id":"cild560xp002i4kza1bd1ow93"},{"post_id":"cild560xq002l4kza4u2xtmup","category_id":"cild560xs002m4kzazr365dbj","_id":"cild560xt002p4kzakat12ck1"},{"post_id":"cild560xu002r4kza35yebpr1","category_id":"cild560xp002f4kza5qd62fxh","_id":"cild560y2002s4kzaf7gf4hsn"},{"post_id":"cild560y3002v4kza4l73ate3","category_id":"cild560y4002w4kza2gpy93r3","_id":"cild560y4002z4kzalaznn479"},{"post_id":"cild560y600344kzapv0g7roq","category_id":"cild560xk00214kzal3qnlgs1","_id":"cild560y700354kza5uxhg2e0"}],"PostTag":[{"post_id":"cild560w200044kzadjsf8dq3","tag_id":"cild560w800064kzatdyunn8o","_id":"cild560wc00094kzand9ws3nw"},{"post_id":"cild560w200044kzadjsf8dq3","tag_id":"cild560wa00074kzalaf8kpc6","_id":"cild560wc000a4kzaaarsd3s1"},{"post_id":"cild560wf000b4kza8tt27p0c","tag_id":"cild560wi000d4kzamz5vamlh","_id":"cild560wj000h4kzauh8bmcyo"},{"post_id":"cild560wf000b4kza8tt27p0c","tag_id":"cild560wi000e4kzaue32ve7u","_id":"cild560wj000i4kzattj246nv"},{"post_id":"cild560wf000b4kza8tt27p0c","tag_id":"cild560wi000g4kzamofpbczh","_id":"cild560wj000j4kza27hcq13c"},{"post_id":"cild560wl000k4kzanu1r7egc","tag_id":"cild560wm000m4kza1sfa3e74","_id":"cild560wn000p4kza8zo0wutx"},{"post_id":"cild560wl000k4kzanu1r7egc","tag_id":"cild560wm000n4kzaydzbu323","_id":"cild560wn000q4kzakvpqyj5j"},{"post_id":"cild560wp000r4kzarvv1z4j1","tag_id":"cild560wr000t4kzax3hw66fe","_id":"cild560ws000x4kzazty6will"},{"post_id":"cild560wp000r4kzarvv1z4j1","tag_id":"cild560ws000u4kzahcxx9fjv","_id":"cild560wt000y4kzahkx6c267"},{"post_id":"cild560wp000r4kzarvv1z4j1","tag_id":"cild560ws000v4kzavggnv2h9","_id":"cild560wt000z4kzaazt0jdka"},{"post_id":"cild560wp000r4kzarvv1z4j1","tag_id":"cild560ws000w4kzaivkgblzl","_id":"cild560wt00104kzaivxi6o2z"},{"post_id":"cild560wu00114kza1vm5o7i7","tag_id":"cild560wx00134kza3xgp0vce","_id":"cild560wx00144kza3755qcfi"},{"post_id":"cild560wy00164kzaohdjqg6k","tag_id":"cild560x000184kzayteqjb5o","_id":"cild560x100194kza54pz07jo"},{"post_id":"cild560x2001a4kzauwi1xbcj","tag_id":"cild560x4001c4kzal34x2p9e","_id":"cild560x6001h4kza3nn9j0f7"},{"post_id":"cild560x2001a4kzauwi1xbcj","tag_id":"cild560x5001d4kza6j7iz3ee","_id":"cild560x6001i4kzailbcg0yf"},{"post_id":"cild560x2001a4kzauwi1xbcj","tag_id":"cild560x5001f4kza06ug7fil","_id":"cild560x6001j4kzanexvxuyh"},{"post_id":"cild560x2001a4kzauwi1xbcj","tag_id":"cild560x5001g4kzahtpcam1q","_id":"cild560x6001k4kzabrya70jt"},{"post_id":"cild560x8001l4kzabjvkqq50","tag_id":"cild560wm000m4kza1sfa3e74","_id":"cild560xa001o4kza5xs09xi0"},{"post_id":"cild560x8001l4kzabjvkqq50","tag_id":"cild560x9001n4kza91u4zmi8","_id":"cild560xa001p4kzalb0lq20n"},{"post_id":"cild560xc001q4kzaql22pm19","tag_id":"cild560wm000m4kza1sfa3e74","_id":"cild560xf001t4kza1kg69n2q"},{"post_id":"cild560xc001q4kzaql22pm19","tag_id":"cild560xe001s4kzacg44bd02","_id":"cild560xf001u4kzaap6ei9j7"},{"post_id":"cild560xg001v4kzaor7sikej","tag_id":"cild560xh001x4kza0iraxw8e","_id":"cild560xh001y4kzarcfoj5a1"},{"post_id":"cild560xj00204kzauio7p01j","tag_id":"cild560xk00224kzav8tjhgpt","_id":"cild560xk00254kzal8e668q1"},{"post_id":"cild560xj00204kzauio7p01j","tag_id":"cild560xk00234kzaq4d6g4i2","_id":"cild560xk00264kzaaza62d30"},{"post_id":"cild560xl00274kzams4ccom3","tag_id":"cild560xm00294kzavg1w5hd8","_id":"cild560xn002c4kzaoiw4uwyp"},{"post_id":"cild560xl00274kzams4ccom3","tag_id":"cild560xm002a4kzawbdfu7gx","_id":"cild560xn002d4kzappds0gm0"},{"post_id":"cild560xo002e4kza0oanugc4","tag_id":"cild560xp002g4kza7je8fnv0","_id":"cild560xp002j4kzajguwasyk"},{"post_id":"cild560xo002e4kza0oanugc4","tag_id":"cild560xp002h4kzaft638d3u","_id":"cild560xq002k4kza4nz5x17h"},{"post_id":"cild560xq002l4kza4u2xtmup","tag_id":"cild560wa00074kzalaf8kpc6","_id":"cild560xt002o4kzabviik8ov"},{"post_id":"cild560xq002l4kza4u2xtmup","tag_id":"cild560xs002n4kzaj581drzw","_id":"cild560xt002q4kza9xkbe13y"},{"post_id":"cild560xu002r4kza35yebpr1","tag_id":"cild560y2002t4kzau8kb2fxr","_id":"cild560y2002u4kzaea2yxlly"},{"post_id":"cild560y3002v4kza4l73ate3","tag_id":"cild560y4002x4kzaikf8zm2m","_id":"cild560y400314kza5bwowdpn"},{"post_id":"cild560y3002v4kza4l73ate3","tag_id":"cild560y4002y4kza6nxjz8vy","_id":"cild560y400324kzaauwlgqcu"},{"post_id":"cild560y3002v4kza4l73ate3","tag_id":"cild560y400304kzalcfkms8n","_id":"cild560y500334kzau8xb431l"},{"post_id":"cild560y600344kzapv0g7roq","tag_id":"cild560xk00224kzav8tjhgpt","_id":"cild560y700364kzad0ga2igq"}],"Tag":[{"name":"html","_id":"cild560w800064kzatdyunn8o"},{"name":"css","_id":"cild560wa00074kzalaf8kpc6"},{"name":"compatible module","_id":"cild560wi000d4kzamz5vamlh"},{"name":"AMD","_id":"cild560wi000e4kzaue32ve7u"},{"name":"CMD","_id":"cild560wi000g4kzamofpbczh"},{"name":"mysql","_id":"cild560wm000m4kza1sfa3e74"},{"name":"中文乱码","_id":"cild560wm000n4kzaydzbu323"},{"name":"ts","_id":"cild560wr000t4kzax3hw66fe"},{"name":"date","_id":"cild560ws000u4kzahcxx9fjv"},{"name":"format","_id":"cild560ws000v4kzavggnv2h9"},{"name":"js","_id":"cild560ws000w4kzaivkgblzl"},{"name":"微信开发","_id":"cild560wx00134kza3xgp0vce"},{"name":"imgage error","_id":"cild560x000184kzayteqjb5o"},{"name":"tedx","_id":"cild560x4001c4kzal34x2p9e"},{"name":"在网络暴力中捍卫自己","_id":"cild560x5001d4kza6j7iz3ee"},{"name":"演讲稿","_id":"cild560x5001f4kza06ug7fil"},{"name":"袁姗姗","_id":"cild560x5001g4kzahtpcam1q"},{"name":"navicat","_id":"cild560x9001n4kza91u4zmi8"},{"name":"paswword","_id":"cild560xe001s4kzacg44bd02"},{"name":"端口占用","_id":"cild560xh001x4kza0iraxw8e"},{"name":"git","_id":"cild560xk00224kzav8tjhgpt"},{"name":"记住密码","_id":"cild560xk00234kzaq4d6g4i2"},{"name":"scss","_id":"cild560xm00294kzavg1w5hd8"},{"name":"for","_id":"cild560xm002a4kzawbdfu7gx"},{"name":"埃塞克斯","_id":"cild560xp002g4kza7je8fnv0"},{"name":"航母","_id":"cild560xp002h4kzaft638d3u"},{"name":"animation","_id":"cild560xs002n4kzaj581drzw"},{"name":"建造公式","_id":"cild560y2002t4kzau8kb2fxr"},{"name":"backbone","_id":"cild560y4002x4kzaikf8zm2m"},{"name":"base","_id":"cild560y4002y4kza6nxjz8vy"},{"name":"view","_id":"cild560y400304kzalcfkms8n"}]}}